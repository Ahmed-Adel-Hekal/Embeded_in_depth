
Lect4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  0000019c  2**0
                  ALLOC
  2 .bss          00000002  00800060  00800060  00001990  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000002a  00000000  00000000  000019bf  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  000019e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006572  00000000  00000000  00001dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000105b  00000000  00000000  00008333  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029b3  00000000  00000000  0000938e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c44  00000000  00000000  0000bd44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000767  00000000  00000000  0000c988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004da4  00000000  00000000  0000d0ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  00011e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000018ac  000018ac  00001980  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0001229c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.pvPortMalloc 00000074  0000121e  0000121e  000012f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.vPortFree 00000002  000018b4  000018b4  00001988  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.pucAlignedHeap.2094 00000002  0080068f  0080068f  00001990  2**0
                  ALLOC
 18 .bss.xNextFreeByte 00000002  00800691  00800691  00001990  2**0
                  ALLOC
 19 .bss.ucHeap   000005dc  00800062  00800062  00001990  2**0
                  ALLOC
 20 .text.HLCD_vsendData 00000068  00001300  00001300  000013d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.HLCD_vsendCommand 00000068  00001368  00001368  0000143c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.HLCD_vShowString 00000042  000015ee  000015ee  000016c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.HLCD_vInit 00000076  000011a8  000011a8  0000127c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.HLCD_u8GotoXY 0000002e  00001738  00001738  0000180c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.vListInitialise 0000001c  000017de  000017de  000018b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.vListInitialiseItem 00000008  0000188a  0000188a  0000195e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.vListInsert 00000062  00001436  00001436  0000150a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.uxListRemove 0000004e  00001554  00001554  00001628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .progmemx.data 0000001a  000000ae  000000ae  00000182  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 30 .text.Task1   0000001c  000017fa  000017fa  000018ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.Task2   00000034  000016a0  000016a0  00001774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.main    00000066  000013d0  000013d0  000014a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.prvSetupTimerInterrupt 00000012  0000185c  0000185c  00001930  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.pxPortInitialiseStack 000000d8  00000b48  00000b48  00000c1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.xPortStartScheduler 0000005e  00001498  00001498  0000156c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.vPortYield 000000b2  00000d9a  00000d9a  00000e6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.vPortYieldFromTick 000000b8  00000ce2  00000ce2  00000db6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__vector_7 00000006  0000189a  0000189a  0000196e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.prvIsQueueFull 00000038  00001630  00001630  00001704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.prvCopyDataToQueue 00000092  00000f8c  00000f8c  00001060  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.prvNotifyQueueSetContainer 00000098  00000ef4  00000ef4  00000fc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.prvUnlockQueue 0000008a  0000101e  0000101e  000010f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.xQueueGenericReset 000000c2  00000c20  00000c20  00000cf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.prvInitialiseNewQueue 00000032  000016d4  000016d4  000017a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.xQueueGenericCreate 00000082  000010a8  000010a8  0000117c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.xQueueGenericSend 00000154  00000630  00000630  00000704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.prvResetNextTaskUnblockTime 00000038  00001668  00001668  0000173c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.prvDeleteTCB 0000001a  00001816  00001816  000018ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.prvInitialiseNewTask 000000ea  00000980  00000980  00000a54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.prvInitialiseTaskLists 0000006e  00001292  00001292  00001366  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.prvAddNewTaskToReadyList 000000fa  00000886  00000886  0000095a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.prvCheckTasksWaitingTermination 0000004c  000015a2  000015a2  00001676  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.prvIdleTask 00000006  000018a0  000018a0  00001974  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.prvAddCurrentTaskToDelayedList 00000102  00000784  00000784  00000858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.xTaskCreate 000000de  00000a6a  00000a6a  00000b3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .progmemx.data 00000006  000000c8  000000c8  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 57 .text.vTaskStartScheduler 0000005e  000014f6  000014f6  000015ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.vTaskSuspendAll 0000000c  0000187e  0000187e  00001952  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.uxTaskGetNumberOfTasks 00000006  000018a6  000018a6  0000197a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.xTaskIncrementTick 00000234  000000ce  000000ce  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.xTaskResumeAll 000001aa  00000302  00000302  000003d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.vTaskDelay 0000002c  00001766  00001766  0000183a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.vTaskSwitchContext 000000a8  00000e4c  00000e4c  00000f20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.vTaskPlaceOnEventList 00000024  000017ba  000017ba  0000188e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.xTaskRemoveFromEventList 00000184  000004ac  000004ac  00000580  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.vTaskInternalSetTimeOutState 00000016  00001830  00001830  00001904  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.xTaskCheckForTimeOut 0000007e  0000112a  0000112a  000011fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.vTaskMissedYield 00000008  00001892  00001892  00001966  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .bss.uxSchedulerSuspended 00000001  008006a1  008006a1  00001990  2**0
                  ALLOC
 70 .bss.xIdleTaskHandle 00000002  00800693  00800693  00001990  2**0
                  ALLOC
 71 .bss.xNextTaskUnblockTime 00000002  00800695  00800695  00001990  2**0
                  ALLOC
 72 .bss.uxTaskNumber 00000001  008006a2  008006a2  00001990  2**0
                  ALLOC
 73 .bss.xNumOfOverflows 00000001  008006a3  008006a3  00001990  2**0
                  ALLOC
 74 .bss.xYieldPending 00000001  008006a4  008006a4  00001990  2**0
                  ALLOC
 75 .bss.xPendedTicks 00000002  00800697  00800697  00001990  2**0
                  ALLOC
 76 .bss.xSchedulerRunning 00000001  008006a5  008006a5  00001990  2**0
                  ALLOC
 77 .bss.uxTopReadyPriority 00000001  008006a6  008006a6  00001990  2**0
                  ALLOC
 78 .bss.xTickCount 00000002  00800699  00800699  00001990  2**0
                  ALLOC
 79 .bss.uxCurrentNumberOfTasks 00000001  008006a7  008006a7  00001990  2**0
                  ALLOC
 80 .bss.xSuspendedTaskList 00000009  00800662  00800662  00001990  2**0
                  ALLOC
 81 .bss.uxDeletedTasksWaitingCleanUp 00000001  008006a8  008006a8  00001990  2**0
                  ALLOC
 82 .bss.xTasksWaitingTermination 00000009  0080066b  0080066b  00001990  2**0
                  ALLOC
 83 .bss.xPendingReadyList 00000009  00800674  00800674  00001990  2**0
                  ALLOC
 84 .bss.pxOverflowDelayedTaskList 00000002  0080069b  0080069b  00001990  2**0
                  ALLOC
 85 .bss.pxDelayedTaskList 00000002  0080069d  0080069d  00001990  2**0
                  ALLOC
 86 .bss.xDelayedTaskList2 00000009  0080067d  0080067d  00001990  2**0
                  ALLOC
 87 .bss.xDelayedTaskList1 00000009  00800686  00800686  00001990  2**0
                  ALLOC
 88 .bss.pxReadyTasksLists 00000024  0080063e  0080063e  00001990  2**0
                  ALLOC
 89 .bss.pxCurrentTCB 00000002  0080069f  0080069f  00001990  2**0
                  ALLOC
 90 .text.libgcc.div 00000028  00001792  00001792  00001866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.libgcc  00000010  0000186e  0000186e  00001942  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.__dummy_fini 00000002  000018b6  000018b6  0000198a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.__dummy_funcs_on_exit 00000002  000018b8  000018b8  0000198c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.__dummy_simulator_exit 00000002  000018ba  000018ba  0000198e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.exit    00000016  00001846  00001846  0000191a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.memcpy  00000032  00001706  00001706  000017da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text._Exit   00000004  000018b0  000018b0  00001984  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
   8:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
   c:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  10:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  14:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  18:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  1c:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_7>
  20:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  24:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  28:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  2c:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  30:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  34:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  38:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  3c:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  40:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  44:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  48:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  4c:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>
  50:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	06 a9       	ldd	r16, Z+54	; 0x36
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <main>
  a6:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

000018ac <__bad_interrupt>:
    18ac:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.pvPortMalloc:

0000121e <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
    1224:	0e 94 3f 0c 	call	0x187e	; 0x187e <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
    1228:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <pucAlignedHeap.2094>
    122c:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <pucAlignedHeap.2094+0x1>
    1230:	89 2b       	or	r24, r25
    1232:	31 f4       	brne	.+12     	; 0x1240 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1234:	82 e6       	ldi	r24, 0x62	; 98
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <pucAlignedHeap.2094+0x1>
    123c:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <pucAlignedHeap.2094>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    1240:	20 97       	sbiw	r28, 0x00	; 0
    1242:	c9 f0       	breq	.+50     	; 0x1276 <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1244:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <xNextFreeByte>
    1248:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <xNextFreeByte+0x1>
    124c:	9e 01       	movw	r18, r28
    124e:	28 0f       	add	r18, r24
    1250:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    1252:	2b 3d       	cpi	r18, 0xDB	; 219
    1254:	45 e0       	ldi	r20, 0x05	; 5
    1256:	34 07       	cpc	r19, r20
    1258:	88 f4       	brcc	.+34     	; 0x127c <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    125a:	82 17       	cp	r24, r18
    125c:	93 07       	cpc	r25, r19
    125e:	88 f4       	brcc	.+34     	; 0x1282 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
    1260:	c0 91 8f 06 	lds	r28, 0x068F	; 0x80068f <pucAlignedHeap.2094>
    1264:	d0 91 90 06 	lds	r29, 0x0690	; 0x800690 <pucAlignedHeap.2094+0x1>
    1268:	c8 0f       	add	r28, r24
    126a:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
    126c:	30 93 92 06 	sts	0x0692, r19	; 0x800692 <xNextFreeByte+0x1>
    1270:	20 93 91 06 	sts	0x0691, r18	; 0x800691 <xNextFreeByte>
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
    1276:	c0 e0       	ldi	r28, 0x00	; 0
    1278:	d0 e0       	ldi	r29, 0x00	; 0
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <pvPortMalloc+0x68>
    127c:	c0 e0       	ldi	r28, 0x00	; 0
    127e:	d0 e0       	ldi	r29, 0x00	; 0
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <pvPortMalloc+0x68>
    1282:	c0 e0       	ldi	r28, 0x00	; 0
    1284:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1286:	0e 94 81 01 	call	0x302	; 0x302 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
    128a:	ce 01       	movw	r24, r28
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	08 95       	ret

Disassembly of section .text.vPortFree:

000018b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    18b4:	08 95       	ret

Disassembly of section .text.HLCD_vsendData:

00001300 <HLCD_vsendData>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1300:	9b b3       	in	r25, 0x1b	; 27
    1302:	9f 70       	andi	r25, 0x0F	; 15
    1304:	28 2f       	mov	r18, r24
    1306:	20 7f       	andi	r18, 0xF0	; 240
    1308:	92 2b       	or	r25, r18
    130a:	9b bb       	out	0x1b, r25	; 27
    130c:	98 b3       	in	r25, 0x18	; 24
    130e:	92 60       	ori	r25, 0x02	; 2
    1310:	98 bb       	out	0x18, r25	; 24
    1312:	98 b3       	in	r25, 0x18	; 24
    1314:	9b 7f       	andi	r25, 0xFB	; 251
    1316:	98 bb       	out	0x18, r25	; 24
    1318:	98 b3       	in	r25, 0x18	; 24
    131a:	98 60       	ori	r25, 0x08	; 8
    131c:	98 bb       	out	0x18, r25	; 24
    131e:	ef e9       	ldi	r30, 0x9F	; 159
    1320:	ff e0       	ldi	r31, 0x0F	; 15
    1322:	31 97       	sbiw	r30, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <HLCD_vsendData+0x22>
    1326:	00 c0       	rjmp	.+0      	; 0x1328 <HLCD_vsendData+0x28>
    1328:	00 00       	nop
    132a:	98 b3       	in	r25, 0x18	; 24
    132c:	97 7f       	andi	r25, 0xF7	; 247
    132e:	98 bb       	out	0x18, r25	; 24
    1330:	2b b3       	in	r18, 0x1b	; 27
    1332:	f0 e1       	ldi	r31, 0x10	; 16
    1334:	8f 9f       	mul	r24, r31
    1336:	c0 01       	movw	r24, r0
    1338:	11 24       	eor	r1, r1
    133a:	92 2f       	mov	r25, r18
    133c:	9f 70       	andi	r25, 0x0F	; 15
    133e:	89 2b       	or	r24, r25
    1340:	8b bb       	out	0x1b, r24	; 27
    1342:	88 b3       	in	r24, 0x18	; 24
    1344:	82 60       	ori	r24, 0x02	; 2
    1346:	88 bb       	out	0x18, r24	; 24
    1348:	88 b3       	in	r24, 0x18	; 24
    134a:	8b 7f       	andi	r24, 0xFB	; 251
    134c:	88 bb       	out	0x18, r24	; 24
    134e:	88 b3       	in	r24, 0x18	; 24
    1350:	88 60       	ori	r24, 0x08	; 8
    1352:	88 bb       	out	0x18, r24	; 24
    1354:	8f e9       	ldi	r24, 0x9F	; 159
    1356:	9f e0       	ldi	r25, 0x0F	; 15
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <HLCD_vsendData+0x58>
    135c:	00 c0       	rjmp	.+0      	; 0x135e <HLCD_vsendData+0x5e>
    135e:	00 00       	nop
    1360:	88 b3       	in	r24, 0x18	; 24
    1362:	87 7f       	andi	r24, 0xF7	; 247
    1364:	88 bb       	out	0x18, r24	; 24
    1366:	08 95       	ret

Disassembly of section .text.HLCD_vsendCommand:

00001368 <HLCD_vsendCommand>:
    1368:	9b b3       	in	r25, 0x1b	; 27
    136a:	9f 70       	andi	r25, 0x0F	; 15
    136c:	28 2f       	mov	r18, r24
    136e:	20 7f       	andi	r18, 0xF0	; 240
    1370:	92 2b       	or	r25, r18
    1372:	9b bb       	out	0x1b, r25	; 27
    1374:	98 b3       	in	r25, 0x18	; 24
    1376:	9d 7f       	andi	r25, 0xFD	; 253
    1378:	98 bb       	out	0x18, r25	; 24
    137a:	98 b3       	in	r25, 0x18	; 24
    137c:	9b 7f       	andi	r25, 0xFB	; 251
    137e:	98 bb       	out	0x18, r25	; 24
    1380:	98 b3       	in	r25, 0x18	; 24
    1382:	98 60       	ori	r25, 0x08	; 8
    1384:	98 bb       	out	0x18, r25	; 24
    1386:	ef e9       	ldi	r30, 0x9F	; 159
    1388:	ff e0       	ldi	r31, 0x0F	; 15
    138a:	31 97       	sbiw	r30, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <HLCD_vsendCommand+0x22>
    138e:	00 c0       	rjmp	.+0      	; 0x1390 <HLCD_vsendCommand+0x28>
    1390:	00 00       	nop
    1392:	98 b3       	in	r25, 0x18	; 24
    1394:	97 7f       	andi	r25, 0xF7	; 247
    1396:	98 bb       	out	0x18, r25	; 24
    1398:	2b b3       	in	r18, 0x1b	; 27
    139a:	f0 e1       	ldi	r31, 0x10	; 16
    139c:	8f 9f       	mul	r24, r31
    139e:	c0 01       	movw	r24, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	92 2f       	mov	r25, r18
    13a4:	9f 70       	andi	r25, 0x0F	; 15
    13a6:	89 2b       	or	r24, r25
    13a8:	8b bb       	out	0x1b, r24	; 27
    13aa:	88 b3       	in	r24, 0x18	; 24
    13ac:	8d 7f       	andi	r24, 0xFD	; 253
    13ae:	88 bb       	out	0x18, r24	; 24
    13b0:	88 b3       	in	r24, 0x18	; 24
    13b2:	8b 7f       	andi	r24, 0xFB	; 251
    13b4:	88 bb       	out	0x18, r24	; 24
    13b6:	88 b3       	in	r24, 0x18	; 24
    13b8:	88 60       	ori	r24, 0x08	; 8
    13ba:	88 bb       	out	0x18, r24	; 24
    13bc:	8f e9       	ldi	r24, 0x9F	; 159
    13be:	9f e0       	ldi	r25, 0x0F	; 15
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <HLCD_vsendCommand+0x58>
    13c4:	00 c0       	rjmp	.+0      	; 0x13c6 <HLCD_vsendCommand+0x5e>
    13c6:	00 00       	nop
    13c8:	88 b3       	in	r24, 0x18	; 24
    13ca:	87 7f       	andi	r24, 0xF7	; 247
    13cc:	88 bb       	out	0x18, r24	; 24
    13ce:	08 95       	ret

Disassembly of section .text.HLCD_vShowString:

000015ee <HLCD_vShowString>:
	HLCD_vsendCommand(0x01);
	_delay_ms(2);

}

void HLCD_vShowString(u8 const * const  str){
    15ee:	cf 92       	push	r12
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	cf 93       	push	r28
    15f6:	6b 01       	movw	r12, r22
    15f8:	e8 2e       	mov	r14, r24
	u8 i = 0;
    15fa:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i]!=0){
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <HLCD_vShowString+0x22>
		HLCD_vsendData(str[i]);
    15fe:	0e 94 80 09 	call	0x1300	; 0x1300 <HLCD_vsendData>
    1602:	8f e9       	ldi	r24, 0x9F	; 159
    1604:	9f e0       	ldi	r25, 0x0F	; 15
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <HLCD_vShowString+0x18>
    160a:	00 c0       	rjmp	.+0      	; 0x160c <HLCD_vShowString+0x1e>
    160c:	00 00       	nop
		_delay_ms(1);
		i++;
    160e:	cf 5f       	subi	r28, 0xFF	; 255

}

void HLCD_vShowString(u8 const * const  str){
	u8 i = 0;
	while(str[i]!=0){
    1610:	ae 2d       	mov	r26, r14
    1612:	c6 01       	movw	r24, r12
    1614:	8c 0f       	add	r24, r28
    1616:	91 1d       	adc	r25, r1
    1618:	a1 1d       	adc	r26, r1
    161a:	fc 01       	movw	r30, r24
    161c:	84 91       	lpm	r24, Z
    161e:	a7 fd       	sbrc	r26, 7
    1620:	80 81       	ld	r24, Z
    1622:	81 11       	cpse	r24, r1
    1624:	ec cf       	rjmp	.-40     	; 0x15fe <HLCD_vShowString+0x10>
		HLCD_vsendData(str[i]);
		_delay_ms(1);
		i++;
	}
	
}
    1626:	cf 91       	pop	r28
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	cf 90       	pop	r12
    162e:	08 95       	ret

Disassembly of section .text.HLCD_vInit:

000011a8 <HLCD_vInit>:
    11a8:	8f e0       	ldi	r24, 0x0F	; 15
    11aa:	87 bb       	out	0x17, r24	; 23
    11ac:	80 ef       	ldi	r24, 0xF0	; 240
    11ae:	8a bb       	out	0x1a, r24	; 26
    11b0:	2f ef       	ldi	r18, 0xFF	; 255
    11b2:	83 ef       	ldi	r24, 0xF3	; 243
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	21 50       	subi	r18, 0x01	; 1
    11b8:	80 40       	sbci	r24, 0x00	; 0
    11ba:	90 40       	sbci	r25, 0x00	; 0
    11bc:	e1 f7       	brne	.-8      	; 0x11b6 <HLCD_vInit+0xe>
    11be:	00 c0       	rjmp	.+0      	; 0x11c0 <HLCD_vInit+0x18>
    11c0:	00 00       	nop
    11c2:	88 e2       	ldi	r24, 0x28	; 40
    11c4:	0e 94 b4 09 	call	0x1368	; 0x1368 <HLCD_vsendCommand>
    11c8:	25 ed       	ldi	r18, 0xD5	; 213
    11ca:	2a 95       	dec	r18
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <HLCD_vInit+0x22>
    11ce:	00 00       	nop
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	0e 94 b4 09 	call	0x1368	; 0x1368 <HLCD_vsendCommand>
    11d6:	8f e3       	ldi	r24, 0x3F	; 63
    11d8:	9f e1       	ldi	r25, 0x1F	; 31
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <HLCD_vInit+0x32>
    11de:	00 c0       	rjmp	.+0      	; 0x11e0 <HLCD_vInit+0x38>
    11e0:	00 00       	nop
    11e2:	86 e0       	ldi	r24, 0x06	; 6
    11e4:	0e 94 b4 09 	call	0x1368	; 0x1368 <HLCD_vsendCommand>
    11e8:	95 ed       	ldi	r25, 0xD5	; 213
    11ea:	9a 95       	dec	r25
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <HLCD_vInit+0x42>
    11ee:	00 00       	nop
    11f0:	8f e0       	ldi	r24, 0x0F	; 15
    11f2:	0e 94 b4 09 	call	0x1368	; 0x1368 <HLCD_vsendCommand>
    11f6:	84 e1       	ldi	r24, 0x14	; 20
    11f8:	0e 94 b4 09 	call	0x1368	; 0x1368 <HLCD_vsendCommand>
    11fc:	25 ed       	ldi	r18, 0xD5	; 213
    11fe:	2a 95       	dec	r18
    1200:	f1 f7       	brne	.-4      	; 0x11fe <HLCD_vInit+0x56>
    1202:	00 00       	nop
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	0e 94 b4 09 	call	0x1368	; 0x1368 <HLCD_vsendCommand>
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	93 ec       	ldi	r25, 0xC3	; 195
    120e:	29 e0       	ldi	r18, 0x09	; 9
    1210:	81 50       	subi	r24, 0x01	; 1
    1212:	90 40       	sbci	r25, 0x00	; 0
    1214:	20 40       	sbci	r18, 0x00	; 0
    1216:	e1 f7       	brne	.-8      	; 0x1210 <HLCD_vInit+0x68>
    1218:	00 c0       	rjmp	.+0      	; 0x121a <HLCD_vInit+0x72>
    121a:	00 00       	nop
    121c:	08 95       	ret

Disassembly of section .text.HLCD_u8GotoXY:

00001738 <HLCD_u8GotoXY>:
        description : This Function change Cursor position between line1 and line2 
                      and 40 characters position 
    */
    u8 local_error = STD_Sucesses; 

    if(copy_u8Location <= 40){
    1738:	69 32       	cpi	r22, 0x29	; 41
    173a:	88 f4       	brcc	.+34     	; 0x175e <HLCD_u8GotoXY+0x26>
        switch (copy_u8LineNumber)
    173c:	88 23       	and	r24, r24
    173e:	19 f0       	breq	.+6      	; 0x1746 <HLCD_u8GotoXY+0xe>
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	39 f0       	breq	.+14     	; 0x1752 <HLCD_u8GotoXY+0x1a>
    1744:	0e c0       	rjmp	.+28     	; 0x1762 <HLCD_u8GotoXY+0x2a>
        {
        case LCD_u8LINE1: HLCD_vsendCommand(0x80+(copy_u8Location-1));break;
    1746:	8f e7       	ldi	r24, 0x7F	; 127
    1748:	86 0f       	add	r24, r22
    174a:	0e 94 b4 09 	call	0x1368	; 0x1368 <HLCD_vsendCommand>
                      copy_u8Location   --> choose cursor position from 1 to 40 
             return : Error state
        description : This Function change Cursor position between line1 and line2 
                      and 40 characters position 
    */
    u8 local_error = STD_Sucesses; 
    174e:	81 e0       	ldi	r24, 0x01	; 1

    if(copy_u8Location <= 40){
        switch (copy_u8LineNumber)
        {
        case LCD_u8LINE1: HLCD_vsendCommand(0x80+(copy_u8Location-1));break;
    1750:	08 95       	ret
        case LCD_u8LINE2: HLCD_vsendCommand(0xc0+(copy_u8Location-1));break;
    1752:	8f eb       	ldi	r24, 0xBF	; 191
    1754:	86 0f       	add	r24, r22
    1756:	0e 94 b4 09 	call	0x1368	; 0x1368 <HLCD_vsendCommand>
                      copy_u8Location   --> choose cursor position from 1 to 40 
             return : Error state
        description : This Function change Cursor position between line1 and line2 
                      and 40 characters position 
    */
    u8 local_error = STD_Sucesses; 
    175a:	81 e0       	ldi	r24, 0x01	; 1

    if(copy_u8Location <= 40){
        switch (copy_u8LineNumber)
        {
        case LCD_u8LINE1: HLCD_vsendCommand(0x80+(copy_u8Location-1));break;
        case LCD_u8LINE2: HLCD_vsendCommand(0xc0+(copy_u8Location-1));break;
    175c:	08 95       	ret
        default: local_error = STD_Error;
        }
    }
    else{
        local_error = STD_Error;
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	08 95       	ret
    if(copy_u8Location <= 40){
        switch (copy_u8LineNumber)
        {
        case LCD_u8LINE1: HLCD_vsendCommand(0x80+(copy_u8Location-1));break;
        case LCD_u8LINE2: HLCD_vsendCommand(0xc0+(copy_u8Location-1));break;
        default: local_error = STD_Error;
    1762:	80 e0       	ldi	r24, 0x00	; 0
    }
    else{
        local_error = STD_Error;
    }
    return local_error ; 
}
    1764:	08 95       	ret

Disassembly of section .text.vListInitialise:

000017de <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    17de:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    17e0:	03 96       	adiw	r24, 0x03	; 3
    17e2:	92 83       	std	Z+2, r25	; 0x02
    17e4:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    17e6:	2f ef       	ldi	r18, 0xFF	; 255
    17e8:	3f ef       	ldi	r19, 0xFF	; 255
    17ea:	34 83       	std	Z+4, r19	; 0x04
    17ec:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    17ee:	96 83       	std	Z+6, r25	; 0x06
    17f0:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    17f2:	90 87       	std	Z+8, r25	; 0x08
    17f4:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    17f6:	10 82       	st	Z, r1
    17f8:	08 95       	ret

Disassembly of section .text.vListInitialiseItem:

0000188a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    188a:	fc 01       	movw	r30, r24
    188c:	11 86       	std	Z+9, r1	; 0x09
    188e:	10 86       	std	Z+8, r1	; 0x08
    1890:	08 95       	ret

Disassembly of section .text.vListInsert:

00001436 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    143c:	48 81       	ld	r20, Y
    143e:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1440:	4f 3f       	cpi	r20, 0xFF	; 255
    1442:	2f ef       	ldi	r18, 0xFF	; 255
    1444:	52 07       	cpc	r21, r18
    1446:	21 f4       	brne	.+8      	; 0x1450 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1448:	fc 01       	movw	r30, r24
    144a:	a7 81       	ldd	r26, Z+7	; 0x07
    144c:	b0 85       	ldd	r27, Z+8	; 0x08
    144e:	0d c0       	rjmp	.+26     	; 0x146a <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1450:	dc 01       	movw	r26, r24
    1452:	13 96       	adiw	r26, 0x03	; 3
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <vListInsert+0x22>
    1456:	df 01       	movw	r26, r30
    1458:	12 96       	adiw	r26, 0x02	; 2
    145a:	ed 91       	ld	r30, X+
    145c:	fc 91       	ld	r31, X
    145e:	13 97       	sbiw	r26, 0x03	; 3
    1460:	20 81       	ld	r18, Z
    1462:	31 81       	ldd	r19, Z+1	; 0x01
    1464:	42 17       	cp	r20, r18
    1466:	53 07       	cpc	r21, r19
    1468:	b0 f7       	brcc	.-20     	; 0x1456 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    146a:	12 96       	adiw	r26, 0x02	; 2
    146c:	ed 91       	ld	r30, X+
    146e:	fc 91       	ld	r31, X
    1470:	13 97       	sbiw	r26, 0x03	; 3
    1472:	fb 83       	std	Y+3, r31	; 0x03
    1474:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1476:	d5 83       	std	Z+5, r29	; 0x05
    1478:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    147a:	bd 83       	std	Y+5, r27	; 0x05
    147c:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    147e:	13 96       	adiw	r26, 0x03	; 3
    1480:	dc 93       	st	X, r29
    1482:	ce 93       	st	-X, r28
    1484:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1486:	99 87       	std	Y+9, r25	; 0x09
    1488:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    148a:	fc 01       	movw	r30, r24
    148c:	20 81       	ld	r18, Z
    148e:	2f 5f       	subi	r18, 0xFF	; 255
    1490:	20 83       	st	Z, r18
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

Disassembly of section .text.uxListRemove:

00001554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    155a:	a0 85       	ldd	r26, Z+8	; 0x08
    155c:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    155e:	c2 81       	ldd	r28, Z+2	; 0x02
    1560:	d3 81       	ldd	r29, Z+3	; 0x03
    1562:	84 81       	ldd	r24, Z+4	; 0x04
    1564:	95 81       	ldd	r25, Z+5	; 0x05
    1566:	9d 83       	std	Y+5, r25	; 0x05
    1568:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    156a:	c4 81       	ldd	r28, Z+4	; 0x04
    156c:	d5 81       	ldd	r29, Z+5	; 0x05
    156e:	82 81       	ldd	r24, Z+2	; 0x02
    1570:	93 81       	ldd	r25, Z+3	; 0x03
    1572:	9b 83       	std	Y+3, r25	; 0x03
    1574:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	8d 91       	ld	r24, X+
    157a:	9c 91       	ld	r25, X
    157c:	12 97       	sbiw	r26, 0x02	; 2
    157e:	e8 17       	cp	r30, r24
    1580:	f9 07       	cpc	r31, r25
    1582:	31 f4       	brne	.+12     	; 0x1590 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1584:	84 81       	ldd	r24, Z+4	; 0x04
    1586:	95 81       	ldd	r25, Z+5	; 0x05
    1588:	12 96       	adiw	r26, 0x02	; 2
    158a:	9c 93       	st	X, r25
    158c:	8e 93       	st	-X, r24
    158e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1590:	11 86       	std	Z+9, r1	; 0x09
    1592:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    1594:	8c 91       	ld	r24, X
    1596:	81 50       	subi	r24, 0x01	; 1
    1598:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    159a:	8c 91       	ld	r24, X
}
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	08 95       	ret

Disassembly of section .text.Task1:

000017fa <Task1>:
void Task1(void *pvParameters) {
	    while (1) {
		    // Attempt to take the LCD semaphore
// 		    if (xSemaphoreTake(xLCDSemaphore, portMAX_DELAY) == pdTRUE) {
			    // Task 1 has exclusive access to LCD
				HLCD_u8GotoXY(0,0);
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	0e 94 9c 0b 	call	0x1738	; 0x1738 <HLCD_u8GotoXY>
			    HLCD_vShowString("Task 1");
    1802:	6e ea       	ldi	r22, 0xAE	; 174
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <HLCD_vShowString>
			    // Release the semaphore
// 			    xSemaphoreGive(xLCDSemaphore);
// 		    }

		    // Delay before next iteration
		    vTaskDelay(500 / portTICK_PERIOD_MS);
    180c:	84 ef       	ldi	r24, 0xF4	; 244
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	0e 94 b3 0b 	call	0x1766	; 0x1766 <vTaskDelay>
    1814:	f2 cf       	rjmp	.-28     	; 0x17fa <Task1>

Disassembly of section .text.Task2:

000016a0 <Task2>:
	    }
}

void Task2(void *pvParameters) {
 	    xSemaphoreGive(xLCDSemaphore);
    16a0:	00 e0       	ldi	r16, 0x00	; 0
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    16b0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    16b4:	0e 94 18 03 	call	0x630	; 0x630 <xQueueGenericSend>
	    while (1) {
		    // Attempt to take the LCD semaphore
// 		    if (xSemaphoreTake(xLCDSemaphore, portMAX_DELAY) == pdTRUE) {
			    // Task 1 has exclusive access to LCD
				HLCD_u8GotoXY(1,0);
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	0e 94 9c 0b 	call	0x1738	; 0x1738 <HLCD_u8GotoXY>
			    HLCD_vShowString("Task 2");
    16c0:	65 eb       	ldi	r22, 0xB5	; 181
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <HLCD_vShowString>
// 			    xSemaphoreGive(xLCDSemaphore);
// 		    }


		    // Delay before next iteration
		    vTaskDelay(500 / portTICK_PERIOD_MS);
    16ca:	84 ef       	ldi	r24, 0xF4	; 244
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	0e 94 b3 0b 	call	0x1766	; 0x1766 <vTaskDelay>
    16d2:	f2 cf       	rjmp	.-28     	; 0x16b8 <Task2+0x18>

Disassembly of section .text.main:

000013d0 <main>:
SemaphoreHandle_t xLCDSemaphore;

void Task1(void *pvParameters);
void Task2(void *pvParameters);

int main(void) {
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
	// Initialize LCD
	HLCD_vInit();
    13da:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <HLCD_vInit>

	// Create semaphore
	xLCDSemaphore = xSemaphoreCreateBinary();
    13de:	43 e0       	ldi	r20, 0x03	; 3
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	0e 94 54 08 	call	0x10a8	; 0x10a8 <xQueueGenericCreate>
    13e8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    13ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>


		// Create Task1
		xTaskCreate(Task1, "Task1", 100, NULL, 2, NULL);
    13f0:	c1 2c       	mov	r12, r1
    13f2:	d1 2c       	mov	r13, r1
    13f4:	68 94       	set
    13f6:	ee 24       	eor	r14, r14
    13f8:	e1 f8       	bld	r14, 1
    13fa:	00 e0       	ldi	r16, 0x00	; 0
    13fc:	10 e0       	ldi	r17, 0x00	; 0
    13fe:	24 e6       	ldi	r18, 0x64	; 100
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4c eb       	ldi	r20, 0xBC	; 188
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	8d ef       	ldi	r24, 0xFD	; 253
    140a:	9b e0       	ldi	r25, 0x0B	; 11
    140c:	0e 94 35 05 	call	0xa6a	; 0xa6a <xTaskCreate>
		
		// Create Task2
		xTaskCreate(Task2, "Task2", 100, NULL, 2, NULL);
    1410:	24 e6       	ldi	r18, 0x64	; 100
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	42 ec       	ldi	r20, 0xC2	; 194
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	80 e5       	ldi	r24, 0x50	; 80
    141c:	9b e0       	ldi	r25, 0x0B	; 11
    141e:	0e 94 35 05 	call	0xa6a	; 0xa6a <xTaskCreate>

		// Start scheduler
		vTaskStartScheduler();
    1422:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <vTaskStartScheduler>
	

	return 0;
}
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	cf 90       	pop	r12
    1434:	08 95       	ret

Disassembly of section .text.prvSetupTimerInterrupt:

0000185c <prvSetupTimerInterrupt>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
    185c:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
    185e:	89 ef       	ldi	r24, 0xF9	; 249
    1860:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    1862:	8b e0       	ldi	r24, 0x0B	; 11
    1864:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    1866:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1868:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
    186a:	89 bf       	out	0x39, r24	; 57
    186c:	08 95       	ret

Disassembly of section .text.pxPortInitialiseStack:

00000b48 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 b48:	31 e1       	ldi	r19, 0x11	; 17
 b4a:	fc 01       	movw	r30, r24
 b4c:	30 83       	st	Z, r19
 b4e:	31 97       	sbiw	r30, 0x01	; 1
 b50:	22 e2       	ldi	r18, 0x22	; 34
 b52:	20 83       	st	Z, r18
 b54:	31 97       	sbiw	r30, 0x01	; 1
 b56:	a3 e3       	ldi	r26, 0x33	; 51
 b58:	a0 83       	st	Z, r26
 b5a:	31 97       	sbiw	r30, 0x01	; 1
 b5c:	60 83       	st	Z, r22
 b5e:	31 97       	sbiw	r30, 0x01	; 1
 b60:	70 83       	st	Z, r23
 b62:	31 97       	sbiw	r30, 0x01	; 1
 b64:	10 82       	st	Z, r1
 b66:	31 97       	sbiw	r30, 0x01	; 1
 b68:	60 e8       	ldi	r22, 0x80	; 128
 b6a:	60 83       	st	Z, r22
 b6c:	31 97       	sbiw	r30, 0x01	; 1
 b6e:	10 82       	st	Z, r1
 b70:	31 97       	sbiw	r30, 0x01	; 1
 b72:	62 e0       	ldi	r22, 0x02	; 2
 b74:	60 83       	st	Z, r22
 b76:	31 97       	sbiw	r30, 0x01	; 1
 b78:	63 e0       	ldi	r22, 0x03	; 3
 b7a:	60 83       	st	Z, r22
 b7c:	31 97       	sbiw	r30, 0x01	; 1
 b7e:	64 e0       	ldi	r22, 0x04	; 4
 b80:	60 83       	st	Z, r22
 b82:	31 97       	sbiw	r30, 0x01	; 1
 b84:	65 e0       	ldi	r22, 0x05	; 5
 b86:	60 83       	st	Z, r22
 b88:	31 97       	sbiw	r30, 0x01	; 1
 b8a:	66 e0       	ldi	r22, 0x06	; 6
 b8c:	60 83       	st	Z, r22
 b8e:	31 97       	sbiw	r30, 0x01	; 1
 b90:	67 e0       	ldi	r22, 0x07	; 7
 b92:	60 83       	st	Z, r22
 b94:	31 97       	sbiw	r30, 0x01	; 1
 b96:	68 e0       	ldi	r22, 0x08	; 8
 b98:	60 83       	st	Z, r22
 b9a:	31 97       	sbiw	r30, 0x01	; 1
 b9c:	69 e0       	ldi	r22, 0x09	; 9
 b9e:	60 83       	st	Z, r22
 ba0:	31 97       	sbiw	r30, 0x01	; 1
 ba2:	60 e1       	ldi	r22, 0x10	; 16
 ba4:	60 83       	st	Z, r22
 ba6:	31 97       	sbiw	r30, 0x01	; 1
 ba8:	30 83       	st	Z, r19
 baa:	31 97       	sbiw	r30, 0x01	; 1
 bac:	32 e1       	ldi	r19, 0x12	; 18
 bae:	30 83       	st	Z, r19
 bb0:	31 97       	sbiw	r30, 0x01	; 1
 bb2:	33 e1       	ldi	r19, 0x13	; 19
 bb4:	30 83       	st	Z, r19
 bb6:	31 97       	sbiw	r30, 0x01	; 1
 bb8:	34 e1       	ldi	r19, 0x14	; 20
 bba:	30 83       	st	Z, r19
 bbc:	31 97       	sbiw	r30, 0x01	; 1
 bbe:	35 e1       	ldi	r19, 0x15	; 21
 bc0:	30 83       	st	Z, r19
 bc2:	31 97       	sbiw	r30, 0x01	; 1
 bc4:	36 e1       	ldi	r19, 0x16	; 22
 bc6:	30 83       	st	Z, r19
 bc8:	31 97       	sbiw	r30, 0x01	; 1
 bca:	37 e1       	ldi	r19, 0x17	; 23
 bcc:	30 83       	st	Z, r19
 bce:	31 97       	sbiw	r30, 0x01	; 1
 bd0:	38 e1       	ldi	r19, 0x18	; 24
 bd2:	30 83       	st	Z, r19
 bd4:	31 97       	sbiw	r30, 0x01	; 1
 bd6:	39 e1       	ldi	r19, 0x19	; 25
 bd8:	30 83       	st	Z, r19
 bda:	31 97       	sbiw	r30, 0x01	; 1
 bdc:	30 e2       	ldi	r19, 0x20	; 32
 bde:	30 83       	st	Z, r19
 be0:	31 97       	sbiw	r30, 0x01	; 1
 be2:	31 e2       	ldi	r19, 0x21	; 33
 be4:	30 83       	st	Z, r19
 be6:	31 97       	sbiw	r30, 0x01	; 1
 be8:	20 83       	st	Z, r18
 bea:	31 97       	sbiw	r30, 0x01	; 1
 bec:	23 e2       	ldi	r18, 0x23	; 35
 bee:	20 83       	st	Z, r18
 bf0:	31 97       	sbiw	r30, 0x01	; 1
 bf2:	40 83       	st	Z, r20
 bf4:	31 97       	sbiw	r30, 0x01	; 1
 bf6:	50 83       	st	Z, r21
 bf8:	31 97       	sbiw	r30, 0x01	; 1
 bfa:	26 e2       	ldi	r18, 0x26	; 38
 bfc:	20 83       	st	Z, r18
 bfe:	31 97       	sbiw	r30, 0x01	; 1
 c00:	27 e2       	ldi	r18, 0x27	; 39
 c02:	20 83       	st	Z, r18
 c04:	31 97       	sbiw	r30, 0x01	; 1
 c06:	28 e2       	ldi	r18, 0x28	; 40
 c08:	20 83       	st	Z, r18
 c0a:	31 97       	sbiw	r30, 0x01	; 1
 c0c:	29 e2       	ldi	r18, 0x29	; 41
 c0e:	20 83       	st	Z, r18
 c10:	31 97       	sbiw	r30, 0x01	; 1
 c12:	20 e3       	ldi	r18, 0x30	; 48
 c14:	20 83       	st	Z, r18
 c16:	31 97       	sbiw	r30, 0x01	; 1
 c18:	21 e3       	ldi	r18, 0x31	; 49
 c1a:	20 83       	st	Z, r18
 c1c:	86 97       	sbiw	r24, 0x26	; 38
 c1e:	08 95       	ret

Disassembly of section .text.xPortStartScheduler:

00001498 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    1498:	0e 94 2e 0c 	call	0x185c	; 0x185c <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    149c:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
    14a0:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
    14a4:	cd 91       	ld	r28, X+
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	dd 91       	ld	r29, X+
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	ff 91       	pop	r31
    14ae:	ef 91       	pop	r30
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	bf 91       	pop	r27
    14b6:	af 91       	pop	r26
    14b8:	9f 91       	pop	r25
    14ba:	8f 91       	pop	r24
    14bc:	7f 91       	pop	r23
    14be:	6f 91       	pop	r22
    14c0:	5f 91       	pop	r21
    14c2:	4f 91       	pop	r20
    14c4:	3f 91       	pop	r19
    14c6:	2f 91       	pop	r18
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	bf 90       	pop	r11
    14d6:	af 90       	pop	r10
    14d8:	9f 90       	pop	r9
    14da:	8f 90       	pop	r8
    14dc:	7f 90       	pop	r7
    14de:	6f 90       	pop	r6
    14e0:	5f 90       	pop	r5
    14e2:	4f 90       	pop	r4
    14e4:	3f 90       	pop	r3
    14e6:	2f 90       	pop	r2
    14e8:	1f 90       	pop	r1
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    14f0:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	08 95       	ret

Disassembly of section .text.vPortYield:

00000d9a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 d9a:	0f 92       	push	r0
 d9c:	0f b6       	in	r0, 0x3f	; 63
 d9e:	f8 94       	cli
 da0:	0f 92       	push	r0
 da2:	1f 92       	push	r1
 da4:	11 24       	eor	r1, r1
 da6:	2f 92       	push	r2
 da8:	3f 92       	push	r3
 daa:	4f 92       	push	r4
 dac:	5f 92       	push	r5
 dae:	6f 92       	push	r6
 db0:	7f 92       	push	r7
 db2:	8f 92       	push	r8
 db4:	9f 92       	push	r9
 db6:	af 92       	push	r10
 db8:	bf 92       	push	r11
 dba:	cf 92       	push	r12
 dbc:	df 92       	push	r13
 dbe:	ef 92       	push	r14
 dc0:	ff 92       	push	r15
 dc2:	0f 93       	push	r16
 dc4:	1f 93       	push	r17
 dc6:	2f 93       	push	r18
 dc8:	3f 93       	push	r19
 dca:	4f 93       	push	r20
 dcc:	5f 93       	push	r21
 dce:	6f 93       	push	r22
 dd0:	7f 93       	push	r23
 dd2:	8f 93       	push	r24
 dd4:	9f 93       	push	r25
 dd6:	af 93       	push	r26
 dd8:	bf 93       	push	r27
 dda:	cf 93       	push	r28
 ddc:	df 93       	push	r29
 dde:	ef 93       	push	r30
 de0:	ff 93       	push	r31
 de2:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 de6:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 dea:	0d b6       	in	r0, 0x3d	; 61
 dec:	0d 92       	st	X+, r0
 dee:	0e b6       	in	r0, 0x3e	; 62
 df0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 df2:	0e 94 26 07 	call	0xe4c	; 0xe4c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 df6:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 dfa:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 dfe:	cd 91       	ld	r28, X+
 e00:	cd bf       	out	0x3d, r28	; 61
 e02:	dd 91       	ld	r29, X+
 e04:	de bf       	out	0x3e, r29	; 62
 e06:	ff 91       	pop	r31
 e08:	ef 91       	pop	r30
 e0a:	df 91       	pop	r29
 e0c:	cf 91       	pop	r28
 e0e:	bf 91       	pop	r27
 e10:	af 91       	pop	r26
 e12:	9f 91       	pop	r25
 e14:	8f 91       	pop	r24
 e16:	7f 91       	pop	r23
 e18:	6f 91       	pop	r22
 e1a:	5f 91       	pop	r21
 e1c:	4f 91       	pop	r20
 e1e:	3f 91       	pop	r19
 e20:	2f 91       	pop	r18
 e22:	1f 91       	pop	r17
 e24:	0f 91       	pop	r16
 e26:	ff 90       	pop	r15
 e28:	ef 90       	pop	r14
 e2a:	df 90       	pop	r13
 e2c:	cf 90       	pop	r12
 e2e:	bf 90       	pop	r11
 e30:	af 90       	pop	r10
 e32:	9f 90       	pop	r9
 e34:	8f 90       	pop	r8
 e36:	7f 90       	pop	r7
 e38:	6f 90       	pop	r6
 e3a:	5f 90       	pop	r5
 e3c:	4f 90       	pop	r4
 e3e:	3f 90       	pop	r3
 e40:	2f 90       	pop	r2
 e42:	1f 90       	pop	r1
 e44:	0f 90       	pop	r0
 e46:	0f be       	out	0x3f, r0	; 63
 e48:	0f 90       	pop	r0

	asm volatile ( "ret" );
 e4a:	08 95       	ret

Disassembly of section .text.vPortYieldFromTick:

00000ce2 <vPortYieldFromTick>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 ce2:	0f 92       	push	r0
 ce4:	0f b6       	in	r0, 0x3f	; 63
 ce6:	f8 94       	cli
 ce8:	0f 92       	push	r0
 cea:	1f 92       	push	r1
 cec:	11 24       	eor	r1, r1
 cee:	2f 92       	push	r2
 cf0:	3f 92       	push	r3
 cf2:	4f 92       	push	r4
 cf4:	5f 92       	push	r5
 cf6:	6f 92       	push	r6
 cf8:	7f 92       	push	r7
 cfa:	8f 92       	push	r8
 cfc:	9f 92       	push	r9
 cfe:	af 92       	push	r10
 d00:	bf 92       	push	r11
 d02:	cf 92       	push	r12
 d04:	df 92       	push	r13
 d06:	ef 92       	push	r14
 d08:	ff 92       	push	r15
 d0a:	0f 93       	push	r16
 d0c:	1f 93       	push	r17
 d0e:	2f 93       	push	r18
 d10:	3f 93       	push	r19
 d12:	4f 93       	push	r20
 d14:	5f 93       	push	r21
 d16:	6f 93       	push	r22
 d18:	7f 93       	push	r23
 d1a:	8f 93       	push	r24
 d1c:	9f 93       	push	r25
 d1e:	af 93       	push	r26
 d20:	bf 93       	push	r27
 d22:	cf 93       	push	r28
 d24:	df 93       	push	r29
 d26:	ef 93       	push	r30
 d28:	ff 93       	push	r31
 d2a:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 d2e:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 d32:	0d b6       	in	r0, 0x3d	; 61
 d34:	0d 92       	st	X+, r0
 d36:	0e b6       	in	r0, 0x3e	; 62
 d38:	0d 92       	st	X+, r0
 d3a:	0e 94 67 00 	call	0xce	; 0xce <xTaskIncrementTick>
 d3e:	81 11       	cpse	r24, r1
 d40:	0e 94 26 07 	call	0xe4c	; 0xe4c <vTaskSwitchContext>
 d44:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 d48:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 d4c:	cd 91       	ld	r28, X+
 d4e:	cd bf       	out	0x3d, r28	; 61
 d50:	dd 91       	ld	r29, X+
 d52:	de bf       	out	0x3e, r29	; 62
 d54:	ff 91       	pop	r31
 d56:	ef 91       	pop	r30
 d58:	df 91       	pop	r29
 d5a:	cf 91       	pop	r28
 d5c:	bf 91       	pop	r27
 d5e:	af 91       	pop	r26
 d60:	9f 91       	pop	r25
 d62:	8f 91       	pop	r24
 d64:	7f 91       	pop	r23
 d66:	6f 91       	pop	r22
 d68:	5f 91       	pop	r21
 d6a:	4f 91       	pop	r20
 d6c:	3f 91       	pop	r19
 d6e:	2f 91       	pop	r18
 d70:	1f 91       	pop	r17
 d72:	0f 91       	pop	r16
 d74:	ff 90       	pop	r15
 d76:	ef 90       	pop	r14
 d78:	df 90       	pop	r13
 d7a:	cf 90       	pop	r12
 d7c:	bf 90       	pop	r11
 d7e:	af 90       	pop	r10
 d80:	9f 90       	pop	r9
 d82:	8f 90       	pop	r8
 d84:	7f 90       	pop	r7
 d86:	6f 90       	pop	r6
 d88:	5f 90       	pop	r5
 d8a:	4f 90       	pop	r4
 d8c:	3f 90       	pop	r3
 d8e:	2f 90       	pop	r2
 d90:	1f 90       	pop	r1
 d92:	0f 90       	pop	r0
 d94:	0f be       	out	0x3f, r0	; 63
 d96:	0f 90       	pop	r0
 d98:	08 95       	ret

Disassembly of section .text.__vector_7:

0000189a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    189a:	0e 94 71 06 	call	0xce2	; 0xce2 <vPortYieldFromTick>
		asm volatile ( "reti" );
    189e:	18 95       	reti

Disassembly of section .text.prvIsQueueFull:

00001630 <prvIsQueueFull>:

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1636:	9b 01       	movw	r18, r22
    1638:	48 2f       	mov	r20, r24
    163a:	26 5e       	subi	r18, 0xE6	; 230
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	4f 4f       	sbci	r20, 0xFF	; 255
    1640:	f9 01       	movw	r30, r18
    1642:	24 91       	lpm	r18, Z
    1644:	47 fd       	sbrc	r20, 7
    1646:	20 81       	ld	r18, Z
    1648:	a8 2f       	mov	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	4b 96       	adiw	r24, 0x1b	; 27
    164e:	a1 1d       	adc	r26, r1
    1650:	fc 01       	movw	r30, r24
    1652:	84 91       	lpm	r24, Z
    1654:	a7 fd       	sbrc	r26, 7
    1656:	80 81       	ld	r24, Z
    1658:	28 13       	cpse	r18, r24
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <prvIsQueueFull+0x30>
        {
            xReturn = pdTRUE;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <prvIsQueueFull+0x32>
        }
        else
        {
            xReturn = pdFALSE;
    1660:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    taskEXIT_CRITICAL();
    1662:	0f 90       	pop	r0
    1664:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    1666:	08 95       	ret

Disassembly of section .text.prvCopyDataToQueue:

00000f8c <prvCopyDataToQueue>:
        }
    }
    taskEXIT_CRITICAL();

    return xReturn;
}
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	ec 01       	movw	r28, r24
     f96:	02 2f       	mov	r16, r18
     f98:	1a 8d       	ldd	r17, Y+26	; 0x1a
     f9a:	2c 8d       	ldd	r18, Y+28	; 0x1c
     f9c:	22 23       	and	r18, r18
     f9e:	b9 f1       	breq	.+110    	; 0x100e <prvCopyDataToQueue+0x82>
     fa0:	01 11       	cpse	r16, r1
     fa2:	16 c0       	rjmp	.+44     	; 0xfd0 <prvCopyDataToQueue+0x44>
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	0e 94 83 0b 	call	0x1706	; 0x1706 <memcpy>
     fae:	2c 8d       	ldd	r18, Y+28	; 0x1c
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	9b 81       	ldd	r25, Y+3	; 0x03
     fb4:	82 0f       	add	r24, r18
     fb6:	91 1d       	adc	r25, r1
     fb8:	9b 83       	std	Y+3, r25	; 0x03
     fba:	8a 83       	std	Y+2, r24	; 0x02
     fbc:	2c 81       	ldd	r18, Y+4	; 0x04
     fbe:	3d 81       	ldd	r19, Y+5	; 0x05
     fc0:	82 17       	cp	r24, r18
     fc2:	93 07       	cpc	r25, r19
     fc4:	20 f1       	brcs	.+72     	; 0x100e <prvCopyDataToQueue+0x82>
     fc6:	88 81       	ld	r24, Y
     fc8:	99 81       	ldd	r25, Y+1	; 0x01
     fca:	9b 83       	std	Y+3, r25	; 0x03
     fcc:	8a 83       	std	Y+2, r24	; 0x02
     fce:	1f c0       	rjmp	.+62     	; 0x100e <prvCopyDataToQueue+0x82>
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	8e 81       	ldd	r24, Y+6	; 0x06
     fd4:	9f 81       	ldd	r25, Y+7	; 0x07
     fd6:	0e 94 83 0b 	call	0x1706	; 0x1706 <memcpy>
     fda:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	91 95       	neg	r25
     fe0:	81 95       	neg	r24
     fe2:	91 09       	sbc	r25, r1
     fe4:	2e 81       	ldd	r18, Y+6	; 0x06
     fe6:	3f 81       	ldd	r19, Y+7	; 0x07
     fe8:	28 0f       	add	r18, r24
     fea:	39 1f       	adc	r19, r25
     fec:	3f 83       	std	Y+7, r19	; 0x07
     fee:	2e 83       	std	Y+6, r18	; 0x06
     ff0:	48 81       	ld	r20, Y
     ff2:	59 81       	ldd	r21, Y+1	; 0x01
     ff4:	24 17       	cp	r18, r20
     ff6:	35 07       	cpc	r19, r21
     ff8:	30 f4       	brcc	.+12     	; 0x1006 <prvCopyDataToQueue+0x7a>
     ffa:	2c 81       	ldd	r18, Y+4	; 0x04
     ffc:	3d 81       	ldd	r19, Y+5	; 0x05
     ffe:	82 0f       	add	r24, r18
    1000:	93 1f       	adc	r25, r19
    1002:	9f 83       	std	Y+7, r25	; 0x07
    1004:	8e 83       	std	Y+6, r24	; 0x06
    1006:	02 30       	cpi	r16, 0x02	; 2
    1008:	11 f4       	brne	.+4      	; 0x100e <prvCopyDataToQueue+0x82>
    100a:	11 11       	cpse	r17, r1
    100c:	11 50       	subi	r17, 0x01	; 1
    100e:	1f 5f       	subi	r17, 0xFF	; 255
    1010:	1a 8f       	std	Y+26, r17	; 0x1a
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	08 95       	ret

Disassembly of section .text.prvNotifyQueueSetContainer:

00000ef4 <prvNotifyQueueSetContainer>:
 ef4:	ef 92       	push	r14
 ef6:	ff 92       	push	r15
 ef8:	0f 93       	push	r16
 efa:	1f 93       	push	r17
 efc:	cf 93       	push	r28
 efe:	df 93       	push	r29
 f00:	00 d0       	rcall	.+0      	; 0xf02 <prvNotifyQueueSetContainer+0xe>
 f02:	0f 92       	push	r0
 f04:	cd b7       	in	r28, 0x3d	; 61
 f06:	de b7       	in	r29, 0x3e	; 62
 f08:	69 83       	std	Y+1, r22	; 0x01
 f0a:	7a 83       	std	Y+2, r23	; 0x02
 f0c:	8b 83       	std	Y+3, r24	; 0x03
 f0e:	a8 2f       	mov	r26, r24
 f10:	cb 01       	movw	r24, r22
 f12:	4f 96       	adiw	r24, 0x1f	; 31
 f14:	a1 1d       	adc	r26, r1
 f16:	fc 01       	movw	r30, r24
 f18:	5a 2f       	mov	r21, r26
 f1a:	0e 94 37 0c 	call	0x186e	; 0x186e <__xload_2>
 f1e:	fb 01       	movw	r30, r22
 f20:	92 8d       	ldd	r25, Z+26	; 0x1a
 f22:	83 8d       	ldd	r24, Z+27	; 0x1b
 f24:	98 17       	cp	r25, r24
 f26:	18 f5       	brcc	.+70     	; 0xf6e <prvNotifyQueueSetContainer+0x7a>
 f28:	8b 01       	movw	r16, r22
 f2a:	e6 8c       	ldd	r14, Z+30	; 0x1e
 f2c:	ae 01       	movw	r20, r28
 f2e:	4f 5f       	subi	r20, 0xFF	; 255
 f30:	5f 4f       	sbci	r21, 0xFF	; 255
 f32:	60 e8       	ldi	r22, 0x80	; 128
 f34:	20 e0       	ldi	r18, 0x00	; 0
 f36:	cf 01       	movw	r24, r30
 f38:	0e 94 c6 07 	call	0xf8c	; 0xf8c <prvCopyDataToQueue>
 f3c:	f8 2e       	mov	r15, r24
 f3e:	ff ef       	ldi	r31, 0xFF	; 255
 f40:	ef 12       	cpse	r14, r31
 f42:	0d c0       	rjmp	.+26     	; 0xf5e <prvNotifyQueueSetContainer+0x6a>
 f44:	f8 01       	movw	r30, r16
 f46:	81 89       	ldd	r24, Z+17	; 0x11
 f48:	88 23       	and	r24, r24
 f4a:	a9 f0       	breq	.+42     	; 0xf76 <prvNotifyQueueSetContainer+0x82>
 f4c:	b8 01       	movw	r22, r16
 f4e:	6f 5e       	subi	r22, 0xEF	; 239
 f50:	7f 4f       	sbci	r23, 0xFF	; 255
 f52:	80 e8       	ldi	r24, 0x80	; 128
 f54:	0e 94 56 02 	call	0x4ac	; 0x4ac <xTaskRemoveFromEventList>
 f58:	81 11       	cpse	r24, r1
 f5a:	0b c0       	rjmp	.+22     	; 0xf72 <prvNotifyQueueSetContainer+0x7e>
 f5c:	0c c0       	rjmp	.+24     	; 0xf76 <prvNotifyQueueSetContainer+0x82>
 f5e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <uxTaskGetNumberOfTasks>
 f62:	e8 16       	cp	r14, r24
 f64:	40 f4       	brcc	.+16     	; 0xf76 <prvNotifyQueueSetContainer+0x82>
 f66:	e3 94       	inc	r14
 f68:	f8 01       	movw	r30, r16
 f6a:	e6 8e       	std	Z+30, r14	; 0x1e
 f6c:	04 c0       	rjmp	.+8      	; 0xf76 <prvNotifyQueueSetContainer+0x82>
 f6e:	f1 2c       	mov	r15, r1
 f70:	02 c0       	rjmp	.+4      	; 0xf76 <prvNotifyQueueSetContainer+0x82>
 f72:	ff 24       	eor	r15, r15
 f74:	f3 94       	inc	r15
 f76:	8f 2d       	mov	r24, r15
 f78:	0f 90       	pop	r0
 f7a:	0f 90       	pop	r0
 f7c:	0f 90       	pop	r0
 f7e:	df 91       	pop	r29
 f80:	cf 91       	pop	r28
 f82:	1f 91       	pop	r17
 f84:	0f 91       	pop	r16
 f86:	ff 90       	pop	r15
 f88:	ef 90       	pop	r14
 f8a:	08 95       	ret

Disassembly of section .text.prvUnlockQueue:

0000101e <prvUnlockQueue>:
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	ec 01       	movw	r28, r24
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	0f 92       	push	r0
    102c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    102e:	1a c0       	rjmp	.+52     	; 0x1064 <prvUnlockQueue+0x46>
    1030:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1032:	98 a1       	ldd	r25, Y+32	; 0x20
    1034:	89 2b       	or	r24, r25
    1036:	49 f0       	breq	.+18     	; 0x104a <prvUnlockQueue+0x2c>
    1038:	be 01       	movw	r22, r28
    103a:	80 e8       	ldi	r24, 0x80	; 128
    103c:	0e 94 7a 07 	call	0xef4	; 0xef4 <prvNotifyQueueSetContainer>
    1040:	88 23       	and	r24, r24
    1042:	79 f0       	breq	.+30     	; 0x1062 <prvUnlockQueue+0x44>
    1044:	0e 94 49 0c 	call	0x1892	; 0x1892 <vTaskMissedYield>
    1048:	0c c0       	rjmp	.+24     	; 0x1062 <prvUnlockQueue+0x44>
    104a:	89 89       	ldd	r24, Y+17	; 0x11
    104c:	88 23       	and	r24, r24
    104e:	61 f0       	breq	.+24     	; 0x1068 <prvUnlockQueue+0x4a>
    1050:	be 01       	movw	r22, r28
    1052:	6f 5e       	subi	r22, 0xEF	; 239
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	80 e8       	ldi	r24, 0x80	; 128
    1058:	0e 94 56 02 	call	0x4ac	; 0x4ac <xTaskRemoveFromEventList>
    105c:	81 11       	cpse	r24, r1
    105e:	0e 94 49 0c 	call	0x1892	; 0x1892 <vTaskMissedYield>
    1062:	11 50       	subi	r17, 0x01	; 1
    1064:	11 16       	cp	r1, r17
    1066:	24 f3       	brlt	.-56     	; 0x1030 <prvUnlockQueue+0x12>
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	0f 92       	push	r0
    1076:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1078:	0d c0       	rjmp	.+26     	; 0x1094 <prvUnlockQueue+0x76>
    107a:	88 85       	ldd	r24, Y+8	; 0x08
    107c:	88 23       	and	r24, r24
    107e:	61 f0       	breq	.+24     	; 0x1098 <prvUnlockQueue+0x7a>
    1080:	be 01       	movw	r22, r28
    1082:	68 5f       	subi	r22, 0xF8	; 248
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	80 e8       	ldi	r24, 0x80	; 128
    1088:	0e 94 56 02 	call	0x4ac	; 0x4ac <xTaskRemoveFromEventList>
    108c:	81 11       	cpse	r24, r1
    108e:	0e 94 49 0c 	call	0x1892	; 0x1892 <vTaskMissedYield>
    1092:	11 50       	subi	r17, 0x01	; 1
    1094:	11 16       	cp	r1, r17
    1096:	8c f3       	brlt	.-30     	; 0x107a <prvUnlockQueue+0x5c>
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	8d 8f       	std	Y+29, r24	; 0x1d
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	1f 91       	pop	r17
    10a6:	08 95       	ret

Disassembly of section .text.xQueueGenericReset:

00000c20 <xQueueGenericReset>:
 c20:	0f 93       	push	r16
 c22:	1f 93       	push	r17
 c24:	cf 93       	push	r28
 c26:	df 93       	push	r29
 c28:	fc 01       	movw	r30, r24
 c2a:	36 2f       	mov	r19, r22
 c2c:	89 2b       	or	r24, r25
 c2e:	09 f4       	brne	.+2      	; 0xc32 <xQueueGenericReset+0x12>
 c30:	4e c0       	rjmp	.+156    	; 0xcce <xQueueGenericReset+0xae>
 c32:	23 8d       	ldd	r18, Z+27	; 0x1b
 c34:	22 23       	and	r18, r18
 c36:	09 f4       	brne	.+2      	; 0xc3a <xQueueGenericReset+0x1a>
 c38:	4c c0       	rjmp	.+152    	; 0xcd2 <xQueueGenericReset+0xb2>
 c3a:	02 2f       	mov	r16, r18
 c3c:	10 e0       	ldi	r17, 0x00	; 0
 c3e:	8f ef       	ldi	r24, 0xFF	; 255
 c40:	9f ef       	ldi	r25, 0xFF	; 255
 c42:	b8 01       	movw	r22, r16
 c44:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__udivmodhi4>
 c48:	44 8d       	ldd	r20, Z+28	; 0x1c
 c4a:	84 2f       	mov	r24, r20
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	68 17       	cp	r22, r24
 c50:	79 07       	cpc	r23, r25
 c52:	08 f4       	brcc	.+2      	; 0xc56 <xQueueGenericReset+0x36>
 c54:	40 c0       	rjmp	.+128    	; 0xcd6 <xQueueGenericReset+0xb6>
 c56:	ef 01       	movw	r28, r30
 c58:	0f b6       	in	r0, 0x3f	; 63
 c5a:	f8 94       	cli
 c5c:	0f 92       	push	r0
 c5e:	60 81       	ld	r22, Z
 c60:	71 81       	ldd	r23, Z+1	; 0x01
 c62:	fb 01       	movw	r30, r22
 c64:	24 9f       	mul	r18, r20
 c66:	e0 0d       	add	r30, r0
 c68:	f1 1d       	adc	r31, r1
 c6a:	11 24       	eor	r1, r1
 c6c:	fd 83       	std	Y+5, r31	; 0x05
 c6e:	ec 83       	std	Y+4, r30	; 0x04
 c70:	1a 8e       	std	Y+26, r1	; 0x1a
 c72:	7b 83       	std	Y+3, r23	; 0x03
 c74:	6a 83       	std	Y+2, r22	; 0x02
 c76:	01 50       	subi	r16, 0x01	; 1
 c78:	11 09       	sbc	r17, r1
 c7a:	80 9f       	mul	r24, r16
 c7c:	a0 01       	movw	r20, r0
 c7e:	81 9f       	mul	r24, r17
 c80:	50 0d       	add	r21, r0
 c82:	90 9f       	mul	r25, r16
 c84:	50 0d       	add	r21, r0
 c86:	11 24       	eor	r1, r1
 c88:	cb 01       	movw	r24, r22
 c8a:	84 0f       	add	r24, r20
 c8c:	95 1f       	adc	r25, r21
 c8e:	9f 83       	std	Y+7, r25	; 0x07
 c90:	8e 83       	std	Y+6, r24	; 0x06
 c92:	8f ef       	ldi	r24, 0xFF	; 255
 c94:	8d 8f       	std	Y+29, r24	; 0x1d
 c96:	8e 8f       	std	Y+30, r24	; 0x1e
 c98:	31 11       	cpse	r19, r1
 c9a:	0d c0       	rjmp	.+26     	; 0xcb6 <xQueueGenericReset+0x96>
 c9c:	88 85       	ldd	r24, Y+8	; 0x08
 c9e:	88 23       	and	r24, r24
 ca0:	91 f0       	breq	.+36     	; 0xcc6 <xQueueGenericReset+0xa6>
 ca2:	28 96       	adiw	r28, 0x08	; 8
 ca4:	be 01       	movw	r22, r28
 ca6:	80 e8       	ldi	r24, 0x80	; 128
 ca8:	0e 94 56 02 	call	0x4ac	; 0x4ac <xTaskRemoveFromEventList>
 cac:	88 23       	and	r24, r24
 cae:	59 f0       	breq	.+22     	; 0xcc6 <xQueueGenericReset+0xa6>
 cb0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vPortYield>
 cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <xQueueGenericReset+0xa6>
 cb6:	ce 01       	movw	r24, r28
 cb8:	08 96       	adiw	r24, 0x08	; 8
 cba:	0e 94 ef 0b 	call	0x17de	; 0x17de <vListInitialise>
 cbe:	ce 01       	movw	r24, r28
 cc0:	41 96       	adiw	r24, 0x11	; 17
 cc2:	0e 94 ef 0b 	call	0x17de	; 0x17de <vListInitialise>
 cc6:	0f 90       	pop	r0
 cc8:	0f be       	out	0x3f, r0	; 63
 cca:	81 e0       	ldi	r24, 0x01	; 1
 ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <xQueueGenericReset+0xb8>
 cce:	80 e0       	ldi	r24, 0x00	; 0
 cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <xQueueGenericReset+0xb8>
 cd2:	80 e0       	ldi	r24, 0x00	; 0
 cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <xQueueGenericReset+0xb8>
 cd6:	80 e0       	ldi	r24, 0x00	; 0
 cd8:	df 91       	pop	r29
 cda:	cf 91       	pop	r28
 cdc:	1f 91       	pop	r17
 cde:	0f 91       	pop	r16
 ce0:	08 95       	ret

Disassembly of section .text.prvInitialiseNewQueue:

000016d4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	e8 01       	movw	r28, r16
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
    16de:	61 11       	cpse	r22, r1
    16e0:	03 c0       	rjmp	.+6      	; 0x16e8 <prvInitialiseNewQueue+0x14>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    16e2:	19 83       	std	Y+1, r17	; 0x01
    16e4:	08 83       	st	Y, r16
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <prvInitialiseNewQueue+0x18>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    16e8:	59 83       	std	Y+1, r21	; 0x01
    16ea:	48 83       	st	Y, r20
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
    16ec:	8b 8f       	std	Y+27, r24	; 0x1b
    pxNewQueue->uxItemSize = uxItemSize;
    16ee:	6c 8f       	std	Y+28, r22	; 0x1c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	ce 01       	movw	r24, r28
    16f4:	0e 94 10 06 	call	0xc20	; 0xc20 <xQueueGenericReset>
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    16f8:	18 a2       	std	Y+32, r1	; 0x20
    16fa:	1f 8e       	std	Y+31, r1	; 0x1f
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	08 95       	ret

Disassembly of section .text.xQueueGenericCreate:

000010a8 <xQueueGenericCreate>:
        }
    }
    taskEXIT_CRITICAL();

    return xReturn;
}
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	38 2f       	mov	r19, r24
    10b8:	e6 2f       	mov	r30, r22
    10ba:	88 23       	and	r24, r24
    10bc:	29 f1       	breq	.+74     	; 0x1108 <xQueueGenericCreate+0x60>
    10be:	68 2f       	mov	r22, r24
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__udivmodhi4>
    10ca:	8e 2f       	mov	r24, r30
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	68 17       	cp	r22, r24
    10d0:	79 07       	cpc	r23, r25
    10d2:	e8 f0       	brcs	.+58     	; 0x110e <xQueueGenericCreate+0x66>
    10d4:	3e 9f       	mul	r19, r30
    10d6:	c0 01       	movw	r24, r0
    10d8:	11 24       	eor	r1, r1
    10da:	8f 3d       	cpi	r24, 0xDF	; 223
    10dc:	2f ef       	ldi	r18, 0xFF	; 255
    10de:	92 07       	cpc	r25, r18
    10e0:	c8 f4       	brcc	.+50     	; 0x1114 <xQueueGenericCreate+0x6c>
    10e2:	d4 2e       	mov	r13, r20
    10e4:	de 2f       	mov	r29, r30
    10e6:	c3 2f       	mov	r28, r19
    10e8:	81 96       	adiw	r24, 0x21	; 33
    10ea:	0e 94 0f 09 	call	0x121e	; 0x121e <pvPortMalloc>
    10ee:	7c 01       	movw	r14, r24
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	91 f0       	breq	.+36     	; 0x1118 <xQueueGenericCreate+0x70>
    10f4:	8c 01       	movw	r16, r24
    10f6:	2d 2d       	mov	r18, r13
    10f8:	ac 01       	movw	r20, r24
    10fa:	4f 5d       	subi	r20, 0xDF	; 223
    10fc:	5f 4f       	sbci	r21, 0xFF	; 255
    10fe:	6d 2f       	mov	r22, r29
    1100:	8c 2f       	mov	r24, r28
    1102:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <prvInitialiseNewQueue>
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <xQueueGenericCreate+0x70>
    1108:	e1 2c       	mov	r14, r1
    110a:	f1 2c       	mov	r15, r1
    110c:	05 c0       	rjmp	.+10     	; 0x1118 <xQueueGenericCreate+0x70>
    110e:	e1 2c       	mov	r14, r1
    1110:	f1 2c       	mov	r15, r1
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <xQueueGenericCreate+0x70>
    1114:	e1 2c       	mov	r14, r1
    1116:	f1 2c       	mov	r15, r1
    1118:	c7 01       	movw	r24, r14
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	08 95       	ret

Disassembly of section .text.xQueueGenericSend:

00000630 <xQueueGenericSend>:
 630:	6f 92       	push	r6
 632:	7f 92       	push	r7
 634:	8f 92       	push	r8
 636:	ef 92       	push	r14
 638:	ff 92       	push	r15
 63a:	0f 93       	push	r16
 63c:	1f 93       	push	r17
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	00 d0       	rcall	.+0      	; 0x644 <xQueueGenericSend+0x14>
 644:	00 d0       	rcall	.+0      	; 0x646 <xQueueGenericSend+0x16>
 646:	0f 92       	push	r0
 648:	cd b7       	in	r28, 0x3d	; 61
 64a:	de b7       	in	r29, 0x3e	; 62
 64c:	7c 01       	movw	r14, r24
 64e:	3a 01       	movw	r6, r20
 650:	86 2e       	mov	r8, r22
 652:	3d 83       	std	Y+5, r19	; 0x05
 654:	2c 83       	std	Y+4, r18	; 0x04
 656:	10 e0       	ldi	r17, 0x00	; 0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	f8 94       	cli
 65c:	0f 92       	push	r0
 65e:	f7 01       	movw	r30, r14
 660:	92 8d       	ldd	r25, Z+26	; 0x1a
 662:	83 8d       	ldd	r24, Z+27	; 0x1b
 664:	98 17       	cp	r25, r24
 666:	10 f0       	brcs	.+4      	; 0x66c <xQueueGenericSend+0x3c>
 668:	02 30       	cpi	r16, 0x02	; 2
 66a:	81 f5       	brne	.+96     	; 0x6cc <xQueueGenericSend+0x9c>
 66c:	f7 01       	movw	r30, r14
 66e:	12 8d       	ldd	r17, Z+26	; 0x1a
 670:	20 2f       	mov	r18, r16
 672:	68 2d       	mov	r22, r8
 674:	a3 01       	movw	r20, r6
 676:	c7 01       	movw	r24, r14
 678:	0e 94 c6 07 	call	0xf8c	; 0xf8c <prvCopyDataToQueue>
 67c:	f7 01       	movw	r30, r14
 67e:	27 8d       	ldd	r18, Z+31	; 0x1f
 680:	30 a1       	ldd	r19, Z+32	; 0x20
 682:	23 2b       	or	r18, r19
 684:	69 f0       	breq	.+26     	; 0x6a0 <xQueueGenericSend+0x70>
 686:	02 30       	cpi	r16, 0x02	; 2
 688:	11 f4       	brne	.+4      	; 0x68e <xQueueGenericSend+0x5e>
 68a:	11 11       	cpse	r17, r1
 68c:	1b c0       	rjmp	.+54     	; 0x6c4 <xQueueGenericSend+0x94>
 68e:	b7 01       	movw	r22, r14
 690:	80 e8       	ldi	r24, 0x80	; 128
 692:	0e 94 7a 07 	call	0xef4	; 0xef4 <prvNotifyQueueSetContainer>
 696:	88 23       	and	r24, r24
 698:	a9 f0       	breq	.+42     	; 0x6c4 <xQueueGenericSend+0x94>
 69a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vPortYield>
 69e:	12 c0       	rjmp	.+36     	; 0x6c4 <xQueueGenericSend+0x94>
 6a0:	f7 01       	movw	r30, r14
 6a2:	91 89       	ldd	r25, Z+17	; 0x11
 6a4:	99 23       	and	r25, r25
 6a6:	59 f0       	breq	.+22     	; 0x6be <xQueueGenericSend+0x8e>
 6a8:	b7 01       	movw	r22, r14
 6aa:	6f 5e       	subi	r22, 0xEF	; 239
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	80 e8       	ldi	r24, 0x80	; 128
 6b0:	0e 94 56 02 	call	0x4ac	; 0x4ac <xTaskRemoveFromEventList>
 6b4:	88 23       	and	r24, r24
 6b6:	31 f0       	breq	.+12     	; 0x6c4 <xQueueGenericSend+0x94>
 6b8:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vPortYield>
 6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <xQueueGenericSend+0x94>
 6be:	81 11       	cpse	r24, r1
 6c0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vPortYield>
 6c4:	0f 90       	pop	r0
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	4d c0       	rjmp	.+154    	; 0x766 <xQueueGenericSend+0x136>
 6cc:	8c 81       	ldd	r24, Y+4	; 0x04
 6ce:	9d 81       	ldd	r25, Y+5	; 0x05
 6d0:	89 2b       	or	r24, r25
 6d2:	21 f4       	brne	.+8      	; 0x6dc <xQueueGenericSend+0xac>
 6d4:	0f 90       	pop	r0
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	45 c0       	rjmp	.+138    	; 0x766 <xQueueGenericSend+0x136>
 6dc:	11 11       	cpse	r17, r1
 6de:	05 c0       	rjmp	.+10     	; 0x6ea <xQueueGenericSend+0xba>
 6e0:	ce 01       	movw	r24, r28
 6e2:	01 96       	adiw	r24, 0x01	; 1
 6e4:	0e 94 18 0c 	call	0x1830	; 0x1830 <vTaskInternalSetTimeOutState>
 6e8:	11 e0       	ldi	r17, 0x01	; 1
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0e 94 3f 0c 	call	0x187e	; 0x187e <vTaskSuspendAll>
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	f8 94       	cli
 6f6:	0f 92       	push	r0
 6f8:	f7 01       	movw	r30, r14
 6fa:	85 8d       	ldd	r24, Z+29	; 0x1d
 6fc:	8f 3f       	cpi	r24, 0xFF	; 255
 6fe:	09 f4       	brne	.+2      	; 0x702 <xQueueGenericSend+0xd2>
 700:	15 8e       	std	Z+29, r1	; 0x1d
 702:	f7 01       	movw	r30, r14
 704:	86 8d       	ldd	r24, Z+30	; 0x1e
 706:	8f 3f       	cpi	r24, 0xFF	; 255
 708:	09 f4       	brne	.+2      	; 0x70c <xQueueGenericSend+0xdc>
 70a:	16 8e       	std	Z+30, r1	; 0x1e
 70c:	0f 90       	pop	r0
 70e:	0f be       	out	0x3f, r0	; 63
 710:	be 01       	movw	r22, r28
 712:	6c 5f       	subi	r22, 0xFC	; 252
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	ce 01       	movw	r24, r28
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	0e 94 95 08 	call	0x112a	; 0x112a <xTaskCheckForTimeOut>
 71e:	81 11       	cpse	r24, r1
 720:	1c c0       	rjmp	.+56     	; 0x75a <xQueueGenericSend+0x12a>
 722:	b7 01       	movw	r22, r14
 724:	80 e8       	ldi	r24, 0x80	; 128
 726:	0e 94 18 0b 	call	0x1630	; 0x1630 <prvIsQueueFull>
 72a:	88 23       	and	r24, r24
 72c:	81 f0       	breq	.+32     	; 0x74e <xQueueGenericSend+0x11e>
 72e:	6c 81       	ldd	r22, Y+4	; 0x04
 730:	7d 81       	ldd	r23, Y+5	; 0x05
 732:	c7 01       	movw	r24, r14
 734:	08 96       	adiw	r24, 0x08	; 8
 736:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <vTaskPlaceOnEventList>
 73a:	c7 01       	movw	r24, r14
 73c:	0e 94 0f 08 	call	0x101e	; 0x101e <prvUnlockQueue>
 740:	0e 94 81 01 	call	0x302	; 0x302 <xTaskResumeAll>
 744:	81 11       	cpse	r24, r1
 746:	88 cf       	rjmp	.-240    	; 0x658 <xQueueGenericSend+0x28>
 748:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vPortYield>
 74c:	85 cf       	rjmp	.-246    	; 0x658 <xQueueGenericSend+0x28>
 74e:	c7 01       	movw	r24, r14
 750:	0e 94 0f 08 	call	0x101e	; 0x101e <prvUnlockQueue>
 754:	0e 94 81 01 	call	0x302	; 0x302 <xTaskResumeAll>
 758:	7f cf       	rjmp	.-258    	; 0x658 <xQueueGenericSend+0x28>
 75a:	c7 01       	movw	r24, r14
 75c:	0e 94 0f 08 	call	0x101e	; 0x101e <prvUnlockQueue>
 760:	0e 94 81 01 	call	0x302	; 0x302 <xTaskResumeAll>
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	0f 90       	pop	r0
 768:	0f 90       	pop	r0
 76a:	0f 90       	pop	r0
 76c:	0f 90       	pop	r0
 76e:	0f 90       	pop	r0
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	1f 91       	pop	r17
 776:	0f 91       	pop	r16
 778:	ff 90       	pop	r15
 77a:	ef 90       	pop	r14
 77c:	8f 90       	pop	r8
 77e:	7f 90       	pop	r7
 780:	6f 90       	pop	r6
 782:	08 95       	ret

Disassembly of section .text.prvResetNextTaskUnblockTime:

00001668 <prvResetNextTaskUnblockTime>:
        xReturn = xTickCount;
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    1668:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <pxDelayedTaskList>
    166c:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
    1670:	80 81       	ld	r24, Z
    1672:	81 11       	cpse	r24, r1
    1674:	07 c0       	rjmp	.+14     	; 0x1684 <prvResetNextTaskUnblockTime+0x1c>
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	9f ef       	ldi	r25, 0xFF	; 255
    167a:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <xNextTaskUnblockTime+0x1>
    167e:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <xNextTaskUnblockTime>
    1682:	08 95       	ret
    1684:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <pxDelayedTaskList>
    1688:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
    168c:	05 80       	ldd	r0, Z+5	; 0x05
    168e:	f6 81       	ldd	r31, Z+6	; 0x06
    1690:	e0 2d       	mov	r30, r0
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <xNextTaskUnblockTime+0x1>
    169a:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <xNextTaskUnblockTime>
    169e:	08 95       	ret

Disassembly of section .text.prvDeleteTCB:

00001816 <prvDeleteTCB>:
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	ec 01       	movw	r28, r24
    181c:	8f 89       	ldd	r24, Y+23	; 0x17
    181e:	98 8d       	ldd	r25, Y+24	; 0x18
    1820:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <vPortFree>
    1824:	ce 01       	movw	r24, r28
    1826:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <vPortFree>
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	08 95       	ret

Disassembly of section .text.prvInitialiseNewTask:

00000980 <prvInitialiseNewTask>:
 980:	6f 92       	push	r6
 982:	7f 92       	push	r7
 984:	8f 92       	push	r8
 986:	9f 92       	push	r9
 988:	af 92       	push	r10
 98a:	bf 92       	push	r11
 98c:	cf 92       	push	r12
 98e:	df 92       	push	r13
 990:	ef 92       	push	r14
 992:	ff 92       	push	r15
 994:	0f 93       	push	r16
 996:	1f 93       	push	r17
 998:	cf 93       	push	r28
 99a:	df 93       	push	r29
 99c:	cd b7       	in	r28, 0x3d	; 61
 99e:	de b7       	in	r29, 0x3e	; 62
 9a0:	3c 01       	movw	r6, r24
 9a2:	a6 2f       	mov	r26, r22
 9a4:	ca 01       	movw	r24, r20
 9a6:	f4 01       	movw	r30, r8
 9a8:	47 89       	ldd	r20, Z+23	; 0x17
 9aa:	50 8d       	ldd	r21, Z+24	; 0x18
 9ac:	01 50       	subi	r16, 0x01	; 1
 9ae:	11 09       	sbc	r17, r1
 9b0:	04 0f       	add	r16, r20
 9b2:	15 1f       	adc	r17, r21
 9b4:	00 97       	sbiw	r24, 0x00	; 0
 9b6:	a1 05       	cpc	r26, r1
 9b8:	d1 f4       	brne	.+52     	; 0x9ee <prvInitialiseNewTask+0x6e>
 9ba:	1e c0       	rjmp	.+60     	; 0x9f8 <prvInitialiseNewTask+0x78>
 9bc:	27 2f       	mov	r18, r23
 9be:	30 e0       	ldi	r19, 0x00	; 0
 9c0:	ac 01       	movw	r20, r24
 9c2:	6a 2f       	mov	r22, r26
 9c4:	42 0f       	add	r20, r18
 9c6:	53 1f       	adc	r21, r19
 9c8:	61 1d       	adc	r22, r1
 9ca:	37 fd       	sbrc	r19, 7
 9cc:	6a 95       	dec	r22
 9ce:	fa 01       	movw	r30, r20
 9d0:	b4 91       	lpm	r27, Z
 9d2:	67 fd       	sbrc	r22, 7
 9d4:	b0 81       	ld	r27, Z
 9d6:	f4 01       	movw	r30, r8
 9d8:	e2 0f       	add	r30, r18
 9da:	f3 1f       	adc	r31, r19
 9dc:	b1 8f       	std	Z+25, r27	; 0x19
 9de:	fa 01       	movw	r30, r20
 9e0:	24 91       	lpm	r18, Z
 9e2:	67 fd       	sbrc	r22, 7
 9e4:	20 81       	ld	r18, Z
 9e6:	22 23       	and	r18, r18
 9e8:	29 f0       	breq	.+10     	; 0x9f4 <prvInitialiseNewTask+0x74>
 9ea:	7f 5f       	subi	r23, 0xFF	; 255
 9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <prvInitialiseNewTask+0x70>
 9ee:	70 e0       	ldi	r23, 0x00	; 0
 9f0:	78 30       	cpi	r23, 0x08	; 8
 9f2:	20 f3       	brcs	.-56     	; 0x9bc <prvInitialiseNewTask+0x3c>
 9f4:	f4 01       	movw	r30, r8
 9f6:	10 a2       	std	Z+32, r1	; 0x20
 9f8:	f3 e0       	ldi	r31, 0x03	; 3
 9fa:	fc 15       	cp	r31, r12
 9fc:	20 f4       	brcc	.+8      	; 0xa06 <prvInitialiseNewTask+0x86>
 9fe:	0f 2e       	mov	r0, r31
 a00:	f3 e0       	ldi	r31, 0x03	; 3
 a02:	cf 2e       	mov	r12, r31
 a04:	f0 2d       	mov	r31, r0
 a06:	f4 01       	movw	r30, r8
 a08:	c6 8a       	std	Z+22, r12	; 0x16
 a0a:	c4 01       	movw	r24, r8
 a0c:	02 96       	adiw	r24, 0x02	; 2
 a0e:	0e 94 45 0c 	call	0x188a	; 0x188a <vListInitialiseItem>
 a12:	c4 01       	movw	r24, r8
 a14:	0c 96       	adiw	r24, 0x0c	; 12
 a16:	0e 94 45 0c 	call	0x188a	; 0x188a <vListInitialiseItem>
 a1a:	f4 01       	movw	r30, r8
 a1c:	91 86       	std	Z+9, r9	; 0x09
 a1e:	80 86       	std	Z+8, r8	; 0x08
 a20:	84 e0       	ldi	r24, 0x04	; 4
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	8c 19       	sub	r24, r12
 a26:	91 09       	sbc	r25, r1
 a28:	95 87       	std	Z+13, r25	; 0x0d
 a2a:	84 87       	std	Z+12, r24	; 0x0c
 a2c:	93 8a       	std	Z+19, r9	; 0x13
 a2e:	82 8a       	std	Z+18, r8	; 0x12
 a30:	a7 01       	movw	r20, r14
 a32:	b3 01       	movw	r22, r6
 a34:	c8 01       	movw	r24, r16
 a36:	0e 94 a4 05 	call	0xb48	; 0xb48 <pxPortInitialiseStack>
 a3a:	f4 01       	movw	r30, r8
 a3c:	91 83       	std	Z+1, r25	; 0x01
 a3e:	80 83       	st	Z, r24
 a40:	a1 14       	cp	r10, r1
 a42:	b1 04       	cpc	r11, r1
 a44:	19 f0       	breq	.+6      	; 0xa4c <prvInitialiseNewTask+0xcc>
 a46:	f5 01       	movw	r30, r10
 a48:	91 82       	std	Z+1, r9	; 0x01
 a4a:	80 82       	st	Z, r8
 a4c:	df 91       	pop	r29
 a4e:	cf 91       	pop	r28
 a50:	1f 91       	pop	r17
 a52:	0f 91       	pop	r16
 a54:	ff 90       	pop	r15
 a56:	ef 90       	pop	r14
 a58:	df 90       	pop	r13
 a5a:	cf 90       	pop	r12
 a5c:	bf 90       	pop	r11
 a5e:	af 90       	pop	r10
 a60:	9f 90       	pop	r9
 a62:	8f 90       	pop	r8
 a64:	7f 90       	pop	r7
 a66:	6f 90       	pop	r6
 a68:	08 95       	ret

Disassembly of section .text.prvInitialiseTaskLists:

00001292 <prvInitialiseTaskLists>:
    1292:	cf 93       	push	r28
    1294:	c0 e0       	ldi	r28, 0x00	; 0
    1296:	10 c0       	rjmp	.+32     	; 0x12b8 <prvInitialiseTaskLists+0x26>
    1298:	8c 2f       	mov	r24, r28
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9c 01       	movw	r18, r24
    129e:	22 0f       	add	r18, r18
    12a0:	33 1f       	adc	r19, r19
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	82 0f       	add	r24, r18
    12ac:	93 1f       	adc	r25, r19
    12ae:	82 5c       	subi	r24, 0xC2	; 194
    12b0:	99 4f       	sbci	r25, 0xF9	; 249
    12b2:	0e 94 ef 0b 	call	0x17de	; 0x17de <vListInitialise>
    12b6:	cf 5f       	subi	r28, 0xFF	; 255
    12b8:	c4 30       	cpi	r28, 0x04	; 4
    12ba:	70 f3       	brcs	.-36     	; 0x1298 <prvInitialiseTaskLists+0x6>
    12bc:	86 e8       	ldi	r24, 0x86	; 134
    12be:	96 e0       	ldi	r25, 0x06	; 6
    12c0:	0e 94 ef 0b 	call	0x17de	; 0x17de <vListInitialise>
    12c4:	8d e7       	ldi	r24, 0x7D	; 125
    12c6:	96 e0       	ldi	r25, 0x06	; 6
    12c8:	0e 94 ef 0b 	call	0x17de	; 0x17de <vListInitialise>
    12cc:	84 e7       	ldi	r24, 0x74	; 116
    12ce:	96 e0       	ldi	r25, 0x06	; 6
    12d0:	0e 94 ef 0b 	call	0x17de	; 0x17de <vListInitialise>
    12d4:	8b e6       	ldi	r24, 0x6B	; 107
    12d6:	96 e0       	ldi	r25, 0x06	; 6
    12d8:	0e 94 ef 0b 	call	0x17de	; 0x17de <vListInitialise>
    12dc:	82 e6       	ldi	r24, 0x62	; 98
    12de:	96 e0       	ldi	r25, 0x06	; 6
    12e0:	0e 94 ef 0b 	call	0x17de	; 0x17de <vListInitialise>
    12e4:	86 e8       	ldi	r24, 0x86	; 134
    12e6:	96 e0       	ldi	r25, 0x06	; 6
    12e8:	90 93 9e 06 	sts	0x069E, r25	; 0x80069e <pxDelayedTaskList+0x1>
    12ec:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <pxDelayedTaskList>
    12f0:	8d e7       	ldi	r24, 0x7D	; 125
    12f2:	96 e0       	ldi	r25, 0x06	; 6
    12f4:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <pxOverflowDelayedTaskList+0x1>
    12f8:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <pxOverflowDelayedTaskList>
    12fc:	cf 91       	pop	r28
    12fe:	08 95       	ret

Disassembly of section .text.prvAddNewTaskToReadyList:

00000886 <prvAddNewTaskToReadyList>:
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	ec 01       	movw	r28, r24
 88c:	0f b6       	in	r0, 0x3f	; 63
 88e:	f8 94       	cli
 890:	0f 92       	push	r0
 892:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
 896:	8f 5f       	subi	r24, 0xFF	; 255
 898:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <uxCurrentNumberOfTasks>
 89c:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 8a0:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 8a4:	89 2b       	or	r24, r25
 8a6:	59 f4       	brne	.+22     	; 0x8be <prvAddNewTaskToReadyList+0x38>
 8a8:	d0 93 a0 06 	sts	0x06A0, r29	; 0x8006a0 <pxCurrentTCB+0x1>
 8ac:	c0 93 9f 06 	sts	0x069F, r28	; 0x80069f <pxCurrentTCB>
 8b0:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
 8b4:	81 30       	cpi	r24, 0x01	; 1
 8b6:	99 f4       	brne	.+38     	; 0x8de <prvAddNewTaskToReadyList+0x58>
 8b8:	0e 94 49 09 	call	0x1292	; 0x1292 <prvInitialiseTaskLists>
 8bc:	10 c0       	rjmp	.+32     	; 0x8de <prvAddNewTaskToReadyList+0x58>
 8be:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <xSchedulerRunning>
 8c2:	81 11       	cpse	r24, r1
 8c4:	0c c0       	rjmp	.+24     	; 0x8de <prvAddNewTaskToReadyList+0x58>
 8c6:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 8ca:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 8ce:	96 89       	ldd	r25, Z+22	; 0x16
 8d0:	8e 89       	ldd	r24, Y+22	; 0x16
 8d2:	89 17       	cp	r24, r25
 8d4:	20 f0       	brcs	.+8      	; 0x8de <prvAddNewTaskToReadyList+0x58>
 8d6:	d0 93 a0 06 	sts	0x06A0, r29	; 0x8006a0 <pxCurrentTCB+0x1>
 8da:	c0 93 9f 06 	sts	0x069F, r28	; 0x80069f <pxCurrentTCB>
 8de:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <uxTaskNumber>
 8e2:	8f 5f       	subi	r24, 0xFF	; 255
 8e4:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <uxTaskNumber>
 8e8:	8e 89       	ldd	r24, Y+22	; 0x16
 8ea:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 8ee:	98 17       	cp	r25, r24
 8f0:	10 f4       	brcc	.+4      	; 0x8f6 <prvAddNewTaskToReadyList+0x70>
 8f2:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <uxTopReadyPriority>
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	fc 01       	movw	r30, r24
 8fa:	ee 0f       	add	r30, r30
 8fc:	ff 1f       	adc	r31, r31
 8fe:	ee 0f       	add	r30, r30
 900:	ff 1f       	adc	r31, r31
 902:	ee 0f       	add	r30, r30
 904:	ff 1f       	adc	r31, r31
 906:	8e 0f       	add	r24, r30
 908:	9f 1f       	adc	r25, r31
 90a:	fc 01       	movw	r30, r24
 90c:	e2 5c       	subi	r30, 0xC2	; 194
 90e:	f9 4f       	sbci	r31, 0xF9	; 249
 910:	01 80       	ldd	r0, Z+1	; 0x01
 912:	f2 81       	ldd	r31, Z+2	; 0x02
 914:	e0 2d       	mov	r30, r0
 916:	fd 83       	std	Y+5, r31	; 0x05
 918:	ec 83       	std	Y+4, r30	; 0x04
 91a:	84 81       	ldd	r24, Z+4	; 0x04
 91c:	95 81       	ldd	r25, Z+5	; 0x05
 91e:	9f 83       	std	Y+7, r25	; 0x07
 920:	8e 83       	std	Y+6, r24	; 0x06
 922:	a4 81       	ldd	r26, Z+4	; 0x04
 924:	b5 81       	ldd	r27, Z+5	; 0x05
 926:	ce 01       	movw	r24, r28
 928:	02 96       	adiw	r24, 0x02	; 2
 92a:	13 96       	adiw	r26, 0x03	; 3
 92c:	9c 93       	st	X, r25
 92e:	8e 93       	st	-X, r24
 930:	12 97       	sbiw	r26, 0x02	; 2
 932:	95 83       	std	Z+5, r25	; 0x05
 934:	84 83       	std	Z+4, r24	; 0x04
 936:	ee 89       	ldd	r30, Y+22	; 0x16
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	cf 01       	movw	r24, r30
 93c:	88 0f       	add	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	88 0f       	add	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	88 0f       	add	r24, r24
 946:	99 1f       	adc	r25, r25
 948:	e8 0f       	add	r30, r24
 94a:	f9 1f       	adc	r31, r25
 94c:	e2 5c       	subi	r30, 0xC2	; 194
 94e:	f9 4f       	sbci	r31, 0xF9	; 249
 950:	fb 87       	std	Y+11, r31	; 0x0b
 952:	ea 87       	std	Y+10, r30	; 0x0a
 954:	80 81       	ld	r24, Z
 956:	8f 5f       	subi	r24, 0xFF	; 255
 958:	80 83       	st	Z, r24
 95a:	0f 90       	pop	r0
 95c:	0f be       	out	0x3f, r0	; 63
 95e:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <xSchedulerRunning>
 962:	88 23       	and	r24, r24
 964:	51 f0       	breq	.+20     	; 0x97a <prvAddNewTaskToReadyList+0xf4>
 966:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 96a:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 96e:	96 89       	ldd	r25, Z+22	; 0x16
 970:	8e 89       	ldd	r24, Y+22	; 0x16
 972:	98 17       	cp	r25, r24
 974:	10 f4       	brcc	.+4      	; 0x97a <prvAddNewTaskToReadyList+0xf4>
 976:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vPortYield>
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	08 95       	ret

Disassembly of section .text.prvCheckTasksWaitingTermination:

000015a2 <prvCheckTasksWaitingTermination>:
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	1c c0       	rjmp	.+56     	; 0x15e0 <prvCheckTasksWaitingTermination+0x3e>
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	0f 92       	push	r0
    15ae:	e0 91 70 06 	lds	r30, 0x0670	; 0x800670 <xTasksWaitingTermination+0x5>
    15b2:	f0 91 71 06 	lds	r31, 0x0671	; 0x800671 <xTasksWaitingTermination+0x6>
    15b6:	c6 81       	ldd	r28, Z+6	; 0x06
    15b8:	d7 81       	ldd	r29, Z+7	; 0x07
    15ba:	ce 01       	movw	r24, r28
    15bc:	02 96       	adiw	r24, 0x02	; 2
    15be:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uxListRemove>
    15c2:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
    15c6:	81 50       	subi	r24, 0x01	; 1
    15c8:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <uxCurrentNumberOfTasks>
    15cc:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
    15d0:	81 50       	subi	r24, 0x01	; 1
    15d2:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
    15d6:	0f 90       	pop	r0
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	ce 01       	movw	r24, r28
    15dc:	0e 94 0b 0c 	call	0x1816	; 0x1816 <prvDeleteTCB>
    15e0:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
    15e4:	81 11       	cpse	r24, r1
    15e6:	e0 cf       	rjmp	.-64     	; 0x15a8 <prvCheckTasksWaitingTermination+0x6>
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

Disassembly of section .text.prvIdleTask:

000018a0 <prvIdleTask>:
    18a0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <prvCheckTasksWaitingTermination>
    18a4:	fd cf       	rjmp	.-6      	; 0x18a0 <prvIdleTask>

Disassembly of section .text.prvAddCurrentTaskToDelayedList:

00000784 <prvAddCurrentTaskToDelayedList>:
 784:	ff 92       	push	r15
 786:	0f 93       	push	r16
 788:	1f 93       	push	r17
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	ec 01       	movw	r28, r24
 790:	f6 2e       	mov	r15, r22
 792:	00 91 99 06 	lds	r16, 0x0699	; 0x800699 <xTickCount>
 796:	10 91 9a 06 	lds	r17, 0x069A	; 0x80069a <xTickCount+0x1>
 79a:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 79e:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 7a2:	02 96       	adiw	r24, 0x02	; 2
 7a4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uxListRemove>
 7a8:	cf 3f       	cpi	r28, 0xFF	; 255
 7aa:	8f ef       	ldi	r24, 0xFF	; 255
 7ac:	d8 07       	cpc	r29, r24
 7ae:	b1 f5       	brne	.+108    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7b0:	ff 20       	and	r15, r15
 7b2:	a1 f1       	breq	.+104    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7b4:	e2 e6       	ldi	r30, 0x62	; 98
 7b6:	f6 e0       	ldi	r31, 0x06	; 6
 7b8:	a1 81       	ldd	r26, Z+1	; 0x01
 7ba:	b2 81       	ldd	r27, Z+2	; 0x02
 7bc:	c0 91 9f 06 	lds	r28, 0x069F	; 0x80069f <pxCurrentTCB>
 7c0:	d0 91 a0 06 	lds	r29, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 7c4:	bd 83       	std	Y+5, r27	; 0x05
 7c6:	ac 83       	std	Y+4, r26	; 0x04
 7c8:	c0 91 9f 06 	lds	r28, 0x069F	; 0x80069f <pxCurrentTCB>
 7cc:	d0 91 a0 06 	lds	r29, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 7d0:	14 96       	adiw	r26, 0x04	; 4
 7d2:	8d 91       	ld	r24, X+
 7d4:	9c 91       	ld	r25, X
 7d6:	15 97       	sbiw	r26, 0x05	; 5
 7d8:	9f 83       	std	Y+7, r25	; 0x07
 7da:	8e 83       	std	Y+6, r24	; 0x06
 7dc:	14 96       	adiw	r26, 0x04	; 4
 7de:	cd 91       	ld	r28, X+
 7e0:	dc 91       	ld	r29, X
 7e2:	15 97       	sbiw	r26, 0x05	; 5
 7e4:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 7e8:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 7ec:	02 96       	adiw	r24, 0x02	; 2
 7ee:	9b 83       	std	Y+3, r25	; 0x03
 7f0:	8a 83       	std	Y+2, r24	; 0x02
 7f2:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 7f6:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 7fa:	02 96       	adiw	r24, 0x02	; 2
 7fc:	15 96       	adiw	r26, 0x05	; 5
 7fe:	9c 93       	st	X, r25
 800:	8e 93       	st	-X, r24
 802:	14 97       	sbiw	r26, 0x04	; 4
 804:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 808:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 80c:	1b 96       	adiw	r26, 0x0b	; 11
 80e:	fc 93       	st	X, r31
 810:	ee 93       	st	-X, r30
 812:	1a 97       	sbiw	r26, 0x0a	; 10
 814:	80 81       	ld	r24, Z
 816:	8f 5f       	subi	r24, 0xFF	; 255
 818:	80 83       	st	Z, r24
 81a:	2f c0       	rjmp	.+94     	; 0x87a <__stack+0x1b>
 81c:	c0 0f       	add	r28, r16
 81e:	d1 1f       	adc	r29, r17
 820:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 824:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 828:	d3 83       	std	Z+3, r29	; 0x03
 82a:	c2 83       	std	Z+2, r28	; 0x02
 82c:	c0 17       	cp	r28, r16
 82e:	d1 07       	cpc	r29, r17
 830:	68 f4       	brcc	.+26     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 832:	60 91 9f 06 	lds	r22, 0x069F	; 0x80069f <pxCurrentTCB>
 836:	70 91 a0 06 	lds	r23, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 83a:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <pxOverflowDelayedTaskList>
 83e:	90 91 9c 06 	lds	r25, 0x069C	; 0x80069c <pxOverflowDelayedTaskList+0x1>
 842:	6e 5f       	subi	r22, 0xFE	; 254
 844:	7f 4f       	sbci	r23, 0xFF	; 255
 846:	0e 94 1b 0a 	call	0x1436	; 0x1436 <vListInsert>
 84a:	17 c0       	rjmp	.+46     	; 0x87a <__stack+0x1b>
 84c:	60 91 9f 06 	lds	r22, 0x069F	; 0x80069f <pxCurrentTCB>
 850:	70 91 a0 06 	lds	r23, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 854:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <pxDelayedTaskList>
 858:	90 91 9e 06 	lds	r25, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
 85c:	6e 5f       	subi	r22, 0xFE	; 254
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	0e 94 1b 0a 	call	0x1436	; 0x1436 <vListInsert>
 864:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <xNextTaskUnblockTime>
 868:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <xNextTaskUnblockTime+0x1>
 86c:	c8 17       	cp	r28, r24
 86e:	d9 07       	cpc	r29, r25
 870:	20 f4       	brcc	.+8      	; 0x87a <__stack+0x1b>
 872:	d0 93 96 06 	sts	0x0696, r29	; 0x800696 <xNextTaskUnblockTime+0x1>
 876:	c0 93 95 06 	sts	0x0695, r28	; 0x800695 <xNextTaskUnblockTime>
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	1f 91       	pop	r17
 880:	0f 91       	pop	r16
 882:	ff 90       	pop	r15
 884:	08 95       	ret

Disassembly of section .text.xTaskCreate:

00000a6a <xTaskCreate>:
 a6a:	4f 92       	push	r4
 a6c:	5f 92       	push	r5
 a6e:	6f 92       	push	r6
 a70:	7f 92       	push	r7
 a72:	8f 92       	push	r8
 a74:	9f 92       	push	r9
 a76:	af 92       	push	r10
 a78:	bf 92       	push	r11
 a7a:	cf 92       	push	r12
 a7c:	df 92       	push	r13
 a7e:	ef 92       	push	r14
 a80:	ff 92       	push	r15
 a82:	0f 93       	push	r16
 a84:	1f 93       	push	r17
 a86:	cf 93       	push	r28
 a88:	df 93       	push	r29
 a8a:	00 d0       	rcall	.+0      	; 0xa8c <xTaskCreate+0x22>
 a8c:	00 d0       	rcall	.+0      	; 0xa8e <xTaskCreate+0x24>
 a8e:	0f 92       	push	r0
 a90:	cd b7       	in	r28, 0x3d	; 61
 a92:	de b7       	in	r29, 0x3e	; 62
 a94:	3c 01       	movw	r6, r24
 a96:	49 83       	std	Y+1, r20	; 0x01
 a98:	5a 83       	std	Y+2, r21	; 0x02
 a9a:	6b 83       	std	Y+3, r22	; 0x03
 a9c:	49 01       	movw	r8, r18
 a9e:	28 01       	movw	r4, r16
 aa0:	c9 01       	movw	r24, r18
 aa2:	0e 94 0f 09 	call	0x121e	; 0x121e <pvPortMalloc>
 aa6:	8c 01       	movw	r16, r24
 aa8:	89 2b       	or	r24, r25
 aaa:	b9 f0       	breq	.+46     	; 0xada <xTaskCreate+0x70>
 aac:	86 e2       	ldi	r24, 0x26	; 38
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	0e 94 0f 09 	call	0x121e	; 0x121e <pvPortMalloc>
 ab4:	9d 83       	std	Y+5, r25	; 0x05
 ab6:	8c 83       	std	Y+4, r24	; 0x04
 ab8:	89 2b       	or	r24, r25
 aba:	59 f0       	breq	.+22     	; 0xad2 <xTaskCreate+0x68>
 abc:	86 e2       	ldi	r24, 0x26	; 38
 abe:	ec 81       	ldd	r30, Y+4	; 0x04
 ac0:	fd 81       	ldd	r31, Y+5	; 0x05
 ac2:	11 92       	st	Z+, r1
 ac4:	8a 95       	dec	r24
 ac6:	e9 f7       	brne	.-6      	; 0xac2 <xTaskCreate+0x58>
 ac8:	ec 81       	ldd	r30, Y+4	; 0x04
 aca:	fd 81       	ldd	r31, Y+5	; 0x05
 acc:	10 8f       	std	Z+24, r17	; 0x18
 ace:	07 8b       	std	Z+23, r16	; 0x17
 ad0:	06 c0       	rjmp	.+12     	; 0xade <xTaskCreate+0x74>
 ad2:	c8 01       	movw	r24, r16
 ad4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <vPortFree>
 ad8:	02 c0       	rjmp	.+4      	; 0xade <xTaskCreate+0x74>
 ada:	1d 82       	std	Y+5, r1	; 0x05
 adc:	1c 82       	std	Y+4, r1	; 0x04
 ade:	8c 81       	ldd	r24, Y+4	; 0x04
 ae0:	9d 81       	ldd	r25, Y+5	; 0x05
 ae2:	89 2b       	or	r24, r25
 ae4:	d1 f0       	breq	.+52     	; 0xb1a <xTaskCreate+0xb0>
 ae6:	84 01       	movw	r16, r8
 ae8:	20 e0       	ldi	r18, 0x00	; 0
 aea:	30 e0       	ldi	r19, 0x00	; 0
 aec:	1f 92       	push	r1
 aee:	1f 92       	push	r1
 af0:	1f 92       	push	r1
 af2:	8c 80       	ldd	r8, Y+4	; 0x04
 af4:	9d 80       	ldd	r9, Y+5	; 0x05
 af6:	56 01       	movw	r10, r12
 af8:	ce 2c       	mov	r12, r14
 afa:	72 01       	movw	r14, r4
 afc:	49 81       	ldd	r20, Y+1	; 0x01
 afe:	5a 81       	ldd	r21, Y+2	; 0x02
 b00:	6b 81       	ldd	r22, Y+3	; 0x03
 b02:	c3 01       	movw	r24, r6
 b04:	0e 94 c0 04 	call	0x980	; 0x980 <prvInitialiseNewTask>
 b08:	8c 81       	ldd	r24, Y+4	; 0x04
 b0a:	9d 81       	ldd	r25, Y+5	; 0x05
 b0c:	0e 94 43 04 	call	0x886	; 0x886 <prvAddNewTaskToReadyList>
 b10:	0f 90       	pop	r0
 b12:	0f 90       	pop	r0
 b14:	0f 90       	pop	r0
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	01 c0       	rjmp	.+2      	; 0xb1c <xTaskCreate+0xb2>
 b1a:	8f ef       	ldi	r24, 0xFF	; 255
 b1c:	0f 90       	pop	r0
 b1e:	0f 90       	pop	r0
 b20:	0f 90       	pop	r0
 b22:	0f 90       	pop	r0
 b24:	0f 90       	pop	r0
 b26:	df 91       	pop	r29
 b28:	cf 91       	pop	r28
 b2a:	1f 91       	pop	r17
 b2c:	0f 91       	pop	r16
 b2e:	ff 90       	pop	r15
 b30:	ef 90       	pop	r14
 b32:	df 90       	pop	r13
 b34:	cf 90       	pop	r12
 b36:	bf 90       	pop	r11
 b38:	af 90       	pop	r10
 b3a:	9f 90       	pop	r9
 b3c:	8f 90       	pop	r8
 b3e:	7f 90       	pop	r7
 b40:	6f 90       	pop	r6
 b42:	5f 90       	pop	r5
 b44:	4f 90       	pop	r4
 b46:	08 95       	ret

Disassembly of section .text.vTaskStartScheduler:

000014f6 <vTaskStartScheduler>:
    14f6:	cf 92       	push	r12
    14f8:	df 92       	push	r13
    14fa:	ef 92       	push	r14
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	0f 2e       	mov	r0, r31
    1502:	f3 e9       	ldi	r31, 0x93	; 147
    1504:	cf 2e       	mov	r12, r31
    1506:	f6 e0       	ldi	r31, 0x06	; 6
    1508:	df 2e       	mov	r13, r31
    150a:	f0 2d       	mov	r31, r0
    150c:	e1 2c       	mov	r14, r1
    150e:	00 e0       	ldi	r16, 0x00	; 0
    1510:	10 e0       	ldi	r17, 0x00	; 0
    1512:	25 e5       	ldi	r18, 0x55	; 85
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	48 ec       	ldi	r20, 0xC8	; 200
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	80 e5       	ldi	r24, 0x50	; 80
    151e:	9c e0       	ldi	r25, 0x0C	; 12
    1520:	0e 94 35 05 	call	0xa6a	; 0xa6a <xTaskCreate>
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	81 f4       	brne	.+32     	; 0x1548 <vTaskStartScheduler+0x52>
    1528:	f8 94       	cli
    152a:	8f ef       	ldi	r24, 0xFF	; 255
    152c:	9f ef       	ldi	r25, 0xFF	; 255
    152e:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <xNextTaskUnblockTime+0x1>
    1532:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <xNextTaskUnblockTime>
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <xSchedulerRunning>
    153c:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <xTickCount+0x1>
    1540:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <xTickCount>
    1544:	0e 94 4c 0a 	call	0x1498	; 0x1498 <xPortStartScheduler>
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ef 90       	pop	r14
    154e:	df 90       	pop	r13
    1550:	cf 90       	pop	r12
    1552:	08 95       	ret

Disassembly of section .text.vTaskSuspendAll:

0000187e <vTaskSuspendAll>:
    187e:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
    1882:	8f 5f       	subi	r24, 0xFF	; 255
    1884:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <uxSchedulerSuspended>
    1888:	08 95       	ret

Disassembly of section .text.uxTaskGetNumberOfTasks:

000018a6 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
    18a6:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
}
    18aa:	08 95       	ret

Disassembly of section .text.xTaskIncrementTick:

000000ce <xTaskIncrementTick>:
        xReturn = xTickCount;
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
  da:	81 11       	cpse	r24, r1
  dc:	01 c1       	rjmp	.+514    	; 0x2e0 <xTaskIncrementTick+0x212>
  de:	c0 91 99 06 	lds	r28, 0x0699	; 0x800699 <xTickCount>
  e2:	d0 91 9a 06 	lds	r29, 0x069A	; 0x80069a <xTickCount+0x1>
  e6:	8e 01       	movw	r16, r28
  e8:	0f 5f       	subi	r16, 0xFF	; 255
  ea:	1f 4f       	sbci	r17, 0xFF	; 255
  ec:	10 93 9a 06 	sts	0x069A, r17	; 0x80069a <xTickCount+0x1>
  f0:	00 93 99 06 	sts	0x0699, r16	; 0x800699 <xTickCount>
  f4:	01 15       	cp	r16, r1
  f6:	11 05       	cpc	r17, r1
  f8:	b9 f4       	brne	.+46     	; 0x128 <xTaskIncrementTick+0x5a>
  fa:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <pxDelayedTaskList>
  fe:	90 91 9e 06 	lds	r25, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
 102:	20 91 9b 06 	lds	r18, 0x069B	; 0x80069b <pxOverflowDelayedTaskList>
 106:	30 91 9c 06 	lds	r19, 0x069C	; 0x80069c <pxOverflowDelayedTaskList+0x1>
 10a:	30 93 9e 06 	sts	0x069E, r19	; 0x80069e <pxDelayedTaskList+0x1>
 10e:	20 93 9d 06 	sts	0x069D, r18	; 0x80069d <pxDelayedTaskList>
 112:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <pxOverflowDelayedTaskList+0x1>
 116:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <pxOverflowDelayedTaskList>
 11a:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <xNumOfOverflows>
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <xNumOfOverflows>
 124:	0e 94 34 0b 	call	0x1668	; 0x1668 <prvResetNextTaskUnblockTime>
 128:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <xNextTaskUnblockTime>
 12c:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <xNextTaskUnblockTime+0x1>
 130:	08 17       	cp	r16, r24
 132:	19 07       	cpc	r17, r25
 134:	20 f4       	brcc	.+8      	; 0x13e <xTaskIncrementTick+0x70>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	b8 c0       	rjmp	.+368    	; 0x2aa <xTaskIncrementTick+0x1dc>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	01 c0       	rjmp	.+2      	; 0x140 <xTaskIncrementTick+0x72>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <pxDelayedTaskList>
 144:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
 148:	90 81       	ld	r25, Z
 14a:	91 11       	cpse	r25, r1
 14c:	07 c0       	rjmp	.+14     	; 0x15c <xTaskIncrementTick+0x8e>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	3f ef       	ldi	r19, 0xFF	; 255
 152:	30 93 96 06 	sts	0x0696, r19	; 0x800696 <xNextTaskUnblockTime+0x1>
 156:	20 93 95 06 	sts	0x0695, r18	; 0x800695 <xNextTaskUnblockTime>
 15a:	a7 c0       	rjmp	.+334    	; 0x2aa <xTaskIncrementTick+0x1dc>
 15c:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <pxDelayedTaskList>
 160:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
 164:	05 80       	ldd	r0, Z+5	; 0x05
 166:	f6 81       	ldd	r31, Z+6	; 0x06
 168:	e0 2d       	mov	r30, r0
 16a:	06 80       	ldd	r0, Z+6	; 0x06
 16c:	f7 81       	ldd	r31, Z+7	; 0x07
 16e:	e0 2d       	mov	r30, r0
 170:	22 81       	ldd	r18, Z+2	; 0x02
 172:	33 81       	ldd	r19, Z+3	; 0x03
 174:	02 17       	cp	r16, r18
 176:	13 07       	cpc	r17, r19
 178:	28 f4       	brcc	.+10     	; 0x184 <xTaskIncrementTick+0xb6>
 17a:	30 93 96 06 	sts	0x0696, r19	; 0x800696 <xNextTaskUnblockTime+0x1>
 17e:	20 93 95 06 	sts	0x0695, r18	; 0x800695 <xNextTaskUnblockTime>
 182:	93 c0       	rjmp	.+294    	; 0x2aa <xTaskIncrementTick+0x1dc>
 184:	a2 85       	ldd	r26, Z+10	; 0x0a
 186:	b3 85       	ldd	r27, Z+11	; 0x0b
 188:	24 81       	ldd	r18, Z+4	; 0x04
 18a:	35 81       	ldd	r19, Z+5	; 0x05
 18c:	46 81       	ldd	r20, Z+6	; 0x06
 18e:	57 81       	ldd	r21, Z+7	; 0x07
 190:	e9 01       	movw	r28, r18
 192:	5d 83       	std	Y+5, r21	; 0x05
 194:	4c 83       	std	Y+4, r20	; 0x04
 196:	26 81       	ldd	r18, Z+6	; 0x06
 198:	37 81       	ldd	r19, Z+7	; 0x07
 19a:	44 81       	ldd	r20, Z+4	; 0x04
 19c:	55 81       	ldd	r21, Z+5	; 0x05
 19e:	e9 01       	movw	r28, r18
 1a0:	5b 83       	std	Y+3, r21	; 0x03
 1a2:	4a 83       	std	Y+2, r20	; 0x02
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	2d 91       	ld	r18, X+
 1a8:	3c 91       	ld	r19, X
 1aa:	12 97       	sbiw	r26, 0x02	; 2
 1ac:	af 01       	movw	r20, r30
 1ae:	4e 5f       	subi	r20, 0xFE	; 254
 1b0:	5f 4f       	sbci	r21, 0xFF	; 255
 1b2:	24 17       	cp	r18, r20
 1b4:	35 07       	cpc	r19, r21
 1b6:	31 f4       	brne	.+12     	; 0x1c4 <xTaskIncrementTick+0xf6>
 1b8:	26 81       	ldd	r18, Z+6	; 0x06
 1ba:	37 81       	ldd	r19, Z+7	; 0x07
 1bc:	12 96       	adiw	r26, 0x02	; 2
 1be:	3c 93       	st	X, r19
 1c0:	2e 93       	st	-X, r18
 1c2:	11 97       	sbiw	r26, 0x01	; 1
 1c4:	13 86       	std	Z+11, r1	; 0x0b
 1c6:	12 86       	std	Z+10, r1	; 0x0a
 1c8:	9c 91       	ld	r25, X
 1ca:	91 50       	subi	r25, 0x01	; 1
 1cc:	9c 93       	st	X, r25
 1ce:	a4 89       	ldd	r26, Z+20	; 0x14
 1d0:	b5 89       	ldd	r27, Z+21	; 0x15
 1d2:	10 97       	sbiw	r26, 0x00	; 0
 1d4:	19 f1       	breq	.+70     	; 0x21c <xTaskIncrementTick+0x14e>
 1d6:	26 85       	ldd	r18, Z+14	; 0x0e
 1d8:	37 85       	ldd	r19, Z+15	; 0x0f
 1da:	60 89       	ldd	r22, Z+16	; 0x10
 1dc:	71 89       	ldd	r23, Z+17	; 0x11
 1de:	e9 01       	movw	r28, r18
 1e0:	7d 83       	std	Y+5, r23	; 0x05
 1e2:	6c 83       	std	Y+4, r22	; 0x04
 1e4:	20 89       	ldd	r18, Z+16	; 0x10
 1e6:	31 89       	ldd	r19, Z+17	; 0x11
 1e8:	66 85       	ldd	r22, Z+14	; 0x0e
 1ea:	77 85       	ldd	r23, Z+15	; 0x0f
 1ec:	e9 01       	movw	r28, r18
 1ee:	7b 83       	std	Y+3, r23	; 0x03
 1f0:	6a 83       	std	Y+2, r22	; 0x02
 1f2:	11 96       	adiw	r26, 0x01	; 1
 1f4:	6d 91       	ld	r22, X+
 1f6:	7c 91       	ld	r23, X
 1f8:	12 97       	sbiw	r26, 0x02	; 2
 1fa:	9f 01       	movw	r18, r30
 1fc:	24 5f       	subi	r18, 0xF4	; 244
 1fe:	3f 4f       	sbci	r19, 0xFF	; 255
 200:	62 17       	cp	r22, r18
 202:	73 07       	cpc	r23, r19
 204:	31 f4       	brne	.+12     	; 0x212 <xTaskIncrementTick+0x144>
 206:	20 89       	ldd	r18, Z+16	; 0x10
 208:	31 89       	ldd	r19, Z+17	; 0x11
 20a:	12 96       	adiw	r26, 0x02	; 2
 20c:	3c 93       	st	X, r19
 20e:	2e 93       	st	-X, r18
 210:	11 97       	sbiw	r26, 0x01	; 1
 212:	15 8a       	std	Z+21, r1	; 0x15
 214:	14 8a       	std	Z+20, r1	; 0x14
 216:	9c 91       	ld	r25, X
 218:	91 50       	subi	r25, 0x01	; 1
 21a:	9c 93       	st	X, r25
 21c:	26 89       	ldd	r18, Z+22	; 0x16
 21e:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 222:	92 17       	cp	r25, r18
 224:	10 f4       	brcc	.+4      	; 0x22a <xTaskIncrementTick+0x15c>
 226:	20 93 a6 06 	sts	0x06A6, r18	; 0x8006a6 <uxTopReadyPriority>
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	d9 01       	movw	r26, r18
 22e:	aa 0f       	add	r26, r26
 230:	bb 1f       	adc	r27, r27
 232:	aa 0f       	add	r26, r26
 234:	bb 1f       	adc	r27, r27
 236:	aa 0f       	add	r26, r26
 238:	bb 1f       	adc	r27, r27
 23a:	2a 0f       	add	r18, r26
 23c:	3b 1f       	adc	r19, r27
 23e:	d9 01       	movw	r26, r18
 240:	a2 5c       	subi	r26, 0xC2	; 194
 242:	b9 4f       	sbci	r27, 0xF9	; 249
 244:	11 96       	adiw	r26, 0x01	; 1
 246:	0d 90       	ld	r0, X+
 248:	bc 91       	ld	r27, X
 24a:	a0 2d       	mov	r26, r0
 24c:	b5 83       	std	Z+5, r27	; 0x05
 24e:	a4 83       	std	Z+4, r26	; 0x04
 250:	14 96       	adiw	r26, 0x04	; 4
 252:	2d 91       	ld	r18, X+
 254:	3c 91       	ld	r19, X
 256:	15 97       	sbiw	r26, 0x05	; 5
 258:	37 83       	std	Z+7, r19	; 0x07
 25a:	26 83       	std	Z+6, r18	; 0x06
 25c:	14 96       	adiw	r26, 0x04	; 4
 25e:	2d 91       	ld	r18, X+
 260:	3c 91       	ld	r19, X
 262:	15 97       	sbiw	r26, 0x05	; 5
 264:	e9 01       	movw	r28, r18
 266:	5b 83       	std	Y+3, r21	; 0x03
 268:	4a 83       	std	Y+2, r20	; 0x02
 26a:	15 96       	adiw	r26, 0x05	; 5
 26c:	5c 93       	st	X, r21
 26e:	4e 93       	st	-X, r20
 270:	14 97       	sbiw	r26, 0x04	; 4
 272:	a6 89       	ldd	r26, Z+22	; 0x16
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	9d 01       	movw	r18, r26
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	22 0f       	add	r18, r18
 27e:	33 1f       	adc	r19, r19
 280:	22 0f       	add	r18, r18
 282:	33 1f       	adc	r19, r19
 284:	a2 0f       	add	r26, r18
 286:	b3 1f       	adc	r27, r19
 288:	a2 5c       	subi	r26, 0xC2	; 194
 28a:	b9 4f       	sbci	r27, 0xF9	; 249
 28c:	b3 87       	std	Z+11, r27	; 0x0b
 28e:	a2 87       	std	Z+10, r26	; 0x0a
 290:	9c 91       	ld	r25, X
 292:	9f 5f       	subi	r25, 0xFF	; 255
 294:	9c 93       	st	X, r25
 296:	26 89       	ldd	r18, Z+22	; 0x16
 298:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 29c:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 2a0:	96 89       	ldd	r25, Z+22	; 0x16
 2a2:	92 17       	cp	r25, r18
 2a4:	08 f4       	brcc	.+2      	; 0x2a8 <xTaskIncrementTick+0x1da>
 2a6:	49 cf       	rjmp	.-366    	; 0x13a <xTaskIncrementTick+0x6c>
 2a8:	4b cf       	rjmp	.-362    	; 0x140 <xTaskIncrementTick+0x72>
 2aa:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 2ae:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 2b2:	26 89       	ldd	r18, Z+22	; 0x16
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	f9 01       	movw	r30, r18
 2b8:	ee 0f       	add	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	ee 0f       	add	r30, r30
 2be:	ff 1f       	adc	r31, r31
 2c0:	ee 0f       	add	r30, r30
 2c2:	ff 1f       	adc	r31, r31
 2c4:	2e 0f       	add	r18, r30
 2c6:	3f 1f       	adc	r19, r31
 2c8:	f9 01       	movw	r30, r18
 2ca:	e2 5c       	subi	r30, 0xC2	; 194
 2cc:	f9 4f       	sbci	r31, 0xF9	; 249
 2ce:	90 81       	ld	r25, Z
 2d0:	92 30       	cpi	r25, 0x02	; 2
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <xTaskIncrementTick+0x208>
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <xYieldPending>
 2da:	91 11       	cpse	r25, r1
 2dc:	0c c0       	rjmp	.+24     	; 0x2f6 <xTaskIncrementTick+0x228>
 2de:	0c c0       	rjmp	.+24     	; 0x2f8 <xTaskIncrementTick+0x22a>
 2e0:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <xPendedTicks>
 2e4:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <xPendedTicks+0x1>
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	90 93 98 06 	sts	0x0698, r25	; 0x800698 <xPendedTicks+0x1>
 2ee:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <xPendedTicks>
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <xTaskIncrementTick+0x22a>
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	08 95       	ret

Disassembly of section .text.xTaskResumeAll:

00000302 <xTaskResumeAll>:
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	0f 92       	push	r0
 30c:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
 310:	81 50       	subi	r24, 0x01	; 1
 312:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <uxSchedulerSuspended>
 316:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
 31a:	81 11       	cpse	r24, r1
 31c:	bf c0       	rjmp	.+382    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 31e:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
 322:	81 11       	cpse	r24, r1
 324:	96 c0       	rjmp	.+300    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 326:	bd c0       	rjmp	.+378    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 328:	e0 91 79 06 	lds	r30, 0x0679	; 0x800679 <xPendingReadyList+0x5>
 32c:	f0 91 7a 06 	lds	r31, 0x067A	; 0x80067a <xPendingReadyList+0x6>
 330:	06 80       	ldd	r0, Z+6	; 0x06
 332:	f7 81       	ldd	r31, Z+7	; 0x07
 334:	e0 2d       	mov	r30, r0
 336:	a4 89       	ldd	r26, Z+20	; 0x14
 338:	b5 89       	ldd	r27, Z+21	; 0x15
 33a:	c6 85       	ldd	r28, Z+14	; 0x0e
 33c:	d7 85       	ldd	r29, Z+15	; 0x0f
 33e:	80 89       	ldd	r24, Z+16	; 0x10
 340:	91 89       	ldd	r25, Z+17	; 0x11
 342:	9d 83       	std	Y+5, r25	; 0x05
 344:	8c 83       	std	Y+4, r24	; 0x04
 346:	c0 89       	ldd	r28, Z+16	; 0x10
 348:	d1 89       	ldd	r29, Z+17	; 0x11
 34a:	86 85       	ldd	r24, Z+14	; 0x0e
 34c:	97 85       	ldd	r25, Z+15	; 0x0f
 34e:	9b 83       	std	Y+3, r25	; 0x03
 350:	8a 83       	std	Y+2, r24	; 0x02
 352:	11 96       	adiw	r26, 0x01	; 1
 354:	2d 91       	ld	r18, X+
 356:	3c 91       	ld	r19, X
 358:	12 97       	sbiw	r26, 0x02	; 2
 35a:	cf 01       	movw	r24, r30
 35c:	0c 96       	adiw	r24, 0x0c	; 12
 35e:	28 17       	cp	r18, r24
 360:	39 07       	cpc	r19, r25
 362:	31 f4       	brne	.+12     	; 0x370 <xTaskResumeAll+0x6e>
 364:	80 89       	ldd	r24, Z+16	; 0x10
 366:	91 89       	ldd	r25, Z+17	; 0x11
 368:	12 96       	adiw	r26, 0x02	; 2
 36a:	9c 93       	st	X, r25
 36c:	8e 93       	st	-X, r24
 36e:	11 97       	sbiw	r26, 0x01	; 1
 370:	15 8a       	std	Z+21, r1	; 0x15
 372:	14 8a       	std	Z+20, r1	; 0x14
 374:	8c 91       	ld	r24, X
 376:	81 50       	subi	r24, 0x01	; 1
 378:	8c 93       	st	X, r24
 37a:	a2 85       	ldd	r26, Z+10	; 0x0a
 37c:	b3 85       	ldd	r27, Z+11	; 0x0b
 37e:	c4 81       	ldd	r28, Z+4	; 0x04
 380:	d5 81       	ldd	r29, Z+5	; 0x05
 382:	86 81       	ldd	r24, Z+6	; 0x06
 384:	97 81       	ldd	r25, Z+7	; 0x07
 386:	9d 83       	std	Y+5, r25	; 0x05
 388:	8c 83       	std	Y+4, r24	; 0x04
 38a:	c6 81       	ldd	r28, Z+6	; 0x06
 38c:	d7 81       	ldd	r29, Z+7	; 0x07
 38e:	84 81       	ldd	r24, Z+4	; 0x04
 390:	95 81       	ldd	r25, Z+5	; 0x05
 392:	9b 83       	std	Y+3, r25	; 0x03
 394:	8a 83       	std	Y+2, r24	; 0x02
 396:	11 96       	adiw	r26, 0x01	; 1
 398:	8d 91       	ld	r24, X+
 39a:	9c 91       	ld	r25, X
 39c:	12 97       	sbiw	r26, 0x02	; 2
 39e:	9f 01       	movw	r18, r30
 3a0:	2e 5f       	subi	r18, 0xFE	; 254
 3a2:	3f 4f       	sbci	r19, 0xFF	; 255
 3a4:	82 17       	cp	r24, r18
 3a6:	93 07       	cpc	r25, r19
 3a8:	31 f4       	brne	.+12     	; 0x3b6 <xTaskResumeAll+0xb4>
 3aa:	86 81       	ldd	r24, Z+6	; 0x06
 3ac:	97 81       	ldd	r25, Z+7	; 0x07
 3ae:	12 96       	adiw	r26, 0x02	; 2
 3b0:	9c 93       	st	X, r25
 3b2:	8e 93       	st	-X, r24
 3b4:	11 97       	sbiw	r26, 0x01	; 1
 3b6:	13 86       	std	Z+11, r1	; 0x0b
 3b8:	12 86       	std	Z+10, r1	; 0x0a
 3ba:	8c 91       	ld	r24, X
 3bc:	81 50       	subi	r24, 0x01	; 1
 3be:	8c 93       	st	X, r24
 3c0:	86 89       	ldd	r24, Z+22	; 0x16
 3c2:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 3c6:	98 17       	cp	r25, r24
 3c8:	10 f4       	brcc	.+4      	; 0x3ce <xTaskResumeAll+0xcc>
 3ca:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <uxTopReadyPriority>
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	dc 01       	movw	r26, r24
 3d2:	aa 0f       	add	r26, r26
 3d4:	bb 1f       	adc	r27, r27
 3d6:	aa 0f       	add	r26, r26
 3d8:	bb 1f       	adc	r27, r27
 3da:	aa 0f       	add	r26, r26
 3dc:	bb 1f       	adc	r27, r27
 3de:	8a 0f       	add	r24, r26
 3e0:	9b 1f       	adc	r25, r27
 3e2:	dc 01       	movw	r26, r24
 3e4:	a2 5c       	subi	r26, 0xC2	; 194
 3e6:	b9 4f       	sbci	r27, 0xF9	; 249
 3e8:	11 96       	adiw	r26, 0x01	; 1
 3ea:	0d 90       	ld	r0, X+
 3ec:	bc 91       	ld	r27, X
 3ee:	a0 2d       	mov	r26, r0
 3f0:	b5 83       	std	Z+5, r27	; 0x05
 3f2:	a4 83       	std	Z+4, r26	; 0x04
 3f4:	14 96       	adiw	r26, 0x04	; 4
 3f6:	8d 91       	ld	r24, X+
 3f8:	9c 91       	ld	r25, X
 3fa:	15 97       	sbiw	r26, 0x05	; 5
 3fc:	97 83       	std	Z+7, r25	; 0x07
 3fe:	86 83       	std	Z+6, r24	; 0x06
 400:	14 96       	adiw	r26, 0x04	; 4
 402:	cd 91       	ld	r28, X+
 404:	dc 91       	ld	r29, X
 406:	15 97       	sbiw	r26, 0x05	; 5
 408:	3b 83       	std	Y+3, r19	; 0x03
 40a:	2a 83       	std	Y+2, r18	; 0x02
 40c:	15 96       	adiw	r26, 0x05	; 5
 40e:	3c 93       	st	X, r19
 410:	2e 93       	st	-X, r18
 412:	14 97       	sbiw	r26, 0x04	; 4
 414:	a6 89       	ldd	r26, Z+22	; 0x16
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	cd 01       	movw	r24, r26
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	a8 0f       	add	r26, r24
 428:	b9 1f       	adc	r27, r25
 42a:	a2 5c       	subi	r26, 0xC2	; 194
 42c:	b9 4f       	sbci	r27, 0xF9	; 249
 42e:	b3 87       	std	Z+11, r27	; 0x0b
 430:	a2 87       	std	Z+10, r26	; 0x0a
 432:	8c 91       	ld	r24, X
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	8c 93       	st	X, r24
 438:	96 89       	ldd	r25, Z+22	; 0x16
 43a:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 43e:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 442:	56 96       	adiw	r26, 0x16	; 22
 444:	8c 91       	ld	r24, X
 446:	98 17       	cp	r25, r24
 448:	30 f0       	brcs	.+12     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
 450:	02 c0       	rjmp	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 452:	e0 e0       	ldi	r30, 0x00	; 0
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <xPendingReadyList>
 45a:	81 11       	cpse	r24, r1
 45c:	65 cf       	rjmp	.-310    	; 0x328 <xTaskResumeAll+0x26>
 45e:	ef 2b       	or	r30, r31
 460:	11 f0       	breq	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	0e 94 34 0b 	call	0x1668	; 0x1668 <prvResetNextTaskUnblockTime>
 466:	c0 91 97 06 	lds	r28, 0x0697	; 0x800697 <xPendedTicks>
 46a:	d0 91 98 06 	lds	r29, 0x0698	; 0x800698 <xPendedTicks+0x1>
 46e:	20 97       	sbiw	r28, 0x00	; 0
 470:	69 f0       	breq	.+26     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 472:	0e 94 67 00 	call	0xce	; 0xce <xTaskIncrementTick>
 476:	88 23       	and	r24, r24
 478:	19 f0       	breq	.+6      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
 480:	21 97       	sbiw	r28, 0x01	; 1
 482:	b9 f7       	brne	.-18     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 484:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <xPendedTicks+0x1>
 488:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <xPendedTicks>
 48c:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <xYieldPending>
 490:	88 23       	and	r24, r24
 492:	31 f0       	breq	.+12     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 494:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vPortYield>
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

Disassembly of section .text.vTaskDelay:

00001766 <vTaskDelay>:
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	ec 01       	movw	r28, r24
    176c:	89 2b       	or	r24, r25
    176e:	49 f0       	breq	.+18     	; 0x1782 <vTaskDelay+0x1c>
    1770:	0e 94 3f 0c 	call	0x187e	; 0x187e <vTaskSuspendAll>
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	ce 01       	movw	r24, r28
    1778:	0e 94 c2 03 	call	0x784	; 0x784 <prvAddCurrentTaskToDelayedList>
    177c:	0e 94 81 01 	call	0x302	; 0x302 <xTaskResumeAll>
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <vTaskDelay+0x1e>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	81 11       	cpse	r24, r1
    1786:	02 c0       	rjmp	.+4      	; 0x178c <vTaskDelay+0x26>
    1788:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vPortYield>
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

Disassembly of section .text.vTaskSwitchContext:

00000e4c <vTaskSwitchContext>:
 e4c:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
 e50:	88 23       	and	r24, r24
 e52:	21 f0       	breq	.+8      	; 0xe5c <vTaskSwitchContext+0x10>
 e54:	81 e0       	ldi	r24, 0x01	; 1
 e56:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
 e5a:	08 95       	ret
 e5c:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <xYieldPending>
 e60:	20 91 a6 06 	lds	r18, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 e64:	01 c0       	rjmp	.+2      	; 0xe68 <vTaskSwitchContext+0x1c>
 e66:	21 50       	subi	r18, 0x01	; 1
 e68:	82 2f       	mov	r24, r18
 e6a:	90 e0       	ldi	r25, 0x00	; 0
 e6c:	fc 01       	movw	r30, r24
 e6e:	ee 0f       	add	r30, r30
 e70:	ff 1f       	adc	r31, r31
 e72:	ee 0f       	add	r30, r30
 e74:	ff 1f       	adc	r31, r31
 e76:	ee 0f       	add	r30, r30
 e78:	ff 1f       	adc	r31, r31
 e7a:	e8 0f       	add	r30, r24
 e7c:	f9 1f       	adc	r31, r25
 e7e:	e2 5c       	subi	r30, 0xC2	; 194
 e80:	f9 4f       	sbci	r31, 0xF9	; 249
 e82:	30 81       	ld	r19, Z
 e84:	33 23       	and	r19, r19
 e86:	79 f3       	breq	.-34     	; 0xe66 <vTaskSwitchContext+0x1a>
 e88:	ac 01       	movw	r20, r24
 e8a:	44 0f       	add	r20, r20
 e8c:	55 1f       	adc	r21, r21
 e8e:	44 0f       	add	r20, r20
 e90:	55 1f       	adc	r21, r21
 e92:	44 0f       	add	r20, r20
 e94:	55 1f       	adc	r21, r21
 e96:	48 0f       	add	r20, r24
 e98:	59 1f       	adc	r21, r25
 e9a:	df 01       	movw	r26, r30
 e9c:	01 80       	ldd	r0, Z+1	; 0x01
 e9e:	f2 81       	ldd	r31, Z+2	; 0x02
 ea0:	e0 2d       	mov	r30, r0
 ea2:	02 80       	ldd	r0, Z+2	; 0x02
 ea4:	f3 81       	ldd	r31, Z+3	; 0x03
 ea6:	e0 2d       	mov	r30, r0
 ea8:	12 96       	adiw	r26, 0x02	; 2
 eaa:	fc 93       	st	X, r31
 eac:	ee 93       	st	-X, r30
 eae:	11 97       	sbiw	r26, 0x01	; 1
 eb0:	4f 5b       	subi	r20, 0xBF	; 191
 eb2:	59 4f       	sbci	r21, 0xF9	; 249
 eb4:	e4 17       	cp	r30, r20
 eb6:	f5 07       	cpc	r31, r21
 eb8:	29 f4       	brne	.+10     	; 0xec4 <vTaskSwitchContext+0x78>
 eba:	42 81       	ldd	r20, Z+2	; 0x02
 ebc:	53 81       	ldd	r21, Z+3	; 0x03
 ebe:	fd 01       	movw	r30, r26
 ec0:	52 83       	std	Z+2, r21	; 0x02
 ec2:	41 83       	std	Z+1, r20	; 0x01
 ec4:	fc 01       	movw	r30, r24
 ec6:	ee 0f       	add	r30, r30
 ec8:	ff 1f       	adc	r31, r31
 eca:	ee 0f       	add	r30, r30
 ecc:	ff 1f       	adc	r31, r31
 ece:	ee 0f       	add	r30, r30
 ed0:	ff 1f       	adc	r31, r31
 ed2:	8e 0f       	add	r24, r30
 ed4:	9f 1f       	adc	r25, r31
 ed6:	fc 01       	movw	r30, r24
 ed8:	e2 5c       	subi	r30, 0xC2	; 194
 eda:	f9 4f       	sbci	r31, 0xF9	; 249
 edc:	01 80       	ldd	r0, Z+1	; 0x01
 ede:	f2 81       	ldd	r31, Z+2	; 0x02
 ee0:	e0 2d       	mov	r30, r0
 ee2:	86 81       	ldd	r24, Z+6	; 0x06
 ee4:	97 81       	ldd	r25, Z+7	; 0x07
 ee6:	90 93 a0 06 	sts	0x06A0, r25	; 0x8006a0 <pxCurrentTCB+0x1>
 eea:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <pxCurrentTCB>
 eee:	20 93 a6 06 	sts	0x06A6, r18	; 0x8006a6 <uxTopReadyPriority>
 ef2:	08 95       	ret

Disassembly of section .text.vTaskPlaceOnEventList:

000017ba <vTaskPlaceOnEventList>:
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	eb 01       	movw	r28, r22
    17c0:	60 91 9f 06 	lds	r22, 0x069F	; 0x80069f <pxCurrentTCB>
    17c4:	70 91 a0 06 	lds	r23, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
    17c8:	64 5f       	subi	r22, 0xF4	; 244
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	0e 94 1b 0a 	call	0x1436	; 0x1436 <vListInsert>
    17d0:	61 e0       	ldi	r22, 0x01	; 1
    17d2:	ce 01       	movw	r24, r28
    17d4:	0e 94 c2 03 	call	0x784	; 0x784 <prvAddCurrentTaskToDelayedList>
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	08 95       	ret

Disassembly of section .text.xTaskRemoveFromEventList:

000004ac <xTaskRemoveFromEventList>:
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	a8 2f       	mov	r26, r24
 4b2:	cb 01       	movw	r24, r22
 4b4:	05 96       	adiw	r24, 0x05	; 5
 4b6:	a1 1d       	adc	r26, r1
 4b8:	fc 01       	movw	r30, r24
 4ba:	5a 2f       	mov	r21, r26
 4bc:	0e 94 37 0c 	call	0x186e	; 0x186e <__xload_2>
 4c0:	db 01       	movw	r26, r22
 4c2:	16 96       	adiw	r26, 0x06	; 6
 4c4:	ed 91       	ld	r30, X+
 4c6:	fc 91       	ld	r31, X
 4c8:	17 97       	sbiw	r26, 0x07	; 7
 4ca:	a4 89       	ldd	r26, Z+20	; 0x14
 4cc:	b5 89       	ldd	r27, Z+21	; 0x15
 4ce:	c6 85       	ldd	r28, Z+14	; 0x0e
 4d0:	d7 85       	ldd	r29, Z+15	; 0x0f
 4d2:	80 89       	ldd	r24, Z+16	; 0x10
 4d4:	91 89       	ldd	r25, Z+17	; 0x11
 4d6:	9d 83       	std	Y+5, r25	; 0x05
 4d8:	8c 83       	std	Y+4, r24	; 0x04
 4da:	c0 89       	ldd	r28, Z+16	; 0x10
 4dc:	d1 89       	ldd	r29, Z+17	; 0x11
 4de:	86 85       	ldd	r24, Z+14	; 0x0e
 4e0:	97 85       	ldd	r25, Z+15	; 0x0f
 4e2:	9b 83       	std	Y+3, r25	; 0x03
 4e4:	8a 83       	std	Y+2, r24	; 0x02
 4e6:	11 96       	adiw	r26, 0x01	; 1
 4e8:	8d 91       	ld	r24, X+
 4ea:	9c 91       	ld	r25, X
 4ec:	12 97       	sbiw	r26, 0x02	; 2
 4ee:	9f 01       	movw	r18, r30
 4f0:	24 5f       	subi	r18, 0xF4	; 244
 4f2:	3f 4f       	sbci	r19, 0xFF	; 255
 4f4:	82 17       	cp	r24, r18
 4f6:	93 07       	cpc	r25, r19
 4f8:	31 f4       	brne	.+12     	; 0x506 <xTaskRemoveFromEventList+0x5a>
 4fa:	80 89       	ldd	r24, Z+16	; 0x10
 4fc:	91 89       	ldd	r25, Z+17	; 0x11
 4fe:	12 96       	adiw	r26, 0x02	; 2
 500:	9c 93       	st	X, r25
 502:	8e 93       	st	-X, r24
 504:	11 97       	sbiw	r26, 0x01	; 1
 506:	15 8a       	std	Z+21, r1	; 0x15
 508:	14 8a       	std	Z+20, r1	; 0x14
 50a:	8c 91       	ld	r24, X
 50c:	81 50       	subi	r24, 0x01	; 1
 50e:	8c 93       	st	X, r24
 510:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
 514:	81 11       	cpse	r24, r1
 516:	60 c0       	rjmp	.+192    	; 0x5d8 <xTaskRemoveFromEventList+0x12c>
 518:	a2 85       	ldd	r26, Z+10	; 0x0a
 51a:	b3 85       	ldd	r27, Z+11	; 0x0b
 51c:	c4 81       	ldd	r28, Z+4	; 0x04
 51e:	d5 81       	ldd	r29, Z+5	; 0x05
 520:	86 81       	ldd	r24, Z+6	; 0x06
 522:	97 81       	ldd	r25, Z+7	; 0x07
 524:	9d 83       	std	Y+5, r25	; 0x05
 526:	8c 83       	std	Y+4, r24	; 0x04
 528:	c6 81       	ldd	r28, Z+6	; 0x06
 52a:	d7 81       	ldd	r29, Z+7	; 0x07
 52c:	84 81       	ldd	r24, Z+4	; 0x04
 52e:	95 81       	ldd	r25, Z+5	; 0x05
 530:	9b 83       	std	Y+3, r25	; 0x03
 532:	8a 83       	std	Y+2, r24	; 0x02
 534:	11 96       	adiw	r26, 0x01	; 1
 536:	8d 91       	ld	r24, X+
 538:	9c 91       	ld	r25, X
 53a:	12 97       	sbiw	r26, 0x02	; 2
 53c:	9f 01       	movw	r18, r30
 53e:	2e 5f       	subi	r18, 0xFE	; 254
 540:	3f 4f       	sbci	r19, 0xFF	; 255
 542:	82 17       	cp	r24, r18
 544:	93 07       	cpc	r25, r19
 546:	31 f4       	brne	.+12     	; 0x554 <xTaskRemoveFromEventList+0xa8>
 548:	86 81       	ldd	r24, Z+6	; 0x06
 54a:	97 81       	ldd	r25, Z+7	; 0x07
 54c:	12 96       	adiw	r26, 0x02	; 2
 54e:	9c 93       	st	X, r25
 550:	8e 93       	st	-X, r24
 552:	11 97       	sbiw	r26, 0x01	; 1
 554:	13 86       	std	Z+11, r1	; 0x0b
 556:	12 86       	std	Z+10, r1	; 0x0a
 558:	8c 91       	ld	r24, X
 55a:	81 50       	subi	r24, 0x01	; 1
 55c:	8c 93       	st	X, r24
 55e:	86 89       	ldd	r24, Z+22	; 0x16
 560:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 564:	98 17       	cp	r25, r24
 566:	10 f4       	brcc	.+4      	; 0x56c <xTaskRemoveFromEventList+0xc0>
 568:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <uxTopReadyPriority>
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	dc 01       	movw	r26, r24
 570:	aa 0f       	add	r26, r26
 572:	bb 1f       	adc	r27, r27
 574:	aa 0f       	add	r26, r26
 576:	bb 1f       	adc	r27, r27
 578:	aa 0f       	add	r26, r26
 57a:	bb 1f       	adc	r27, r27
 57c:	8a 0f       	add	r24, r26
 57e:	9b 1f       	adc	r25, r27
 580:	dc 01       	movw	r26, r24
 582:	a2 5c       	subi	r26, 0xC2	; 194
 584:	b9 4f       	sbci	r27, 0xF9	; 249
 586:	11 96       	adiw	r26, 0x01	; 1
 588:	0d 90       	ld	r0, X+
 58a:	bc 91       	ld	r27, X
 58c:	a0 2d       	mov	r26, r0
 58e:	b5 83       	std	Z+5, r27	; 0x05
 590:	a4 83       	std	Z+4, r26	; 0x04
 592:	14 96       	adiw	r26, 0x04	; 4
 594:	8d 91       	ld	r24, X+
 596:	9c 91       	ld	r25, X
 598:	15 97       	sbiw	r26, 0x05	; 5
 59a:	97 83       	std	Z+7, r25	; 0x07
 59c:	86 83       	std	Z+6, r24	; 0x06
 59e:	14 96       	adiw	r26, 0x04	; 4
 5a0:	cd 91       	ld	r28, X+
 5a2:	dc 91       	ld	r29, X
 5a4:	15 97       	sbiw	r26, 0x05	; 5
 5a6:	3b 83       	std	Y+3, r19	; 0x03
 5a8:	2a 83       	std	Y+2, r18	; 0x02
 5aa:	15 96       	adiw	r26, 0x05	; 5
 5ac:	3c 93       	st	X, r19
 5ae:	2e 93       	st	-X, r18
 5b0:	14 97       	sbiw	r26, 0x04	; 4
 5b2:	a6 89       	ldd	r26, Z+22	; 0x16
 5b4:	b0 e0       	ldi	r27, 0x00	; 0
 5b6:	cd 01       	movw	r24, r26
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	a8 0f       	add	r26, r24
 5c6:	b9 1f       	adc	r27, r25
 5c8:	a2 5c       	subi	r26, 0xC2	; 194
 5ca:	b9 4f       	sbci	r27, 0xF9	; 249
 5cc:	b3 87       	std	Z+11, r27	; 0x0b
 5ce:	a2 87       	std	Z+10, r26	; 0x0a
 5d0:	8c 91       	ld	r24, X
 5d2:	8f 5f       	subi	r24, 0xFF	; 255
 5d4:	8c 93       	st	X, r24
 5d6:	1c c0       	rjmp	.+56     	; 0x610 <xTaskRemoveFromEventList+0x164>
 5d8:	44 e7       	ldi	r20, 0x74	; 116
 5da:	56 e0       	ldi	r21, 0x06	; 6
 5dc:	da 01       	movw	r26, r20
 5de:	11 96       	adiw	r26, 0x01	; 1
 5e0:	cd 91       	ld	r28, X+
 5e2:	dc 91       	ld	r29, X
 5e4:	12 97       	sbiw	r26, 0x02	; 2
 5e6:	d7 87       	std	Z+15, r29	; 0x0f
 5e8:	c6 87       	std	Z+14, r28	; 0x0e
 5ea:	8c 81       	ldd	r24, Y+4	; 0x04
 5ec:	9d 81       	ldd	r25, Y+5	; 0x05
 5ee:	91 8b       	std	Z+17, r25	; 0x11
 5f0:	80 8b       	std	Z+16, r24	; 0x10
 5f2:	8c 81       	ldd	r24, Y+4	; 0x04
 5f4:	9d 81       	ldd	r25, Y+5	; 0x05
 5f6:	dc 01       	movw	r26, r24
 5f8:	13 96       	adiw	r26, 0x03	; 3
 5fa:	3c 93       	st	X, r19
 5fc:	2e 93       	st	-X, r18
 5fe:	12 97       	sbiw	r26, 0x02	; 2
 600:	3d 83       	std	Y+5, r19	; 0x05
 602:	2c 83       	std	Y+4, r18	; 0x04
 604:	55 8b       	std	Z+21, r21	; 0x15
 606:	44 8b       	std	Z+20, r20	; 0x14
 608:	da 01       	movw	r26, r20
 60a:	8c 91       	ld	r24, X
 60c:	8f 5f       	subi	r24, 0xFF	; 255
 60e:	8c 93       	st	X, r24
 610:	96 89       	ldd	r25, Z+22	; 0x16
 612:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 616:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 61a:	86 89       	ldd	r24, Z+22	; 0x16
 61c:	89 17       	cp	r24, r25
 61e:	20 f4       	brcc	.+8      	; 0x628 <xTaskRemoveFromEventList+0x17c>
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
 626:	01 c0       	rjmp	.+2      	; 0x62a <xTaskRemoveFromEventList+0x17e>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

Disassembly of section .text.vTaskInternalSetTimeOutState:

00001830 <vTaskInternalSetTimeOutState>:
    1830:	20 91 a3 06 	lds	r18, 0x06A3	; 0x8006a3 <xNumOfOverflows>
    1834:	fc 01       	movw	r30, r24
    1836:	20 83       	st	Z, r18
    1838:	20 91 99 06 	lds	r18, 0x0699	; 0x800699 <xTickCount>
    183c:	30 91 9a 06 	lds	r19, 0x069A	; 0x80069a <xTickCount+0x1>
    1840:	32 83       	std	Z+2, r19	; 0x02
    1842:	21 83       	std	Z+1, r18	; 0x01
    1844:	08 95       	ret

Disassembly of section .text.xTaskCheckForTimeOut:

0000112a <xTaskCheckForTimeOut>:
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	0f 92       	push	r0
    1136:	e0 91 99 06 	lds	r30, 0x0699	; 0x800699 <xTickCount>
    113a:	f0 91 9a 06 	lds	r31, 0x069A	; 0x80069a <xTickCount+0x1>
    113e:	dc 01       	movw	r26, r24
    1140:	11 96       	adiw	r26, 0x01	; 1
    1142:	4d 91       	ld	r20, X+
    1144:	5c 91       	ld	r21, X
    1146:	12 97       	sbiw	r26, 0x02	; 2
    1148:	df 01       	movw	r26, r30
    114a:	a4 1b       	sub	r26, r20
    114c:	b5 0b       	sbc	r27, r21
    114e:	eb 01       	movw	r28, r22
    1150:	28 81       	ld	r18, Y
    1152:	39 81       	ldd	r19, Y+1	; 0x01
    1154:	2f 3f       	cpi	r18, 0xFF	; 255
    1156:	df ef       	ldi	r29, 0xFF	; 255
    1158:	3d 07       	cpc	r19, r29
    115a:	f9 f0       	breq	.+62     	; 0x119a <xTaskCheckForTimeOut+0x70>
    115c:	ec 01       	movw	r28, r24
    115e:	18 81       	ld	r17, Y
    1160:	c0 91 a3 06 	lds	r28, 0x06A3	; 0x8006a3 <xNumOfOverflows>
    1164:	1c 17       	cp	r17, r28
    1166:	41 f0       	breq	.+16     	; 0x1178 <xTaskCheckForTimeOut+0x4e>
    1168:	e4 17       	cp	r30, r20
    116a:	f5 07       	cpc	r31, r21
    116c:	28 f0       	brcs	.+10     	; 0x1178 <xTaskCheckForTimeOut+0x4e>
    116e:	fb 01       	movw	r30, r22
    1170:	11 82       	std	Z+1, r1	; 0x01
    1172:	10 82       	st	Z, r1
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	12 c0       	rjmp	.+36     	; 0x119c <xTaskCheckForTimeOut+0x72>
    1178:	a2 17       	cp	r26, r18
    117a:	b3 07       	cpc	r27, r19
    117c:	48 f4       	brcc	.+18     	; 0x1190 <xTaskCheckForTimeOut+0x66>
    117e:	fb 01       	movw	r30, r22
    1180:	2a 1b       	sub	r18, r26
    1182:	3b 0b       	sbc	r19, r27
    1184:	31 83       	std	Z+1, r19	; 0x01
    1186:	20 83       	st	Z, r18
    1188:	0e 94 18 0c 	call	0x1830	; 0x1830 <vTaskInternalSetTimeOutState>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	06 c0       	rjmp	.+12     	; 0x119c <xTaskCheckForTimeOut+0x72>
    1190:	db 01       	movw	r26, r22
    1192:	1d 92       	st	X+, r1
    1194:	1c 92       	st	X, r1
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	01 c0       	rjmp	.+2      	; 0x119c <xTaskCheckForTimeOut+0x72>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	08 95       	ret

Disassembly of section .text.vTaskMissedYield:

00001892 <vTaskMissedYield>:
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
    1898:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001792 <__udivmodhi4>:
    1792:	aa 1b       	sub	r26, r26
    1794:	bb 1b       	sub	r27, r27
    1796:	51 e1       	ldi	r21, 0x11	; 17
    1798:	07 c0       	rjmp	.+14     	; 0x17a8 <__udivmodhi4_ep>

0000179a <__udivmodhi4_loop>:
    179a:	aa 1f       	adc	r26, r26
    179c:	bb 1f       	adc	r27, r27
    179e:	a6 17       	cp	r26, r22
    17a0:	b7 07       	cpc	r27, r23
    17a2:	10 f0       	brcs	.+4      	; 0x17a8 <__udivmodhi4_ep>
    17a4:	a6 1b       	sub	r26, r22
    17a6:	b7 0b       	sbc	r27, r23

000017a8 <__udivmodhi4_ep>:
    17a8:	88 1f       	adc	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	5a 95       	dec	r21
    17ae:	a9 f7       	brne	.-22     	; 0x179a <__udivmodhi4_loop>
    17b0:	80 95       	com	r24
    17b2:	90 95       	com	r25
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	08 95       	ret

Disassembly of section .text.libgcc:

0000186e <__xload_2>:
    186e:	57 fd       	sbrc	r21, 7
    1870:	03 c0       	rjmp	.+6      	; 0x1878 <__xload_2+0xa>
    1872:	65 91       	lpm	r22, Z+
    1874:	75 91       	lpm	r23, Z+
    1876:	08 95       	ret
    1878:	61 91       	ld	r22, Z+
    187a:	71 91       	ld	r23, Z+
    187c:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000018b6 <_fini>:
    18b6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000018b8 <__funcs_on_exit>:
    18b8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000018ba <__simulator_exit>:
    18ba:	08 95       	ret

Disassembly of section .text.exit:

00001846 <exit>:
    1846:	ec 01       	movw	r28, r24
    1848:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__funcs_on_exit>
    184c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_fini>
    1850:	ce 01       	movw	r24, r28
    1852:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__simulator_exit>
    1856:	ce 01       	movw	r24, r28
    1858:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_Exit>

Disassembly of section .text.memcpy:

00001706 <memcpy>:
    1706:	cf 92       	push	r12
    1708:	df 92       	push	r13
    170a:	ef 92       	push	r14
    170c:	6a 01       	movw	r12, r20
    170e:	e6 2e       	mov	r14, r22
    1710:	dc 01       	movw	r26, r24
    1712:	28 0f       	add	r18, r24
    1714:	39 1f       	adc	r19, r25
    1716:	a2 17       	cp	r26, r18
    1718:	b3 07       	cpc	r27, r19
    171a:	51 f0       	breq	.+20     	; 0x1730 <memcpy+0x2a>
    171c:	f6 01       	movw	r30, r12
    171e:	44 91       	lpm	r20, Z
    1720:	e7 fc       	sbrc	r14, 7
    1722:	40 81       	ld	r20, Z
    1724:	4d 93       	st	X+, r20
    1726:	4f ef       	ldi	r20, 0xFF	; 255
    1728:	c4 1a       	sub	r12, r20
    172a:	d4 0a       	sbc	r13, r20
    172c:	e4 0a       	sbc	r14, r20
    172e:	f3 cf       	rjmp	.-26     	; 0x1716 <memcpy+0x10>
    1730:	ef 90       	pop	r14
    1732:	df 90       	pop	r13
    1734:	cf 90       	pop	r12
    1736:	08 95       	ret

Disassembly of section .text._Exit:

000018b0 <_Exit>:
    18b0:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
