
Lec8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  000001a8  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  00001736  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000350  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000055e7  00000000  00000000  00001ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000103c  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000219b  00000000  00000000  000080f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a24  00000000  00000000  0000a290  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000698  00000000  00000000  0000acb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003aa9  00000000  00000000  0000b34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000338  00000000  00000000  0000edf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00001632  00001632  00001726  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000f130  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.xEventGroupCreate 00000026  0000155c  0000155c  00001650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.xEventGroupSetBits 000000ee  000007e0  000007e0  000008d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.xEventGroupSync 000000d6  00000b6e  00000b6e  00000c62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.pvPortMalloc 00000074  00001080  00001080  00001174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.vPortFree 00000002  0000163a  0000163a  0000172e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.pucAlignedHeap.2094 00000002  0080068d  0080068d  00001736  2**0
                  ALLOC
 20 .bss.xNextFreeByte 00000002  0080068f  0080068f  00001736  2**0
                  ALLOC
 21 .bss.ucHeap   000005dc  00800060  00800060  00001736  2**0
                  ALLOC
 22 .text.HLCD_vsendData 00000068  00001162  00001162  00001256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.HLCD_vsendCommand 00000068  000011ca  000011ca  000012be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.HLCD_vShowString 00000042  000013ea  000013ea  000014de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.HLCD_vInit 00000076  0000100a  0000100a  000010fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.vListInitialise 0000001c  000015a4  000015a4  00001698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.vListInitialiseItem 00000008  0000161e  0000161e  00001712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.vListInsertEnd 00000042  0000142c  0000142c  00001520  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.vListInsert 00000062  00001232  00001232  00001326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.uxListRemove 0000004e  00001350  00001350  00001444  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.setter1 00000030  000014a6  000014a6  0000159a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.setter2 00000022  00001582  00001582  00001676  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data 00000005  000000b4  000000b4  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .text.setter3 0000002c  00001504  00001504  000015f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.main    00000078  00000f92  00000f92  00001086  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .bss.eHandler 00000002  00800691  00800691  00001736  2**0
                  ALLOC
 37 .text.prvSetupTimerInterrupt 00000012  000015f0  000015f0  000016e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.pxPortInitialiseStack 000000d8  00000a96  00000a96  00000b8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.xPortStartScheduler 0000005e  00001294  00001294  00001388  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.vPortYield 000000b2  00000cfc  00000cfc  00000df0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.vPortYieldFromTick 000000b8  00000c44  00000c44  00000d38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__vector_7 00000006  00001626  00001626  0000171a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.prvResetNextTaskUnblockTime 00000038  0000146e  0000146e  00001562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.prvDeleteTCB 0000001a  000015c0  000015c0  000016b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.prvInitialiseNewTask 000000ea  000008ce  000008ce  000009c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.prvInitialiseTaskLists 0000006e  000010f4  000010f4  000011e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.prvAddNewTaskToReadyList 000000fa  000006e6  000006e6  000007da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.prvCheckTasksWaitingTermination 0000004c  0000139e  0000139e  00001492  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.prvIdleTask 00000006  0000162c  0000162c  00001720  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.prvAddCurrentTaskToDelayedList 00000102  000005e4  000005e4  000006d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.xTaskCreate 000000de  000009b8  000009b8  00000aac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.vTaskDelete 000000b0  00000dae  00000dae  00000ea2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .progmemx.data 00000006  000000ae  000000ae  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 54 .text.vTaskStartScheduler 0000005e  000012f2  000012f2  000013e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.vTaskSuspendAll 0000000c  00001612  00001612  00001706  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.xTaskIncrementTick 00000234  000000ba  000000ba  000001ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.xTaskResumeAll 000001aa  000002ee  000002ee  000003e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.vTaskDelay 0000002c  00001530  00001530  00001624  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.vTaskSwitchContext 000000a8  00000e5e  00000e5e  00000f52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.vTaskPlaceOnUnorderedEventList 0000008c  00000f06  00000f06  00000ffa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.vTaskRemoveFromUnorderedEventList 0000014c  00000498  00000498  0000058c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.uxTaskResetEventItemValue 0000002e  000014d6  000014d6  000015ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .bss.uxSchedulerSuspended 00000001  008006a1  008006a1  00001736  2**0
                  ALLOC
 64 .bss.xIdleTaskHandle 00000002  00800693  00800693  00001736  2**0
                  ALLOC
 65 .bss.xNextTaskUnblockTime 00000002  00800695  00800695  00001736  2**0
                  ALLOC
 66 .bss.uxTaskNumber 00000001  008006a2  008006a2  00001736  2**0
                  ALLOC
 67 .bss.xNumOfOverflows 00000001  008006a3  008006a3  00001736  2**0
                  ALLOC
 68 .bss.xYieldPending 00000001  008006a4  008006a4  00001736  2**0
                  ALLOC
 69 .bss.xPendedTicks 00000002  00800697  00800697  00001736  2**0
                  ALLOC
 70 .bss.xSchedulerRunning 00000001  008006a5  008006a5  00001736  2**0
                  ALLOC
 71 .bss.uxTopReadyPriority 00000001  008006a6  008006a6  00001736  2**0
                  ALLOC
 72 .bss.xTickCount 00000002  00800699  00800699  00001736  2**0
                  ALLOC
 73 .bss.uxCurrentNumberOfTasks 00000001  008006a7  008006a7  00001736  2**0
                  ALLOC
 74 .bss.xSuspendedTaskList 00000009  00800660  00800660  00001736  2**0
                  ALLOC
 75 .bss.uxDeletedTasksWaitingCleanUp 00000001  008006a8  008006a8  00001736  2**0
                  ALLOC
 76 .bss.xTasksWaitingTermination 00000009  00800669  00800669  00001736  2**0
                  ALLOC
 77 .bss.xPendingReadyList 00000009  00800672  00800672  00001736  2**0
                  ALLOC
 78 .bss.pxOverflowDelayedTaskList 00000002  0080069b  0080069b  00001736  2**0
                  ALLOC
 79 .bss.pxDelayedTaskList 00000002  0080069d  0080069d  00001736  2**0
                  ALLOC
 80 .bss.xDelayedTaskList2 00000009  0080067b  0080067b  00001736  2**0
                  ALLOC
 81 .bss.xDelayedTaskList1 00000009  00800684  00800684  00001736  2**0
                  ALLOC
 82 .bss.pxReadyTasksLists 00000024  0080063c  0080063c  00001736  2**0
                  ALLOC
 83 .bss.pxCurrentTCB 00000002  0080069f  0080069f  00001736  2**0
                  ALLOC
 84 .text.libgcc  00000010  00001602  00001602  000016f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__dummy_fini 00000002  0000163c  0000163c  00001730  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__dummy_funcs_on_exit 00000002  0000163e  0000163e  00001732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__dummy_simulator_exit 00000002  00001640  00001640  00001734  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.exit    00000016  000015da  000015da  000016ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text._Exit   00000004  00001636  00001636  0000172a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
   8:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
   c:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  10:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  14:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  18:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  1c:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__vector_7>
  20:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  24:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  28:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  2c:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  30:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  34:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  38:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  3c:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  40:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  44:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  48:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  4c:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>
  50:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	06 a9       	ldd	r16, Z+54	; 0x36
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 c9 07 	call	0xf92	; 0xf92 <main>
  a6:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00001632 <__bad_interrupt>:
    1632:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.xEventGroupCreate:

0000155c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
    1560:	8b e0       	ldi	r24, 0x0B	; 11
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 40 08 	call	0x1080	; 0x1080 <pvPortMalloc>
    1568:	ec 01       	movw	r28, r24

        if( pxEventBits != NULL )
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	31 f0       	breq	.+12     	; 0x157a <xEventGroupCreate+0x1e>
        {
            pxEventBits->uxEventBits = 0;
    156e:	fc 01       	movw	r30, r24
    1570:	11 92       	st	Z+, r1
    1572:	11 92       	st	Z+, r1
    1574:	cf 01       	movw	r24, r30
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    1576:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <vListInitialise>
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
    }
    157a:	ce 01       	movw	r24, r28
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	08 95       	ret

Disassembly of section .text.xEventGroupSetBits:

000007e0 <xEventGroupSetBits>:
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
}
 7e0:	6f 92       	push	r6
 7e2:	7f 92       	push	r7
 7e4:	8f 92       	push	r8
 7e6:	bf 92       	push	r11
 7e8:	cf 92       	push	r12
 7ea:	df 92       	push	r13
 7ec:	ef 92       	push	r14
 7ee:	ff 92       	push	r15
 7f0:	0f 93       	push	r16
 7f2:	1f 93       	push	r17
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	ec 01       	movw	r28, r24
 7fa:	8b 01       	movw	r16, r22
 7fc:	3c 01       	movw	r6, r24
 7fe:	82 e0       	ldi	r24, 0x02	; 2
 800:	68 0e       	add	r6, r24
 802:	71 1c       	adc	r7, r1
 804:	80 e8       	ldi	r24, 0x80	; 128
 806:	88 2e       	mov	r8, r24
 808:	e8 2c       	mov	r14, r8
 80a:	63 01       	movw	r12, r6
 80c:	83 e0       	ldi	r24, 0x03	; 3
 80e:	c8 0e       	add	r12, r24
 810:	d1 1c       	adc	r13, r1
 812:	e1 1c       	adc	r14, r1
 814:	0e 94 09 0b 	call	0x1612	; 0x1612 <vTaskSuspendAll>
 818:	85 e0       	ldi	r24, 0x05	; 5
 81a:	68 0e       	add	r6, r24
 81c:	71 1c       	adc	r7, r1
 81e:	81 1c       	adc	r8, r1
 820:	f3 01       	movw	r30, r6
 822:	58 2d       	mov	r21, r8
 824:	0e 94 01 0b 	call	0x1602	; 0x1602 <__xload_2>
 828:	fb 01       	movw	r30, r22
 82a:	88 81       	ld	r24, Y
 82c:	99 81       	ldd	r25, Y+1	; 0x01
 82e:	08 2b       	or	r16, r24
 830:	19 2b       	or	r17, r25
 832:	19 83       	std	Y+1, r17	; 0x01
 834:	08 83       	st	Y, r16
 836:	00 e0       	ldi	r16, 0x00	; 0
 838:	10 e0       	ldi	r17, 0x00	; 0
 83a:	2a c0       	rjmp	.+84     	; 0x890 <__stack+0x31>
 83c:	b2 80       	ldd	r11, Z+2	; 0x02
 83e:	f3 80       	ldd	r15, Z+3	; 0x03
 840:	80 81       	ld	r24, Z
 842:	91 81       	ldd	r25, Z+1	; 0x01
 844:	9c 01       	movw	r18, r24
 846:	33 27       	eor	r19, r19
 848:	92 fd       	sbrc	r25, 2
 84a:	08 c0       	rjmp	.+16     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 84c:	48 81       	ld	r20, Y
 84e:	59 81       	ldd	r21, Y+1	; 0x01
 850:	42 23       	and	r20, r18
 852:	53 23       	and	r21, r19
 854:	45 2b       	or	r20, r21
 856:	59 f4       	brne	.+22     	; 0x86e <__stack+0xf>
 858:	40 e0       	ldi	r20, 0x00	; 0
 85a:	0c c0       	rjmp	.+24     	; 0x874 <__stack+0x15>
 85c:	48 81       	ld	r20, Y
 85e:	59 81       	ldd	r21, Y+1	; 0x01
 860:	42 23       	and	r20, r18
 862:	53 23       	and	r21, r19
 864:	24 17       	cp	r18, r20
 866:	35 07       	cpc	r19, r21
 868:	21 f0       	breq	.+8      	; 0x872 <__stack+0x13>
 86a:	40 e0       	ldi	r20, 0x00	; 0
 86c:	03 c0       	rjmp	.+6      	; 0x874 <__stack+0x15>
 86e:	41 e0       	ldi	r20, 0x01	; 1
 870:	01 c0       	rjmp	.+2      	; 0x874 <__stack+0x15>
 872:	41 e0       	ldi	r20, 0x01	; 1
 874:	44 23       	and	r20, r20
 876:	51 f0       	breq	.+20     	; 0x88c <__stack+0x2d>
 878:	90 ff       	sbrs	r25, 0
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
 87c:	02 2b       	or	r16, r18
 87e:	13 2b       	or	r17, r19
 880:	68 81       	ld	r22, Y
 882:	79 81       	ldd	r23, Y+1	; 0x01
 884:	72 60       	ori	r23, 0x02	; 2
 886:	cf 01       	movw	r24, r30
 888:	0e 94 4c 02 	call	0x498	; 0x498 <vTaskRemoveFromUnorderedEventList>
 88c:	eb 2d       	mov	r30, r11
 88e:	ff 2d       	mov	r31, r15
 890:	cf 01       	movw	r24, r30
 892:	a0 e8       	ldi	r26, 0x80	; 128
 894:	c8 16       	cp	r12, r24
 896:	d9 06       	cpc	r13, r25
 898:	ea 06       	cpc	r14, r26
 89a:	81 f6       	brne	.-96     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 89c:	00 95       	com	r16
 89e:	10 95       	com	r17
 8a0:	88 81       	ld	r24, Y
 8a2:	99 81       	ldd	r25, Y+1	; 0x01
 8a4:	08 23       	and	r16, r24
 8a6:	19 23       	and	r17, r25
 8a8:	19 83       	std	Y+1, r17	; 0x01
 8aa:	08 83       	st	Y, r16
 8ac:	0e 94 77 01 	call	0x2ee	; 0x2ee <xTaskResumeAll>
 8b0:	88 81       	ld	r24, Y
 8b2:	99 81       	ldd	r25, Y+1	; 0x01
 8b4:	df 91       	pop	r29
 8b6:	cf 91       	pop	r28
 8b8:	1f 91       	pop	r17
 8ba:	0f 91       	pop	r16
 8bc:	ff 90       	pop	r15
 8be:	ef 90       	pop	r14
 8c0:	df 90       	pop	r13
 8c2:	cf 90       	pop	r12
 8c4:	bf 90       	pop	r11
 8c6:	8f 90       	pop	r8
 8c8:	7f 90       	pop	r7
 8ca:	6f 90       	pop	r6
 8cc:	08 95       	ret

Disassembly of section .text.xEventGroupSync:

00000b6e <xEventGroupSync>:
 b6e:	af 92       	push	r10
 b70:	bf 92       	push	r11
 b72:	cf 92       	push	r12
 b74:	df 92       	push	r13
 b76:	ef 92       	push	r14
 b78:	ff 92       	push	r15
 b7a:	0f 93       	push	r16
 b7c:	1f 93       	push	r17
 b7e:	cf 93       	push	r28
 b80:	df 93       	push	r29
 b82:	8c 01       	movw	r16, r24
 b84:	eb 01       	movw	r28, r22
 b86:	7a 01       	movw	r14, r20
 b88:	69 01       	movw	r12, r18
 b8a:	0e 94 09 0b 	call	0x1612	; 0x1612 <vTaskSuspendAll>
 b8e:	f8 01       	movw	r30, r16
 b90:	a0 80       	ld	r10, Z
 b92:	b1 80       	ldd	r11, Z+1	; 0x01
 b94:	be 01       	movw	r22, r28
 b96:	c8 01       	movw	r24, r16
 b98:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <xEventGroupSetBits>
 b9c:	ca 29       	or	r28, r10
 b9e:	db 29       	or	r29, r11
 ba0:	ce 01       	movw	r24, r28
 ba2:	8e 21       	and	r24, r14
 ba4:	9f 21       	and	r25, r15
 ba6:	e8 16       	cp	r14, r24
 ba8:	f9 06       	cpc	r15, r25
 baa:	69 f4       	brne	.+26     	; 0xbc6 <xEventGroupSync+0x58>
 bac:	f8 01       	movw	r30, r16
 bae:	20 81       	ld	r18, Z
 bb0:	31 81       	ldd	r19, Z+1	; 0x01
 bb2:	c7 01       	movw	r24, r14
 bb4:	80 95       	com	r24
 bb6:	90 95       	com	r25
 bb8:	82 23       	and	r24, r18
 bba:	93 23       	and	r25, r19
 bbc:	91 83       	std	Z+1, r25	; 0x01
 bbe:	80 83       	st	Z, r24
 bc0:	c1 2c       	mov	r12, r1
 bc2:	d1 2c       	mov	r13, r1
 bc4:	10 c0       	rjmp	.+32     	; 0xbe6 <xEventGroupSync+0x78>
 bc6:	c1 14       	cp	r12, r1
 bc8:	d1 04       	cpc	r13, r1
 bca:	51 f0       	breq	.+20     	; 0xbe0 <xEventGroupSync+0x72>
 bcc:	a6 01       	movw	r20, r12
 bce:	b7 01       	movw	r22, r14
 bd0:	75 60       	ori	r23, 0x05	; 5
 bd2:	c8 01       	movw	r24, r16
 bd4:	02 96       	adiw	r24, 0x02	; 2
 bd6:	0e 94 83 07 	call	0xf06	; 0xf06 <vTaskPlaceOnUnorderedEventList>
 bda:	c0 e0       	ldi	r28, 0x00	; 0
 bdc:	d0 e0       	ldi	r29, 0x00	; 0
 bde:	03 c0       	rjmp	.+6      	; 0xbe6 <xEventGroupSync+0x78>
 be0:	f8 01       	movw	r30, r16
 be2:	c0 81       	ld	r28, Z
 be4:	d1 81       	ldd	r29, Z+1	; 0x01
 be6:	0e 94 77 01 	call	0x2ee	; 0x2ee <xTaskResumeAll>
 bea:	cd 28       	or	r12, r13
 bec:	f9 f0       	breq	.+62     	; 0xc2c <xEventGroupSync+0xbe>
 bee:	81 11       	cpse	r24, r1
 bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <xEventGroupSync+0x88>
 bf2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vPortYield>
 bf6:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <uxTaskResetEventItemValue>
 bfa:	91 fd       	sbrc	r25, 1
 bfc:	15 c0       	rjmp	.+42     	; 0xc28 <xEventGroupSync+0xba>
 bfe:	0f b6       	in	r0, 0x3f	; 63
 c00:	f8 94       	cli
 c02:	0f 92       	push	r0
 c04:	f8 01       	movw	r30, r16
 c06:	80 81       	ld	r24, Z
 c08:	91 81       	ldd	r25, Z+1	; 0x01
 c0a:	97 01       	movw	r18, r14
 c0c:	28 23       	and	r18, r24
 c0e:	39 23       	and	r19, r25
 c10:	e2 16       	cp	r14, r18
 c12:	f3 06       	cpc	r15, r19
 c14:	39 f4       	brne	.+14     	; 0xc24 <xEventGroupSync+0xb6>
 c16:	a7 01       	movw	r20, r14
 c18:	40 95       	com	r20
 c1a:	50 95       	com	r21
 c1c:	48 23       	and	r20, r24
 c1e:	59 23       	and	r21, r25
 c20:	51 83       	std	Z+1, r21	; 0x01
 c22:	40 83       	st	Z, r20
 c24:	0f 90       	pop	r0
 c26:	0f be       	out	0x3f, r0	; 63
 c28:	ec 01       	movw	r28, r24
 c2a:	dd 27       	eor	r29, r29
 c2c:	ce 01       	movw	r24, r28
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	1f 91       	pop	r17
 c34:	0f 91       	pop	r16
 c36:	ff 90       	pop	r15
 c38:	ef 90       	pop	r14
 c3a:	df 90       	pop	r13
 c3c:	cf 90       	pop	r12
 c3e:	bf 90       	pop	r11
 c40:	af 90       	pop	r10
 c42:	08 95       	ret

Disassembly of section .text.pvPortMalloc:

00001080 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
    1086:	0e 94 09 0b 	call	0x1612	; 0x1612 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
    108a:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <pucAlignedHeap.2094>
    108e:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <pucAlignedHeap.2094+0x1>
    1092:	89 2b       	or	r24, r25
    1094:	31 f4       	brne	.+12     	; 0x10a2 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1096:	80 e6       	ldi	r24, 0x60	; 96
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	90 93 8e 06 	sts	0x068E, r25	; 0x80068e <pucAlignedHeap.2094+0x1>
    109e:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <pucAlignedHeap.2094>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    10a2:	20 97       	sbiw	r28, 0x00	; 0
    10a4:	c9 f0       	breq	.+50     	; 0x10d8 <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    10a6:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <xNextFreeByte>
    10aa:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <xNextFreeByte+0x1>
    10ae:	9e 01       	movw	r18, r28
    10b0:	28 0f       	add	r18, r24
    10b2:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    10b4:	2b 3d       	cpi	r18, 0xDB	; 219
    10b6:	45 e0       	ldi	r20, 0x05	; 5
    10b8:	34 07       	cpc	r19, r20
    10ba:	88 f4       	brcc	.+34     	; 0x10de <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    10bc:	82 17       	cp	r24, r18
    10be:	93 07       	cpc	r25, r19
    10c0:	88 f4       	brcc	.+34     	; 0x10e4 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
    10c2:	c0 91 8d 06 	lds	r28, 0x068D	; 0x80068d <pucAlignedHeap.2094>
    10c6:	d0 91 8e 06 	lds	r29, 0x068E	; 0x80068e <pucAlignedHeap.2094+0x1>
    10ca:	c8 0f       	add	r28, r24
    10cc:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
    10ce:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <xNextFreeByte+0x1>
    10d2:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <xNextFreeByte>
    10d6:	08 c0       	rjmp	.+16     	; 0x10e8 <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
    10d8:	c0 e0       	ldi	r28, 0x00	; 0
    10da:	d0 e0       	ldi	r29, 0x00	; 0
    10dc:	05 c0       	rjmp	.+10     	; 0x10e8 <pvPortMalloc+0x68>
    10de:	c0 e0       	ldi	r28, 0x00	; 0
    10e0:	d0 e0       	ldi	r29, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <pvPortMalloc+0x68>
    10e4:	c0 e0       	ldi	r28, 0x00	; 0
    10e6:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    10e8:	0e 94 77 01 	call	0x2ee	; 0x2ee <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
    10ec:	ce 01       	movw	r24, r28
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

Disassembly of section .text.vPortFree:

0000163a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    163a:	08 95       	ret

Disassembly of section .text.HLCD_vsendData:

00001162 <HLCD_vsendData>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1162:	9b b3       	in	r25, 0x1b	; 27
    1164:	9f 70       	andi	r25, 0x0F	; 15
    1166:	28 2f       	mov	r18, r24
    1168:	20 7f       	andi	r18, 0xF0	; 240
    116a:	92 2b       	or	r25, r18
    116c:	9b bb       	out	0x1b, r25	; 27
    116e:	98 b3       	in	r25, 0x18	; 24
    1170:	92 60       	ori	r25, 0x02	; 2
    1172:	98 bb       	out	0x18, r25	; 24
    1174:	98 b3       	in	r25, 0x18	; 24
    1176:	9b 7f       	andi	r25, 0xFB	; 251
    1178:	98 bb       	out	0x18, r25	; 24
    117a:	98 b3       	in	r25, 0x18	; 24
    117c:	98 60       	ori	r25, 0x08	; 8
    117e:	98 bb       	out	0x18, r25	; 24
    1180:	ef e9       	ldi	r30, 0x9F	; 159
    1182:	ff e0       	ldi	r31, 0x0F	; 15
    1184:	31 97       	sbiw	r30, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <HLCD_vsendData+0x22>
    1188:	00 c0       	rjmp	.+0      	; 0x118a <HLCD_vsendData+0x28>
    118a:	00 00       	nop
    118c:	98 b3       	in	r25, 0x18	; 24
    118e:	97 7f       	andi	r25, 0xF7	; 247
    1190:	98 bb       	out	0x18, r25	; 24
    1192:	2b b3       	in	r18, 0x1b	; 27
    1194:	f0 e1       	ldi	r31, 0x10	; 16
    1196:	8f 9f       	mul	r24, r31
    1198:	c0 01       	movw	r24, r0
    119a:	11 24       	eor	r1, r1
    119c:	92 2f       	mov	r25, r18
    119e:	9f 70       	andi	r25, 0x0F	; 15
    11a0:	89 2b       	or	r24, r25
    11a2:	8b bb       	out	0x1b, r24	; 27
    11a4:	88 b3       	in	r24, 0x18	; 24
    11a6:	82 60       	ori	r24, 0x02	; 2
    11a8:	88 bb       	out	0x18, r24	; 24
    11aa:	88 b3       	in	r24, 0x18	; 24
    11ac:	8b 7f       	andi	r24, 0xFB	; 251
    11ae:	88 bb       	out	0x18, r24	; 24
    11b0:	88 b3       	in	r24, 0x18	; 24
    11b2:	88 60       	ori	r24, 0x08	; 8
    11b4:	88 bb       	out	0x18, r24	; 24
    11b6:	8f e9       	ldi	r24, 0x9F	; 159
    11b8:	9f e0       	ldi	r25, 0x0F	; 15
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <HLCD_vsendData+0x58>
    11be:	00 c0       	rjmp	.+0      	; 0x11c0 <HLCD_vsendData+0x5e>
    11c0:	00 00       	nop
    11c2:	88 b3       	in	r24, 0x18	; 24
    11c4:	87 7f       	andi	r24, 0xF7	; 247
    11c6:	88 bb       	out	0x18, r24	; 24
    11c8:	08 95       	ret

Disassembly of section .text.HLCD_vsendCommand:

000011ca <HLCD_vsendCommand>:
    11ca:	9b b3       	in	r25, 0x1b	; 27
    11cc:	9f 70       	andi	r25, 0x0F	; 15
    11ce:	28 2f       	mov	r18, r24
    11d0:	20 7f       	andi	r18, 0xF0	; 240
    11d2:	92 2b       	or	r25, r18
    11d4:	9b bb       	out	0x1b, r25	; 27
    11d6:	98 b3       	in	r25, 0x18	; 24
    11d8:	9d 7f       	andi	r25, 0xFD	; 253
    11da:	98 bb       	out	0x18, r25	; 24
    11dc:	98 b3       	in	r25, 0x18	; 24
    11de:	9b 7f       	andi	r25, 0xFB	; 251
    11e0:	98 bb       	out	0x18, r25	; 24
    11e2:	98 b3       	in	r25, 0x18	; 24
    11e4:	98 60       	ori	r25, 0x08	; 8
    11e6:	98 bb       	out	0x18, r25	; 24
    11e8:	ef e9       	ldi	r30, 0x9F	; 159
    11ea:	ff e0       	ldi	r31, 0x0F	; 15
    11ec:	31 97       	sbiw	r30, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <HLCD_vsendCommand+0x22>
    11f0:	00 c0       	rjmp	.+0      	; 0x11f2 <HLCD_vsendCommand+0x28>
    11f2:	00 00       	nop
    11f4:	98 b3       	in	r25, 0x18	; 24
    11f6:	97 7f       	andi	r25, 0xF7	; 247
    11f8:	98 bb       	out	0x18, r25	; 24
    11fa:	2b b3       	in	r18, 0x1b	; 27
    11fc:	f0 e1       	ldi	r31, 0x10	; 16
    11fe:	8f 9f       	mul	r24, r31
    1200:	c0 01       	movw	r24, r0
    1202:	11 24       	eor	r1, r1
    1204:	92 2f       	mov	r25, r18
    1206:	9f 70       	andi	r25, 0x0F	; 15
    1208:	89 2b       	or	r24, r25
    120a:	8b bb       	out	0x1b, r24	; 27
    120c:	88 b3       	in	r24, 0x18	; 24
    120e:	8d 7f       	andi	r24, 0xFD	; 253
    1210:	88 bb       	out	0x18, r24	; 24
    1212:	88 b3       	in	r24, 0x18	; 24
    1214:	8b 7f       	andi	r24, 0xFB	; 251
    1216:	88 bb       	out	0x18, r24	; 24
    1218:	88 b3       	in	r24, 0x18	; 24
    121a:	88 60       	ori	r24, 0x08	; 8
    121c:	88 bb       	out	0x18, r24	; 24
    121e:	8f e9       	ldi	r24, 0x9F	; 159
    1220:	9f e0       	ldi	r25, 0x0F	; 15
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <HLCD_vsendCommand+0x58>
    1226:	00 c0       	rjmp	.+0      	; 0x1228 <HLCD_vsendCommand+0x5e>
    1228:	00 00       	nop
    122a:	88 b3       	in	r24, 0x18	; 24
    122c:	87 7f       	andi	r24, 0xF7	; 247
    122e:	88 bb       	out	0x18, r24	; 24
    1230:	08 95       	ret

Disassembly of section .text.HLCD_vShowString:

000013ea <HLCD_vShowString>:
	HLCD_vsendCommand(0x01);
	_delay_ms(2);

}

void HLCD_vShowString(u8 const * const  str){
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	cf 93       	push	r28
    13f2:	6b 01       	movw	r12, r22
    13f4:	e8 2e       	mov	r14, r24
	u8 i = 0;
    13f6:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i]!=0){
    13f8:	09 c0       	rjmp	.+18     	; 0x140c <HLCD_vShowString+0x22>
		HLCD_vsendData(str[i]);
    13fa:	0e 94 b1 08 	call	0x1162	; 0x1162 <HLCD_vsendData>
    13fe:	8f e9       	ldi	r24, 0x9F	; 159
    1400:	9f e0       	ldi	r25, 0x0F	; 15
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <HLCD_vShowString+0x18>
    1406:	00 c0       	rjmp	.+0      	; 0x1408 <HLCD_vShowString+0x1e>
    1408:	00 00       	nop
		_delay_ms(1);
		i++;
    140a:	cf 5f       	subi	r28, 0xFF	; 255

}

void HLCD_vShowString(u8 const * const  str){
	u8 i = 0;
	while(str[i]!=0){
    140c:	ae 2d       	mov	r26, r14
    140e:	c6 01       	movw	r24, r12
    1410:	8c 0f       	add	r24, r28
    1412:	91 1d       	adc	r25, r1
    1414:	a1 1d       	adc	r26, r1
    1416:	fc 01       	movw	r30, r24
    1418:	84 91       	lpm	r24, Z
    141a:	a7 fd       	sbrc	r26, 7
    141c:	80 81       	ld	r24, Z
    141e:	81 11       	cpse	r24, r1
    1420:	ec cf       	rjmp	.-40     	; 0x13fa <HLCD_vShowString+0x10>
		HLCD_vsendData(str[i]);
		_delay_ms(1);
		i++;
	}
	
}
    1422:	cf 91       	pop	r28
    1424:	ef 90       	pop	r14
    1426:	df 90       	pop	r13
    1428:	cf 90       	pop	r12
    142a:	08 95       	ret

Disassembly of section .text.HLCD_vInit:

0000100a <HLCD_vInit>:
    100a:	8f e0       	ldi	r24, 0x0F	; 15
    100c:	87 bb       	out	0x17, r24	; 23
    100e:	80 ef       	ldi	r24, 0xF0	; 240
    1010:	8a bb       	out	0x1a, r24	; 26
    1012:	2f ef       	ldi	r18, 0xFF	; 255
    1014:	83 ef       	ldi	r24, 0xF3	; 243
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	21 50       	subi	r18, 0x01	; 1
    101a:	80 40       	sbci	r24, 0x00	; 0
    101c:	90 40       	sbci	r25, 0x00	; 0
    101e:	e1 f7       	brne	.-8      	; 0x1018 <HLCD_vInit+0xe>
    1020:	00 c0       	rjmp	.+0      	; 0x1022 <HLCD_vInit+0x18>
    1022:	00 00       	nop
    1024:	88 e2       	ldi	r24, 0x28	; 40
    1026:	0e 94 e5 08 	call	0x11ca	; 0x11ca <HLCD_vsendCommand>
    102a:	25 ed       	ldi	r18, 0xD5	; 213
    102c:	2a 95       	dec	r18
    102e:	f1 f7       	brne	.-4      	; 0x102c <HLCD_vInit+0x22>
    1030:	00 00       	nop
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	0e 94 e5 08 	call	0x11ca	; 0x11ca <HLCD_vsendCommand>
    1038:	8f e3       	ldi	r24, 0x3F	; 63
    103a:	9f e1       	ldi	r25, 0x1F	; 31
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <HLCD_vInit+0x32>
    1040:	00 c0       	rjmp	.+0      	; 0x1042 <HLCD_vInit+0x38>
    1042:	00 00       	nop
    1044:	86 e0       	ldi	r24, 0x06	; 6
    1046:	0e 94 e5 08 	call	0x11ca	; 0x11ca <HLCD_vsendCommand>
    104a:	95 ed       	ldi	r25, 0xD5	; 213
    104c:	9a 95       	dec	r25
    104e:	f1 f7       	brne	.-4      	; 0x104c <HLCD_vInit+0x42>
    1050:	00 00       	nop
    1052:	8f e0       	ldi	r24, 0x0F	; 15
    1054:	0e 94 e5 08 	call	0x11ca	; 0x11ca <HLCD_vsendCommand>
    1058:	84 e1       	ldi	r24, 0x14	; 20
    105a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <HLCD_vsendCommand>
    105e:	25 ed       	ldi	r18, 0xD5	; 213
    1060:	2a 95       	dec	r18
    1062:	f1 f7       	brne	.-4      	; 0x1060 <HLCD_vInit+0x56>
    1064:	00 00       	nop
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	0e 94 e5 08 	call	0x11ca	; 0x11ca <HLCD_vsendCommand>
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	93 ec       	ldi	r25, 0xC3	; 195
    1070:	29 e0       	ldi	r18, 0x09	; 9
    1072:	81 50       	subi	r24, 0x01	; 1
    1074:	90 40       	sbci	r25, 0x00	; 0
    1076:	20 40       	sbci	r18, 0x00	; 0
    1078:	e1 f7       	brne	.-8      	; 0x1072 <HLCD_vInit+0x68>
    107a:	00 c0       	rjmp	.+0      	; 0x107c <HLCD_vInit+0x72>
    107c:	00 00       	nop
    107e:	08 95       	ret

Disassembly of section .text.vListInitialise:

000015a4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    15a4:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    15a6:	03 96       	adiw	r24, 0x03	; 3
    15a8:	92 83       	std	Z+2, r25	; 0x02
    15aa:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    15ac:	2f ef       	ldi	r18, 0xFF	; 255
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	34 83       	std	Z+4, r19	; 0x04
    15b2:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    15b4:	96 83       	std	Z+6, r25	; 0x06
    15b6:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    15b8:	90 87       	std	Z+8, r25	; 0x08
    15ba:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    15bc:	10 82       	st	Z, r1
    15be:	08 95       	ret

Disassembly of section .text.vListInitialiseItem:

0000161e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    161e:	fc 01       	movw	r30, r24
    1620:	11 86       	std	Z+9, r1	; 0x09
    1622:	10 86       	std	Z+8, r1	; 0x08
    1624:	08 95       	ret

Disassembly of section .text.vListInsertEnd:

0000142c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	9c 01       	movw	r18, r24
    1432:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
    1434:	dc 01       	movw	r26, r24
    1436:	11 96       	adiw	r26, 0x01	; 1
    1438:	cd 91       	ld	r28, X+
    143a:	dc 91       	ld	r29, X
    143c:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    143e:	d3 83       	std	Z+3, r29	; 0x03
    1440:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	9d 81       	ldd	r25, Y+5	; 0x05
    1446:	95 83       	std	Z+5, r25	; 0x05
    1448:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	dc 01       	movw	r26, r24
    1450:	13 96       	adiw	r26, 0x03	; 3
    1452:	7c 93       	st	X, r23
    1454:	6e 93       	st	-X, r22
    1456:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    1458:	7d 83       	std	Y+5, r23	; 0x05
    145a:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    145c:	31 87       	std	Z+9, r19	; 0x09
    145e:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    1460:	f9 01       	movw	r30, r18
    1462:	80 81       	ld	r24, Z
    1464:	8f 5f       	subi	r24, 0xFF	; 255
    1466:	80 83       	st	Z, r24
}
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	08 95       	ret

Disassembly of section .text.vListInsert:

00001232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1238:	48 81       	ld	r20, Y
    123a:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    123c:	4f 3f       	cpi	r20, 0xFF	; 255
    123e:	2f ef       	ldi	r18, 0xFF	; 255
    1240:	52 07       	cpc	r21, r18
    1242:	21 f4       	brne	.+8      	; 0x124c <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1244:	fc 01       	movw	r30, r24
    1246:	a7 81       	ldd	r26, Z+7	; 0x07
    1248:	b0 85       	ldd	r27, Z+8	; 0x08
    124a:	0d c0       	rjmp	.+26     	; 0x1266 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    124c:	dc 01       	movw	r26, r24
    124e:	13 96       	adiw	r26, 0x03	; 3
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <vListInsert+0x22>
    1252:	df 01       	movw	r26, r30
    1254:	12 96       	adiw	r26, 0x02	; 2
    1256:	ed 91       	ld	r30, X+
    1258:	fc 91       	ld	r31, X
    125a:	13 97       	sbiw	r26, 0x03	; 3
    125c:	20 81       	ld	r18, Z
    125e:	31 81       	ldd	r19, Z+1	; 0x01
    1260:	42 17       	cp	r20, r18
    1262:	53 07       	cpc	r21, r19
    1264:	b0 f7       	brcc	.-20     	; 0x1252 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1266:	12 96       	adiw	r26, 0x02	; 2
    1268:	ed 91       	ld	r30, X+
    126a:	fc 91       	ld	r31, X
    126c:	13 97       	sbiw	r26, 0x03	; 3
    126e:	fb 83       	std	Y+3, r31	; 0x03
    1270:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1272:	d5 83       	std	Z+5, r29	; 0x05
    1274:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    1276:	bd 83       	std	Y+5, r27	; 0x05
    1278:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    127a:	13 96       	adiw	r26, 0x03	; 3
    127c:	dc 93       	st	X, r29
    127e:	ce 93       	st	-X, r28
    1280:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1282:	99 87       	std	Y+9, r25	; 0x09
    1284:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    1286:	fc 01       	movw	r30, r24
    1288:	20 81       	ld	r18, Z
    128a:	2f 5f       	subi	r18, 0xFF	; 255
    128c:	20 83       	st	Z, r18
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

Disassembly of section .text.uxListRemove:

00001350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    1356:	a0 85       	ldd	r26, Z+8	; 0x08
    1358:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    135a:	c2 81       	ldd	r28, Z+2	; 0x02
    135c:	d3 81       	ldd	r29, Z+3	; 0x03
    135e:	84 81       	ldd	r24, Z+4	; 0x04
    1360:	95 81       	ldd	r25, Z+5	; 0x05
    1362:	9d 83       	std	Y+5, r25	; 0x05
    1364:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1366:	c4 81       	ldd	r28, Z+4	; 0x04
    1368:	d5 81       	ldd	r29, Z+5	; 0x05
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	9b 83       	std	Y+3, r25	; 0x03
    1370:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1372:	11 96       	adiw	r26, 0x01	; 1
    1374:	8d 91       	ld	r24, X+
    1376:	9c 91       	ld	r25, X
    1378:	12 97       	sbiw	r26, 0x02	; 2
    137a:	e8 17       	cp	r30, r24
    137c:	f9 07       	cpc	r31, r25
    137e:	31 f4       	brne	.+12     	; 0x138c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1380:	84 81       	ldd	r24, Z+4	; 0x04
    1382:	95 81       	ldd	r25, Z+5	; 0x05
    1384:	12 96       	adiw	r26, 0x02	; 2
    1386:	9c 93       	st	X, r25
    1388:	8e 93       	st	-X, r24
    138a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    138c:	11 86       	std	Z+9, r1	; 0x09
    138e:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    1390:	8c 91       	ld	r24, X
    1392:	81 50       	subi	r24, 0x01	; 1
    1394:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1396:	8c 91       	ld	r24, X
}
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	08 95       	ret

Disassembly of section .text.setter1:

000014a6 <setter1>:
EventGroupHandle_t eHandler = NULL;
const EventBits_t flags = (bit1| bit2 | bit3);
void setter1(void *ptr) {
	EventBits_t f ;
	while (1) {
		HLCD_vsendData('1');
    14a6:	81 e3       	ldi	r24, 0x31	; 49
    14a8:	0e 94 b1 08 	call	0x1162	; 0x1162 <HLCD_vsendData>
		vTaskDelay(2000);
    14ac:	80 ed       	ldi	r24, 0xD0	; 208
    14ae:	97 e0       	ldi	r25, 0x07	; 7
    14b0:	0e 94 98 0a 	call	0x1530	; 0x1530 <vTaskDelay>
		f = xEventGroupSync(eHandler,bit1,flags,portMAX_DELAY);
    14b4:	2f ef       	ldi	r18, 0xFF	; 255
    14b6:	3f ef       	ldi	r19, 0xFF	; 255
    14b8:	47 e0       	ldi	r20, 0x07	; 7
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	61 e0       	ldi	r22, 0x01	; 1
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <eHandler>
    14c4:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <eHandler+0x1>
    14c8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupSync>
// 		HLCD_vShowString("T1");
		vTaskDelete(NULL);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 d7 06 	call	0xdae	; 0xdae <vTaskDelete>
    14d4:	e8 cf       	rjmp	.-48     	; 0x14a6 <setter1>

Disassembly of section .text.setter2:

00001582 <setter2>:
	}
}

void setter2(void *ptr) {
	while (1) {
		xEventGroupSync(eHandler,bit2,flags,portMAX_DELAY);
    1582:	2f ef       	ldi	r18, 0xFF	; 255
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	47 e0       	ldi	r20, 0x07	; 7
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	62 e0       	ldi	r22, 0x02	; 2
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <eHandler>
    1592:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <eHandler+0x1>
    1596:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupSync>
		//HLCD_vShowString("T2");
		vTaskDelete(NULL);
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 d7 06 	call	0xdae	; 0xdae <vTaskDelete>
    15a2:	ef cf       	rjmp	.-34     	; 0x1582 <setter2>

Disassembly of section .text.setter3:

00001504 <setter3>:
}

void setter3(void *ptr) {
	EventBits_t ret ;
	while (1) {
		ret = xEventGroupSync(eHandler,bit3,flags,portMAX_DELAY);
    1504:	2f ef       	ldi	r18, 0xFF	; 255
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	47 e0       	ldi	r20, 0x07	; 7
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	64 e0       	ldi	r22, 0x04	; 4
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <eHandler>
    1514:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <eHandler+0x1>
    1518:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xEventGroupSync>
		if ((ret & flags)!=0)
    151c:	87 70       	andi	r24, 0x07	; 7
    151e:	99 27       	eor	r25, r25
    1520:	89 2b       	or	r24, r25
    1522:	81 f3       	breq	.-32     	; 0x1504 <setter3>
		{
			HLCD_vShowString("Done");
    1524:	64 eb       	ldi	r22, 0xB4	; 180
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <HLCD_vShowString>
    152e:	ea cf       	rjmp	.-44     	; 0x1504 <setter3>

Disassembly of section .text.main:

00000f92 <main>:
	}
}



int main(void) {
     f92:	cf 92       	push	r12
     f94:	df 92       	push	r13
     f96:	ef 92       	push	r14
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
	HLCD_vInit();	
     f9c:	0e 94 05 08 	call	0x100a	; 0x100a <HLCD_vInit>
	// Create event group
	eHandler = xEventGroupCreate();
     fa0:	0e 94 ae 0a 	call	0x155c	; 0x155c <xEventGroupCreate>
     fa4:	90 93 92 06 	sts	0x0692, r25	; 0x800692 <eHandler+0x1>
     fa8:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <eHandler>
	if (eHandler == NULL) {
     fac:	89 2b       	or	r24, r25
     fae:	09 f4       	brne	.+2      	; 0xfb2 <main+0x20>
     fb0:	ff cf       	rjmp	.-2      	; 0xfb0 <main+0x1e>
		while (1) {
		}
	}

	// Create tasks
	xTaskCreate(setter1, NULL, configMINIMAL_STACK_SIZE, NULL, 2, NULL);
     fb2:	c1 2c       	mov	r12, r1
     fb4:	d1 2c       	mov	r13, r1
     fb6:	68 94       	set
     fb8:	ee 24       	eor	r14, r14
     fba:	e1 f8       	bld	r14, 1
     fbc:	00 e0       	ldi	r16, 0x00	; 0
     fbe:	10 e0       	ldi	r17, 0x00	; 0
     fc0:	25 e5       	ldi	r18, 0x55	; 85
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	83 e5       	ldi	r24, 0x53	; 83
     fcc:	9a e0       	ldi	r25, 0x0A	; 10
     fce:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <xTaskCreate>
	xTaskCreate(setter2, NULL, configMINIMAL_STACK_SIZE, NULL, 2, NULL);
     fd2:	25 e5       	ldi	r18, 0x55	; 85
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e0       	ldi	r20, 0x00	; 0
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	81 ec       	ldi	r24, 0xC1	; 193
     fde:	9a e0       	ldi	r25, 0x0A	; 10
     fe0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <xTaskCreate>
	xTaskCreate(setter3, NULL, configMINIMAL_STACK_SIZE, NULL, 2, NULL);
     fe4:	25 e5       	ldi	r18, 0x55	; 85
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	82 e8       	ldi	r24, 0x82	; 130
     ff0:	9a e0       	ldi	r25, 0x0A	; 10
     ff2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <xTaskCreate>

	// Start the scheduler
	vTaskStartScheduler();
     ff6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <vTaskStartScheduler>

	// Execution should not reach here
	return 0;
}
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ef 90       	pop	r14
    1004:	df 90       	pop	r13
    1006:	cf 90       	pop	r12
    1008:	08 95       	ret

Disassembly of section .text.prvSetupTimerInterrupt:

000015f0 <prvSetupTimerInterrupt>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
    15f0:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
    15f2:	89 ef       	ldi	r24, 0xF9	; 249
    15f4:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    15f6:	8b e0       	ldi	r24, 0x0B	; 11
    15f8:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    15fa:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    15fc:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
    15fe:	89 bf       	out	0x39, r24	; 57
    1600:	08 95       	ret

Disassembly of section .text.pxPortInitialiseStack:

00000a96 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 a96:	31 e1       	ldi	r19, 0x11	; 17
 a98:	fc 01       	movw	r30, r24
 a9a:	30 83       	st	Z, r19
 a9c:	31 97       	sbiw	r30, 0x01	; 1
 a9e:	22 e2       	ldi	r18, 0x22	; 34
 aa0:	20 83       	st	Z, r18
 aa2:	31 97       	sbiw	r30, 0x01	; 1
 aa4:	a3 e3       	ldi	r26, 0x33	; 51
 aa6:	a0 83       	st	Z, r26
 aa8:	31 97       	sbiw	r30, 0x01	; 1
 aaa:	60 83       	st	Z, r22
 aac:	31 97       	sbiw	r30, 0x01	; 1
 aae:	70 83       	st	Z, r23
 ab0:	31 97       	sbiw	r30, 0x01	; 1
 ab2:	10 82       	st	Z, r1
 ab4:	31 97       	sbiw	r30, 0x01	; 1
 ab6:	60 e8       	ldi	r22, 0x80	; 128
 ab8:	60 83       	st	Z, r22
 aba:	31 97       	sbiw	r30, 0x01	; 1
 abc:	10 82       	st	Z, r1
 abe:	31 97       	sbiw	r30, 0x01	; 1
 ac0:	62 e0       	ldi	r22, 0x02	; 2
 ac2:	60 83       	st	Z, r22
 ac4:	31 97       	sbiw	r30, 0x01	; 1
 ac6:	63 e0       	ldi	r22, 0x03	; 3
 ac8:	60 83       	st	Z, r22
 aca:	31 97       	sbiw	r30, 0x01	; 1
 acc:	64 e0       	ldi	r22, 0x04	; 4
 ace:	60 83       	st	Z, r22
 ad0:	31 97       	sbiw	r30, 0x01	; 1
 ad2:	65 e0       	ldi	r22, 0x05	; 5
 ad4:	60 83       	st	Z, r22
 ad6:	31 97       	sbiw	r30, 0x01	; 1
 ad8:	66 e0       	ldi	r22, 0x06	; 6
 ada:	60 83       	st	Z, r22
 adc:	31 97       	sbiw	r30, 0x01	; 1
 ade:	67 e0       	ldi	r22, 0x07	; 7
 ae0:	60 83       	st	Z, r22
 ae2:	31 97       	sbiw	r30, 0x01	; 1
 ae4:	68 e0       	ldi	r22, 0x08	; 8
 ae6:	60 83       	st	Z, r22
 ae8:	31 97       	sbiw	r30, 0x01	; 1
 aea:	69 e0       	ldi	r22, 0x09	; 9
 aec:	60 83       	st	Z, r22
 aee:	31 97       	sbiw	r30, 0x01	; 1
 af0:	60 e1       	ldi	r22, 0x10	; 16
 af2:	60 83       	st	Z, r22
 af4:	31 97       	sbiw	r30, 0x01	; 1
 af6:	30 83       	st	Z, r19
 af8:	31 97       	sbiw	r30, 0x01	; 1
 afa:	32 e1       	ldi	r19, 0x12	; 18
 afc:	30 83       	st	Z, r19
 afe:	31 97       	sbiw	r30, 0x01	; 1
 b00:	33 e1       	ldi	r19, 0x13	; 19
 b02:	30 83       	st	Z, r19
 b04:	31 97       	sbiw	r30, 0x01	; 1
 b06:	34 e1       	ldi	r19, 0x14	; 20
 b08:	30 83       	st	Z, r19
 b0a:	31 97       	sbiw	r30, 0x01	; 1
 b0c:	35 e1       	ldi	r19, 0x15	; 21
 b0e:	30 83       	st	Z, r19
 b10:	31 97       	sbiw	r30, 0x01	; 1
 b12:	36 e1       	ldi	r19, 0x16	; 22
 b14:	30 83       	st	Z, r19
 b16:	31 97       	sbiw	r30, 0x01	; 1
 b18:	37 e1       	ldi	r19, 0x17	; 23
 b1a:	30 83       	st	Z, r19
 b1c:	31 97       	sbiw	r30, 0x01	; 1
 b1e:	38 e1       	ldi	r19, 0x18	; 24
 b20:	30 83       	st	Z, r19
 b22:	31 97       	sbiw	r30, 0x01	; 1
 b24:	39 e1       	ldi	r19, 0x19	; 25
 b26:	30 83       	st	Z, r19
 b28:	31 97       	sbiw	r30, 0x01	; 1
 b2a:	30 e2       	ldi	r19, 0x20	; 32
 b2c:	30 83       	st	Z, r19
 b2e:	31 97       	sbiw	r30, 0x01	; 1
 b30:	31 e2       	ldi	r19, 0x21	; 33
 b32:	30 83       	st	Z, r19
 b34:	31 97       	sbiw	r30, 0x01	; 1
 b36:	20 83       	st	Z, r18
 b38:	31 97       	sbiw	r30, 0x01	; 1
 b3a:	23 e2       	ldi	r18, 0x23	; 35
 b3c:	20 83       	st	Z, r18
 b3e:	31 97       	sbiw	r30, 0x01	; 1
 b40:	40 83       	st	Z, r20
 b42:	31 97       	sbiw	r30, 0x01	; 1
 b44:	50 83       	st	Z, r21
 b46:	31 97       	sbiw	r30, 0x01	; 1
 b48:	26 e2       	ldi	r18, 0x26	; 38
 b4a:	20 83       	st	Z, r18
 b4c:	31 97       	sbiw	r30, 0x01	; 1
 b4e:	27 e2       	ldi	r18, 0x27	; 39
 b50:	20 83       	st	Z, r18
 b52:	31 97       	sbiw	r30, 0x01	; 1
 b54:	28 e2       	ldi	r18, 0x28	; 40
 b56:	20 83       	st	Z, r18
 b58:	31 97       	sbiw	r30, 0x01	; 1
 b5a:	29 e2       	ldi	r18, 0x29	; 41
 b5c:	20 83       	st	Z, r18
 b5e:	31 97       	sbiw	r30, 0x01	; 1
 b60:	20 e3       	ldi	r18, 0x30	; 48
 b62:	20 83       	st	Z, r18
 b64:	31 97       	sbiw	r30, 0x01	; 1
 b66:	21 e3       	ldi	r18, 0x31	; 49
 b68:	20 83       	st	Z, r18
 b6a:	86 97       	sbiw	r24, 0x26	; 38
 b6c:	08 95       	ret

Disassembly of section .text.xPortStartScheduler:

00001294 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    1294:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    1298:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
    129c:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
    12a0:	cd 91       	ld	r28, X+
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	dd 91       	ld	r29, X+
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	ff 91       	pop	r31
    12aa:	ef 91       	pop	r30
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	bf 91       	pop	r27
    12b2:	af 91       	pop	r26
    12b4:	9f 91       	pop	r25
    12b6:	8f 91       	pop	r24
    12b8:	7f 91       	pop	r23
    12ba:	6f 91       	pop	r22
    12bc:	5f 91       	pop	r21
    12be:	4f 91       	pop	r20
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	bf 90       	pop	r11
    12d2:	af 90       	pop	r10
    12d4:	9f 90       	pop	r9
    12d6:	8f 90       	pop	r8
    12d8:	7f 90       	pop	r7
    12da:	6f 90       	pop	r6
    12dc:	5f 90       	pop	r5
    12de:	4f 90       	pop	r4
    12e0:	3f 90       	pop	r3
    12e2:	2f 90       	pop	r2
    12e4:	1f 90       	pop	r1
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    12ec:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	08 95       	ret

Disassembly of section .text.vPortYield:

00000cfc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 cfc:	0f 92       	push	r0
 cfe:	0f b6       	in	r0, 0x3f	; 63
 d00:	f8 94       	cli
 d02:	0f 92       	push	r0
 d04:	1f 92       	push	r1
 d06:	11 24       	eor	r1, r1
 d08:	2f 92       	push	r2
 d0a:	3f 92       	push	r3
 d0c:	4f 92       	push	r4
 d0e:	5f 92       	push	r5
 d10:	6f 92       	push	r6
 d12:	7f 92       	push	r7
 d14:	8f 92       	push	r8
 d16:	9f 92       	push	r9
 d18:	af 92       	push	r10
 d1a:	bf 92       	push	r11
 d1c:	cf 92       	push	r12
 d1e:	df 92       	push	r13
 d20:	ef 92       	push	r14
 d22:	ff 92       	push	r15
 d24:	0f 93       	push	r16
 d26:	1f 93       	push	r17
 d28:	2f 93       	push	r18
 d2a:	3f 93       	push	r19
 d2c:	4f 93       	push	r20
 d2e:	5f 93       	push	r21
 d30:	6f 93       	push	r22
 d32:	7f 93       	push	r23
 d34:	8f 93       	push	r24
 d36:	9f 93       	push	r25
 d38:	af 93       	push	r26
 d3a:	bf 93       	push	r27
 d3c:	cf 93       	push	r28
 d3e:	df 93       	push	r29
 d40:	ef 93       	push	r30
 d42:	ff 93       	push	r31
 d44:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 d48:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 d4c:	0d b6       	in	r0, 0x3d	; 61
 d4e:	0d 92       	st	X+, r0
 d50:	0e b6       	in	r0, 0x3e	; 62
 d52:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 d54:	0e 94 2f 07 	call	0xe5e	; 0xe5e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 d58:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 d5c:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 d60:	cd 91       	ld	r28, X+
 d62:	cd bf       	out	0x3d, r28	; 61
 d64:	dd 91       	ld	r29, X+
 d66:	de bf       	out	0x3e, r29	; 62
 d68:	ff 91       	pop	r31
 d6a:	ef 91       	pop	r30
 d6c:	df 91       	pop	r29
 d6e:	cf 91       	pop	r28
 d70:	bf 91       	pop	r27
 d72:	af 91       	pop	r26
 d74:	9f 91       	pop	r25
 d76:	8f 91       	pop	r24
 d78:	7f 91       	pop	r23
 d7a:	6f 91       	pop	r22
 d7c:	5f 91       	pop	r21
 d7e:	4f 91       	pop	r20
 d80:	3f 91       	pop	r19
 d82:	2f 91       	pop	r18
 d84:	1f 91       	pop	r17
 d86:	0f 91       	pop	r16
 d88:	ff 90       	pop	r15
 d8a:	ef 90       	pop	r14
 d8c:	df 90       	pop	r13
 d8e:	cf 90       	pop	r12
 d90:	bf 90       	pop	r11
 d92:	af 90       	pop	r10
 d94:	9f 90       	pop	r9
 d96:	8f 90       	pop	r8
 d98:	7f 90       	pop	r7
 d9a:	6f 90       	pop	r6
 d9c:	5f 90       	pop	r5
 d9e:	4f 90       	pop	r4
 da0:	3f 90       	pop	r3
 da2:	2f 90       	pop	r2
 da4:	1f 90       	pop	r1
 da6:	0f 90       	pop	r0
 da8:	0f be       	out	0x3f, r0	; 63
 daa:	0f 90       	pop	r0

	asm volatile ( "ret" );
 dac:	08 95       	ret

Disassembly of section .text.vPortYieldFromTick:

00000c44 <vPortYieldFromTick>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 c44:	0f 92       	push	r0
 c46:	0f b6       	in	r0, 0x3f	; 63
 c48:	f8 94       	cli
 c4a:	0f 92       	push	r0
 c4c:	1f 92       	push	r1
 c4e:	11 24       	eor	r1, r1
 c50:	2f 92       	push	r2
 c52:	3f 92       	push	r3
 c54:	4f 92       	push	r4
 c56:	5f 92       	push	r5
 c58:	6f 92       	push	r6
 c5a:	7f 92       	push	r7
 c5c:	8f 92       	push	r8
 c5e:	9f 92       	push	r9
 c60:	af 92       	push	r10
 c62:	bf 92       	push	r11
 c64:	cf 92       	push	r12
 c66:	df 92       	push	r13
 c68:	ef 92       	push	r14
 c6a:	ff 92       	push	r15
 c6c:	0f 93       	push	r16
 c6e:	1f 93       	push	r17
 c70:	2f 93       	push	r18
 c72:	3f 93       	push	r19
 c74:	4f 93       	push	r20
 c76:	5f 93       	push	r21
 c78:	6f 93       	push	r22
 c7a:	7f 93       	push	r23
 c7c:	8f 93       	push	r24
 c7e:	9f 93       	push	r25
 c80:	af 93       	push	r26
 c82:	bf 93       	push	r27
 c84:	cf 93       	push	r28
 c86:	df 93       	push	r29
 c88:	ef 93       	push	r30
 c8a:	ff 93       	push	r31
 c8c:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 c90:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 c94:	0d b6       	in	r0, 0x3d	; 61
 c96:	0d 92       	st	X+, r0
 c98:	0e b6       	in	r0, 0x3e	; 62
 c9a:	0d 92       	st	X+, r0
 c9c:	0e 94 5d 00 	call	0xba	; 0xba <xTaskIncrementTick>
 ca0:	81 11       	cpse	r24, r1
 ca2:	0e 94 2f 07 	call	0xe5e	; 0xe5e <vTaskSwitchContext>
 ca6:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 caa:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 cae:	cd 91       	ld	r28, X+
 cb0:	cd bf       	out	0x3d, r28	; 61
 cb2:	dd 91       	ld	r29, X+
 cb4:	de bf       	out	0x3e, r29	; 62
 cb6:	ff 91       	pop	r31
 cb8:	ef 91       	pop	r30
 cba:	df 91       	pop	r29
 cbc:	cf 91       	pop	r28
 cbe:	bf 91       	pop	r27
 cc0:	af 91       	pop	r26
 cc2:	9f 91       	pop	r25
 cc4:	8f 91       	pop	r24
 cc6:	7f 91       	pop	r23
 cc8:	6f 91       	pop	r22
 cca:	5f 91       	pop	r21
 ccc:	4f 91       	pop	r20
 cce:	3f 91       	pop	r19
 cd0:	2f 91       	pop	r18
 cd2:	1f 91       	pop	r17
 cd4:	0f 91       	pop	r16
 cd6:	ff 90       	pop	r15
 cd8:	ef 90       	pop	r14
 cda:	df 90       	pop	r13
 cdc:	cf 90       	pop	r12
 cde:	bf 90       	pop	r11
 ce0:	af 90       	pop	r10
 ce2:	9f 90       	pop	r9
 ce4:	8f 90       	pop	r8
 ce6:	7f 90       	pop	r7
 ce8:	6f 90       	pop	r6
 cea:	5f 90       	pop	r5
 cec:	4f 90       	pop	r4
 cee:	3f 90       	pop	r3
 cf0:	2f 90       	pop	r2
 cf2:	1f 90       	pop	r1
 cf4:	0f 90       	pop	r0
 cf6:	0f be       	out	0x3f, r0	; 63
 cf8:	0f 90       	pop	r0
 cfa:	08 95       	ret

Disassembly of section .text.__vector_7:

00001626 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    1626:	0e 94 22 06 	call	0xc44	; 0xc44 <vPortYieldFromTick>
		asm volatile ( "reti" );
    162a:	18 95       	reti

Disassembly of section .text.prvResetNextTaskUnblockTime:

0000146e <prvResetNextTaskUnblockTime>:
    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
    146e:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <pxDelayedTaskList>
    1472:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
    1476:	80 81       	ld	r24, Z
    1478:	81 11       	cpse	r24, r1
    147a:	07 c0       	rjmp	.+14     	; 0x148a <prvResetNextTaskUnblockTime+0x1c>
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	9f ef       	ldi	r25, 0xFF	; 255
    1480:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <xNextTaskUnblockTime+0x1>
    1484:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <xNextTaskUnblockTime>
    1488:	08 95       	ret
    148a:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <pxDelayedTaskList>
    148e:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
    1492:	05 80       	ldd	r0, Z+5	; 0x05
    1494:	f6 81       	ldd	r31, Z+6	; 0x06
    1496:	e0 2d       	mov	r30, r0
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <xNextTaskUnblockTime+0x1>
    14a0:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <xNextTaskUnblockTime>
    14a4:	08 95       	ret

Disassembly of section .text.prvDeleteTCB:

000015c0 <prvDeleteTCB>:
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	ec 01       	movw	r28, r24
    15c6:	8f 89       	ldd	r24, Y+23	; 0x17
    15c8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ca:	0e 94 1d 0b 	call	0x163a	; 0x163a <vPortFree>
    15ce:	ce 01       	movw	r24, r28
    15d0:	0e 94 1d 0b 	call	0x163a	; 0x163a <vPortFree>
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	08 95       	ret

Disassembly of section .text.prvInitialiseNewTask:

000008ce <prvInitialiseNewTask>:
 8ce:	6f 92       	push	r6
 8d0:	7f 92       	push	r7
 8d2:	8f 92       	push	r8
 8d4:	9f 92       	push	r9
 8d6:	af 92       	push	r10
 8d8:	bf 92       	push	r11
 8da:	cf 92       	push	r12
 8dc:	df 92       	push	r13
 8de:	ef 92       	push	r14
 8e0:	ff 92       	push	r15
 8e2:	0f 93       	push	r16
 8e4:	1f 93       	push	r17
 8e6:	cf 93       	push	r28
 8e8:	df 93       	push	r29
 8ea:	cd b7       	in	r28, 0x3d	; 61
 8ec:	de b7       	in	r29, 0x3e	; 62
 8ee:	3c 01       	movw	r6, r24
 8f0:	a6 2f       	mov	r26, r22
 8f2:	ca 01       	movw	r24, r20
 8f4:	f4 01       	movw	r30, r8
 8f6:	47 89       	ldd	r20, Z+23	; 0x17
 8f8:	50 8d       	ldd	r21, Z+24	; 0x18
 8fa:	01 50       	subi	r16, 0x01	; 1
 8fc:	11 09       	sbc	r17, r1
 8fe:	04 0f       	add	r16, r20
 900:	15 1f       	adc	r17, r21
 902:	00 97       	sbiw	r24, 0x00	; 0
 904:	a1 05       	cpc	r26, r1
 906:	d1 f4       	brne	.+52     	; 0x93c <prvInitialiseNewTask+0x6e>
 908:	1e c0       	rjmp	.+60     	; 0x946 <prvInitialiseNewTask+0x78>
 90a:	27 2f       	mov	r18, r23
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	ac 01       	movw	r20, r24
 910:	6a 2f       	mov	r22, r26
 912:	42 0f       	add	r20, r18
 914:	53 1f       	adc	r21, r19
 916:	61 1d       	adc	r22, r1
 918:	37 fd       	sbrc	r19, 7
 91a:	6a 95       	dec	r22
 91c:	fa 01       	movw	r30, r20
 91e:	b4 91       	lpm	r27, Z
 920:	67 fd       	sbrc	r22, 7
 922:	b0 81       	ld	r27, Z
 924:	f4 01       	movw	r30, r8
 926:	e2 0f       	add	r30, r18
 928:	f3 1f       	adc	r31, r19
 92a:	b1 8f       	std	Z+25, r27	; 0x19
 92c:	fa 01       	movw	r30, r20
 92e:	24 91       	lpm	r18, Z
 930:	67 fd       	sbrc	r22, 7
 932:	20 81       	ld	r18, Z
 934:	22 23       	and	r18, r18
 936:	29 f0       	breq	.+10     	; 0x942 <prvInitialiseNewTask+0x74>
 938:	7f 5f       	subi	r23, 0xFF	; 255
 93a:	01 c0       	rjmp	.+2      	; 0x93e <prvInitialiseNewTask+0x70>
 93c:	70 e0       	ldi	r23, 0x00	; 0
 93e:	78 30       	cpi	r23, 0x08	; 8
 940:	20 f3       	brcs	.-56     	; 0x90a <prvInitialiseNewTask+0x3c>
 942:	f4 01       	movw	r30, r8
 944:	10 a2       	std	Z+32, r1	; 0x20
 946:	f3 e0       	ldi	r31, 0x03	; 3
 948:	fc 15       	cp	r31, r12
 94a:	20 f4       	brcc	.+8      	; 0x954 <prvInitialiseNewTask+0x86>
 94c:	0f 2e       	mov	r0, r31
 94e:	f3 e0       	ldi	r31, 0x03	; 3
 950:	cf 2e       	mov	r12, r31
 952:	f0 2d       	mov	r31, r0
 954:	f4 01       	movw	r30, r8
 956:	c6 8a       	std	Z+22, r12	; 0x16
 958:	c4 01       	movw	r24, r8
 95a:	02 96       	adiw	r24, 0x02	; 2
 95c:	0e 94 0f 0b 	call	0x161e	; 0x161e <vListInitialiseItem>
 960:	c4 01       	movw	r24, r8
 962:	0c 96       	adiw	r24, 0x0c	; 12
 964:	0e 94 0f 0b 	call	0x161e	; 0x161e <vListInitialiseItem>
 968:	f4 01       	movw	r30, r8
 96a:	91 86       	std	Z+9, r9	; 0x09
 96c:	80 86       	std	Z+8, r8	; 0x08
 96e:	84 e0       	ldi	r24, 0x04	; 4
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	8c 19       	sub	r24, r12
 974:	91 09       	sbc	r25, r1
 976:	95 87       	std	Z+13, r25	; 0x0d
 978:	84 87       	std	Z+12, r24	; 0x0c
 97a:	93 8a       	std	Z+19, r9	; 0x13
 97c:	82 8a       	std	Z+18, r8	; 0x12
 97e:	a7 01       	movw	r20, r14
 980:	b3 01       	movw	r22, r6
 982:	c8 01       	movw	r24, r16
 984:	0e 94 4b 05 	call	0xa96	; 0xa96 <pxPortInitialiseStack>
 988:	f4 01       	movw	r30, r8
 98a:	91 83       	std	Z+1, r25	; 0x01
 98c:	80 83       	st	Z, r24
 98e:	a1 14       	cp	r10, r1
 990:	b1 04       	cpc	r11, r1
 992:	19 f0       	breq	.+6      	; 0x99a <prvInitialiseNewTask+0xcc>
 994:	f5 01       	movw	r30, r10
 996:	91 82       	std	Z+1, r9	; 0x01
 998:	80 82       	st	Z, r8
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	1f 91       	pop	r17
 9a0:	0f 91       	pop	r16
 9a2:	ff 90       	pop	r15
 9a4:	ef 90       	pop	r14
 9a6:	df 90       	pop	r13
 9a8:	cf 90       	pop	r12
 9aa:	bf 90       	pop	r11
 9ac:	af 90       	pop	r10
 9ae:	9f 90       	pop	r9
 9b0:	8f 90       	pop	r8
 9b2:	7f 90       	pop	r7
 9b4:	6f 90       	pop	r6
 9b6:	08 95       	ret

Disassembly of section .text.prvInitialiseTaskLists:

000010f4 <prvInitialiseTaskLists>:
    10f4:	cf 93       	push	r28
    10f6:	c0 e0       	ldi	r28, 0x00	; 0
    10f8:	10 c0       	rjmp	.+32     	; 0x111a <prvInitialiseTaskLists+0x26>
    10fa:	8c 2f       	mov	r24, r28
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	9c 01       	movw	r18, r24
    1100:	22 0f       	add	r18, r18
    1102:	33 1f       	adc	r19, r19
    1104:	22 0f       	add	r18, r18
    1106:	33 1f       	adc	r19, r19
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	82 0f       	add	r24, r18
    110e:	93 1f       	adc	r25, r19
    1110:	84 5c       	subi	r24, 0xC4	; 196
    1112:	99 4f       	sbci	r25, 0xF9	; 249
    1114:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <vListInitialise>
    1118:	cf 5f       	subi	r28, 0xFF	; 255
    111a:	c4 30       	cpi	r28, 0x04	; 4
    111c:	70 f3       	brcs	.-36     	; 0x10fa <prvInitialiseTaskLists+0x6>
    111e:	84 e8       	ldi	r24, 0x84	; 132
    1120:	96 e0       	ldi	r25, 0x06	; 6
    1122:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <vListInitialise>
    1126:	8b e7       	ldi	r24, 0x7B	; 123
    1128:	96 e0       	ldi	r25, 0x06	; 6
    112a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <vListInitialise>
    112e:	82 e7       	ldi	r24, 0x72	; 114
    1130:	96 e0       	ldi	r25, 0x06	; 6
    1132:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <vListInitialise>
    1136:	89 e6       	ldi	r24, 0x69	; 105
    1138:	96 e0       	ldi	r25, 0x06	; 6
    113a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <vListInitialise>
    113e:	80 e6       	ldi	r24, 0x60	; 96
    1140:	96 e0       	ldi	r25, 0x06	; 6
    1142:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <vListInitialise>
    1146:	84 e8       	ldi	r24, 0x84	; 132
    1148:	96 e0       	ldi	r25, 0x06	; 6
    114a:	90 93 9e 06 	sts	0x069E, r25	; 0x80069e <pxDelayedTaskList+0x1>
    114e:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <pxDelayedTaskList>
    1152:	8b e7       	ldi	r24, 0x7B	; 123
    1154:	96 e0       	ldi	r25, 0x06	; 6
    1156:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <pxOverflowDelayedTaskList+0x1>
    115a:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <pxOverflowDelayedTaskList>
    115e:	cf 91       	pop	r28
    1160:	08 95       	ret

Disassembly of section .text.prvAddNewTaskToReadyList:

000006e6 <prvAddNewTaskToReadyList>:
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	ec 01       	movw	r28, r24
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	f8 94       	cli
 6f0:	0f 92       	push	r0
 6f2:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
 6f6:	8f 5f       	subi	r24, 0xFF	; 255
 6f8:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <uxCurrentNumberOfTasks>
 6fc:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 700:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 704:	89 2b       	or	r24, r25
 706:	59 f4       	brne	.+22     	; 0x71e <prvAddNewTaskToReadyList+0x38>
 708:	d0 93 a0 06 	sts	0x06A0, r29	; 0x8006a0 <pxCurrentTCB+0x1>
 70c:	c0 93 9f 06 	sts	0x069F, r28	; 0x80069f <pxCurrentTCB>
 710:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	99 f4       	brne	.+38     	; 0x73e <prvAddNewTaskToReadyList+0x58>
 718:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <prvInitialiseTaskLists>
 71c:	10 c0       	rjmp	.+32     	; 0x73e <prvAddNewTaskToReadyList+0x58>
 71e:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <xSchedulerRunning>
 722:	81 11       	cpse	r24, r1
 724:	0c c0       	rjmp	.+24     	; 0x73e <prvAddNewTaskToReadyList+0x58>
 726:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 72a:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 72e:	96 89       	ldd	r25, Z+22	; 0x16
 730:	8e 89       	ldd	r24, Y+22	; 0x16
 732:	89 17       	cp	r24, r25
 734:	20 f0       	brcs	.+8      	; 0x73e <prvAddNewTaskToReadyList+0x58>
 736:	d0 93 a0 06 	sts	0x06A0, r29	; 0x8006a0 <pxCurrentTCB+0x1>
 73a:	c0 93 9f 06 	sts	0x069F, r28	; 0x80069f <pxCurrentTCB>
 73e:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <uxTaskNumber>
 742:	8f 5f       	subi	r24, 0xFF	; 255
 744:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <uxTaskNumber>
 748:	8e 89       	ldd	r24, Y+22	; 0x16
 74a:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 74e:	98 17       	cp	r25, r24
 750:	10 f4       	brcc	.+4      	; 0x756 <prvAddNewTaskToReadyList+0x70>
 752:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <uxTopReadyPriority>
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	fc 01       	movw	r30, r24
 75a:	ee 0f       	add	r30, r30
 75c:	ff 1f       	adc	r31, r31
 75e:	ee 0f       	add	r30, r30
 760:	ff 1f       	adc	r31, r31
 762:	ee 0f       	add	r30, r30
 764:	ff 1f       	adc	r31, r31
 766:	8e 0f       	add	r24, r30
 768:	9f 1f       	adc	r25, r31
 76a:	fc 01       	movw	r30, r24
 76c:	e4 5c       	subi	r30, 0xC4	; 196
 76e:	f9 4f       	sbci	r31, 0xF9	; 249
 770:	01 80       	ldd	r0, Z+1	; 0x01
 772:	f2 81       	ldd	r31, Z+2	; 0x02
 774:	e0 2d       	mov	r30, r0
 776:	fd 83       	std	Y+5, r31	; 0x05
 778:	ec 83       	std	Y+4, r30	; 0x04
 77a:	84 81       	ldd	r24, Z+4	; 0x04
 77c:	95 81       	ldd	r25, Z+5	; 0x05
 77e:	9f 83       	std	Y+7, r25	; 0x07
 780:	8e 83       	std	Y+6, r24	; 0x06
 782:	a4 81       	ldd	r26, Z+4	; 0x04
 784:	b5 81       	ldd	r27, Z+5	; 0x05
 786:	ce 01       	movw	r24, r28
 788:	02 96       	adiw	r24, 0x02	; 2
 78a:	13 96       	adiw	r26, 0x03	; 3
 78c:	9c 93       	st	X, r25
 78e:	8e 93       	st	-X, r24
 790:	12 97       	sbiw	r26, 0x02	; 2
 792:	95 83       	std	Z+5, r25	; 0x05
 794:	84 83       	std	Z+4, r24	; 0x04
 796:	ee 89       	ldd	r30, Y+22	; 0x16
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	cf 01       	movw	r24, r30
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	e8 0f       	add	r30, r24
 7aa:	f9 1f       	adc	r31, r25
 7ac:	e4 5c       	subi	r30, 0xC4	; 196
 7ae:	f9 4f       	sbci	r31, 0xF9	; 249
 7b0:	fb 87       	std	Y+11, r31	; 0x0b
 7b2:	ea 87       	std	Y+10, r30	; 0x0a
 7b4:	80 81       	ld	r24, Z
 7b6:	8f 5f       	subi	r24, 0xFF	; 255
 7b8:	80 83       	st	Z, r24
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <xSchedulerRunning>
 7c2:	88 23       	and	r24, r24
 7c4:	51 f0       	breq	.+20     	; 0x7da <prvAddNewTaskToReadyList+0xf4>
 7c6:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 7ca:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 7ce:	96 89       	ldd	r25, Z+22	; 0x16
 7d0:	8e 89       	ldd	r24, Y+22	; 0x16
 7d2:	98 17       	cp	r25, r24
 7d4:	10 f4       	brcc	.+4      	; 0x7da <prvAddNewTaskToReadyList+0xf4>
 7d6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vPortYield>
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	08 95       	ret

Disassembly of section .text.prvCheckTasksWaitingTermination:

0000139e <prvCheckTasksWaitingTermination>:
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	1c c0       	rjmp	.+56     	; 0x13dc <prvCheckTasksWaitingTermination+0x3e>
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	0f 92       	push	r0
    13aa:	e0 91 6e 06 	lds	r30, 0x066E	; 0x80066e <xTasksWaitingTermination+0x5>
    13ae:	f0 91 6f 06 	lds	r31, 0x066F	; 0x80066f <xTasksWaitingTermination+0x6>
    13b2:	c6 81       	ldd	r28, Z+6	; 0x06
    13b4:	d7 81       	ldd	r29, Z+7	; 0x07
    13b6:	ce 01       	movw	r24, r28
    13b8:	02 96       	adiw	r24, 0x02	; 2
    13ba:	0e 94 a8 09 	call	0x1350	; 0x1350 <uxListRemove>
    13be:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
    13c2:	81 50       	subi	r24, 0x01	; 1
    13c4:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <uxCurrentNumberOfTasks>
    13c8:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
    13cc:	81 50       	subi	r24, 0x01	; 1
    13ce:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
    13d2:	0f 90       	pop	r0
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	ce 01       	movw	r24, r28
    13d8:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <prvDeleteTCB>
    13dc:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
    13e0:	81 11       	cpse	r24, r1
    13e2:	e0 cf       	rjmp	.-64     	; 0x13a4 <prvCheckTasksWaitingTermination+0x6>
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

Disassembly of section .text.prvIdleTask:

0000162c <prvIdleTask>:

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
    162c:	0e 94 cf 09 	call	0x139e	; 0x139e <prvCheckTasksWaitingTermination>
    1630:	fd cf       	rjmp	.-6      	; 0x162c <prvIdleTask>

Disassembly of section .text.prvAddCurrentTaskToDelayedList:

000005e4 <prvAddCurrentTaskToDelayedList>:
    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
 5e4:	ff 92       	push	r15
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	ec 01       	movw	r28, r24
 5f0:	f6 2e       	mov	r15, r22
 5f2:	00 91 99 06 	lds	r16, 0x0699	; 0x800699 <xTickCount>
 5f6:	10 91 9a 06 	lds	r17, 0x069A	; 0x80069a <xTickCount+0x1>
 5fa:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 5fe:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 602:	02 96       	adiw	r24, 0x02	; 2
 604:	0e 94 a8 09 	call	0x1350	; 0x1350 <uxListRemove>
 608:	cf 3f       	cpi	r28, 0xFF	; 255
 60a:	8f ef       	ldi	r24, 0xFF	; 255
 60c:	d8 07       	cpc	r29, r24
 60e:	b1 f5       	brne	.+108    	; 0x67c <prvAddCurrentTaskToDelayedList+0x98>
 610:	ff 20       	and	r15, r15
 612:	a1 f1       	breq	.+104    	; 0x67c <prvAddCurrentTaskToDelayedList+0x98>
 614:	e0 e6       	ldi	r30, 0x60	; 96
 616:	f6 e0       	ldi	r31, 0x06	; 6
 618:	a1 81       	ldd	r26, Z+1	; 0x01
 61a:	b2 81       	ldd	r27, Z+2	; 0x02
 61c:	c0 91 9f 06 	lds	r28, 0x069F	; 0x80069f <pxCurrentTCB>
 620:	d0 91 a0 06 	lds	r29, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 624:	bd 83       	std	Y+5, r27	; 0x05
 626:	ac 83       	std	Y+4, r26	; 0x04
 628:	c0 91 9f 06 	lds	r28, 0x069F	; 0x80069f <pxCurrentTCB>
 62c:	d0 91 a0 06 	lds	r29, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 630:	14 96       	adiw	r26, 0x04	; 4
 632:	8d 91       	ld	r24, X+
 634:	9c 91       	ld	r25, X
 636:	15 97       	sbiw	r26, 0x05	; 5
 638:	9f 83       	std	Y+7, r25	; 0x07
 63a:	8e 83       	std	Y+6, r24	; 0x06
 63c:	14 96       	adiw	r26, 0x04	; 4
 63e:	cd 91       	ld	r28, X+
 640:	dc 91       	ld	r29, X
 642:	15 97       	sbiw	r26, 0x05	; 5
 644:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 648:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 64c:	02 96       	adiw	r24, 0x02	; 2
 64e:	9b 83       	std	Y+3, r25	; 0x03
 650:	8a 83       	std	Y+2, r24	; 0x02
 652:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 656:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 65a:	02 96       	adiw	r24, 0x02	; 2
 65c:	15 96       	adiw	r26, 0x05	; 5
 65e:	9c 93       	st	X, r25
 660:	8e 93       	st	-X, r24
 662:	14 97       	sbiw	r26, 0x04	; 4
 664:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 668:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 66c:	1b 96       	adiw	r26, 0x0b	; 11
 66e:	fc 93       	st	X, r31
 670:	ee 93       	st	-X, r30
 672:	1a 97       	sbiw	r26, 0x0a	; 10
 674:	80 81       	ld	r24, Z
 676:	8f 5f       	subi	r24, 0xFF	; 255
 678:	80 83       	st	Z, r24
 67a:	2f c0       	rjmp	.+94     	; 0x6da <prvAddCurrentTaskToDelayedList+0xf6>
 67c:	c0 0f       	add	r28, r16
 67e:	d1 1f       	adc	r29, r17
 680:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 684:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 688:	d3 83       	std	Z+3, r29	; 0x03
 68a:	c2 83       	std	Z+2, r28	; 0x02
 68c:	c0 17       	cp	r28, r16
 68e:	d1 07       	cpc	r29, r17
 690:	68 f4       	brcc	.+26     	; 0x6ac <prvAddCurrentTaskToDelayedList+0xc8>
 692:	60 91 9f 06 	lds	r22, 0x069F	; 0x80069f <pxCurrentTCB>
 696:	70 91 a0 06 	lds	r23, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 69a:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <pxOverflowDelayedTaskList>
 69e:	90 91 9c 06 	lds	r25, 0x069C	; 0x80069c <pxOverflowDelayedTaskList+0x1>
 6a2:	6e 5f       	subi	r22, 0xFE	; 254
 6a4:	7f 4f       	sbci	r23, 0xFF	; 255
 6a6:	0e 94 19 09 	call	0x1232	; 0x1232 <vListInsert>
 6aa:	17 c0       	rjmp	.+46     	; 0x6da <prvAddCurrentTaskToDelayedList+0xf6>
 6ac:	60 91 9f 06 	lds	r22, 0x069F	; 0x80069f <pxCurrentTCB>
 6b0:	70 91 a0 06 	lds	r23, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 6b4:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <pxDelayedTaskList>
 6b8:	90 91 9e 06 	lds	r25, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
 6bc:	6e 5f       	subi	r22, 0xFE	; 254
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	0e 94 19 09 	call	0x1232	; 0x1232 <vListInsert>
 6c4:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <xNextTaskUnblockTime>
 6c8:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <xNextTaskUnblockTime+0x1>
 6cc:	c8 17       	cp	r28, r24
 6ce:	d9 07       	cpc	r29, r25
 6d0:	20 f4       	brcc	.+8      	; 0x6da <prvAddCurrentTaskToDelayedList+0xf6>
 6d2:	d0 93 96 06 	sts	0x0696, r29	; 0x800696 <xNextTaskUnblockTime+0x1>
 6d6:	c0 93 95 06 	sts	0x0695, r28	; 0x800695 <xNextTaskUnblockTime>
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	ff 90       	pop	r15
 6e4:	08 95       	ret

Disassembly of section .text.xTaskCreate:

000009b8 <xTaskCreate>:
 9b8:	4f 92       	push	r4
 9ba:	5f 92       	push	r5
 9bc:	6f 92       	push	r6
 9be:	7f 92       	push	r7
 9c0:	8f 92       	push	r8
 9c2:	9f 92       	push	r9
 9c4:	af 92       	push	r10
 9c6:	bf 92       	push	r11
 9c8:	cf 92       	push	r12
 9ca:	df 92       	push	r13
 9cc:	ef 92       	push	r14
 9ce:	ff 92       	push	r15
 9d0:	0f 93       	push	r16
 9d2:	1f 93       	push	r17
 9d4:	cf 93       	push	r28
 9d6:	df 93       	push	r29
 9d8:	00 d0       	rcall	.+0      	; 0x9da <xTaskCreate+0x22>
 9da:	00 d0       	rcall	.+0      	; 0x9dc <xTaskCreate+0x24>
 9dc:	0f 92       	push	r0
 9de:	cd b7       	in	r28, 0x3d	; 61
 9e0:	de b7       	in	r29, 0x3e	; 62
 9e2:	3c 01       	movw	r6, r24
 9e4:	49 83       	std	Y+1, r20	; 0x01
 9e6:	5a 83       	std	Y+2, r21	; 0x02
 9e8:	6b 83       	std	Y+3, r22	; 0x03
 9ea:	49 01       	movw	r8, r18
 9ec:	28 01       	movw	r4, r16
 9ee:	c9 01       	movw	r24, r18
 9f0:	0e 94 40 08 	call	0x1080	; 0x1080 <pvPortMalloc>
 9f4:	8c 01       	movw	r16, r24
 9f6:	89 2b       	or	r24, r25
 9f8:	b9 f0       	breq	.+46     	; 0xa28 <xTaskCreate+0x70>
 9fa:	86 e2       	ldi	r24, 0x26	; 38
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 94 40 08 	call	0x1080	; 0x1080 <pvPortMalloc>
 a02:	9d 83       	std	Y+5, r25	; 0x05
 a04:	8c 83       	std	Y+4, r24	; 0x04
 a06:	89 2b       	or	r24, r25
 a08:	59 f0       	breq	.+22     	; 0xa20 <xTaskCreate+0x68>
 a0a:	86 e2       	ldi	r24, 0x26	; 38
 a0c:	ec 81       	ldd	r30, Y+4	; 0x04
 a0e:	fd 81       	ldd	r31, Y+5	; 0x05
 a10:	11 92       	st	Z+, r1
 a12:	8a 95       	dec	r24
 a14:	e9 f7       	brne	.-6      	; 0xa10 <xTaskCreate+0x58>
 a16:	ec 81       	ldd	r30, Y+4	; 0x04
 a18:	fd 81       	ldd	r31, Y+5	; 0x05
 a1a:	10 8f       	std	Z+24, r17	; 0x18
 a1c:	07 8b       	std	Z+23, r16	; 0x17
 a1e:	06 c0       	rjmp	.+12     	; 0xa2c <xTaskCreate+0x74>
 a20:	c8 01       	movw	r24, r16
 a22:	0e 94 1d 0b 	call	0x163a	; 0x163a <vPortFree>
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <xTaskCreate+0x74>
 a28:	1d 82       	std	Y+5, r1	; 0x05
 a2a:	1c 82       	std	Y+4, r1	; 0x04
 a2c:	8c 81       	ldd	r24, Y+4	; 0x04
 a2e:	9d 81       	ldd	r25, Y+5	; 0x05
 a30:	89 2b       	or	r24, r25
 a32:	d1 f0       	breq	.+52     	; 0xa68 <xTaskCreate+0xb0>
 a34:	84 01       	movw	r16, r8
 a36:	20 e0       	ldi	r18, 0x00	; 0
 a38:	30 e0       	ldi	r19, 0x00	; 0
 a3a:	1f 92       	push	r1
 a3c:	1f 92       	push	r1
 a3e:	1f 92       	push	r1
 a40:	8c 80       	ldd	r8, Y+4	; 0x04
 a42:	9d 80       	ldd	r9, Y+5	; 0x05
 a44:	56 01       	movw	r10, r12
 a46:	ce 2c       	mov	r12, r14
 a48:	72 01       	movw	r14, r4
 a4a:	49 81       	ldd	r20, Y+1	; 0x01
 a4c:	5a 81       	ldd	r21, Y+2	; 0x02
 a4e:	6b 81       	ldd	r22, Y+3	; 0x03
 a50:	c3 01       	movw	r24, r6
 a52:	0e 94 67 04 	call	0x8ce	; 0x8ce <prvInitialiseNewTask>
 a56:	8c 81       	ldd	r24, Y+4	; 0x04
 a58:	9d 81       	ldd	r25, Y+5	; 0x05
 a5a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <prvAddNewTaskToReadyList>
 a5e:	0f 90       	pop	r0
 a60:	0f 90       	pop	r0
 a62:	0f 90       	pop	r0
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	01 c0       	rjmp	.+2      	; 0xa6a <xTaskCreate+0xb2>
 a68:	8f ef       	ldi	r24, 0xFF	; 255
 a6a:	0f 90       	pop	r0
 a6c:	0f 90       	pop	r0
 a6e:	0f 90       	pop	r0
 a70:	0f 90       	pop	r0
 a72:	0f 90       	pop	r0
 a74:	df 91       	pop	r29
 a76:	cf 91       	pop	r28
 a78:	1f 91       	pop	r17
 a7a:	0f 91       	pop	r16
 a7c:	ff 90       	pop	r15
 a7e:	ef 90       	pop	r14
 a80:	df 90       	pop	r13
 a82:	cf 90       	pop	r12
 a84:	bf 90       	pop	r11
 a86:	af 90       	pop	r10
 a88:	9f 90       	pop	r9
 a8a:	8f 90       	pop	r8
 a8c:	7f 90       	pop	r7
 a8e:	6f 90       	pop	r6
 a90:	5f 90       	pop	r5
 a92:	4f 90       	pop	r4
 a94:	08 95       	ret

Disassembly of section .text.vTaskDelete:

00000dae <vTaskDelete>:
 dae:	0f 93       	push	r16
 db0:	1f 93       	push	r17
 db2:	cf 93       	push	r28
 db4:	df 93       	push	r29
 db6:	ec 01       	movw	r28, r24
 db8:	0f b6       	in	r0, 0x3f	; 63
 dba:	f8 94       	cli
 dbc:	0f 92       	push	r0
 dbe:	89 2b       	or	r24, r25
 dc0:	21 f4       	brne	.+8      	; 0xdca <vTaskDelete+0x1c>
 dc2:	c0 91 9f 06 	lds	r28, 0x069F	; 0x80069f <pxCurrentTCB>
 dc6:	d0 91 a0 06 	lds	r29, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 dca:	8e 01       	movw	r16, r28
 dcc:	0e 5f       	subi	r16, 0xFE	; 254
 dce:	1f 4f       	sbci	r17, 0xFF	; 255
 dd0:	c8 01       	movw	r24, r16
 dd2:	0e 94 a8 09 	call	0x1350	; 0x1350 <uxListRemove>
 dd6:	8c 89       	ldd	r24, Y+20	; 0x14
 dd8:	9d 89       	ldd	r25, Y+21	; 0x15
 dda:	89 2b       	or	r24, r25
 ddc:	21 f0       	breq	.+8      	; 0xde6 <vTaskDelete+0x38>
 dde:	ce 01       	movw	r24, r28
 de0:	0c 96       	adiw	r24, 0x0c	; 12
 de2:	0e 94 a8 09 	call	0x1350	; 0x1350 <uxListRemove>
 de6:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <uxTaskNumber>
 dea:	8f 5f       	subi	r24, 0xFF	; 255
 dec:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <uxTaskNumber>
 df0:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 df4:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 df8:	c8 17       	cp	r28, r24
 dfa:	d9 07       	cpc	r29, r25
 dfc:	59 f4       	brne	.+22     	; 0xe14 <vTaskDelete+0x66>
 dfe:	b8 01       	movw	r22, r16
 e00:	89 e6       	ldi	r24, 0x69	; 105
 e02:	96 e0       	ldi	r25, 0x06	; 6
 e04:	0e 94 16 0a 	call	0x142c	; 0x142c <vListInsertEnd>
 e08:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
 e0c:	8f 5f       	subi	r24, 0xFF	; 255
 e0e:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
 e12:	07 c0       	rjmp	.+14     	; 0xe22 <vTaskDelete+0x74>
 e14:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
 e18:	81 50       	subi	r24, 0x01	; 1
 e1a:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <uxCurrentNumberOfTasks>
 e1e:	0e 94 37 0a 	call	0x146e	; 0x146e <prvResetNextTaskUnblockTime>
 e22:	0f 90       	pop	r0
 e24:	0f be       	out	0x3f, r0	; 63
 e26:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 e2a:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 e2e:	c8 17       	cp	r28, r24
 e30:	d9 07       	cpc	r29, r25
 e32:	19 f0       	breq	.+6      	; 0xe3a <vTaskDelete+0x8c>
 e34:	ce 01       	movw	r24, r28
 e36:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <prvDeleteTCB>
 e3a:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <xSchedulerRunning>
 e3e:	88 23       	and	r24, r24
 e40:	49 f0       	breq	.+18     	; 0xe54 <vTaskDelete+0xa6>
 e42:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 e46:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 e4a:	c8 17       	cp	r28, r24
 e4c:	d9 07       	cpc	r29, r25
 e4e:	11 f4       	brne	.+4      	; 0xe54 <vTaskDelete+0xa6>
 e50:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vPortYield>
 e54:	df 91       	pop	r29
 e56:	cf 91       	pop	r28
 e58:	1f 91       	pop	r17
 e5a:	0f 91       	pop	r16
 e5c:	08 95       	ret

Disassembly of section .text.vTaskStartScheduler:

000012f2 <vTaskStartScheduler>:
    12f2:	cf 92       	push	r12
    12f4:	df 92       	push	r13
    12f6:	ef 92       	push	r14
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	0f 2e       	mov	r0, r31
    12fe:	f3 e9       	ldi	r31, 0x93	; 147
    1300:	cf 2e       	mov	r12, r31
    1302:	f6 e0       	ldi	r31, 0x06	; 6
    1304:	df 2e       	mov	r13, r31
    1306:	f0 2d       	mov	r31, r0
    1308:	e1 2c       	mov	r14, r1
    130a:	00 e0       	ldi	r16, 0x00	; 0
    130c:	10 e0       	ldi	r17, 0x00	; 0
    130e:	25 e5       	ldi	r18, 0x55	; 85
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	4e ea       	ldi	r20, 0xAE	; 174
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	86 e1       	ldi	r24, 0x16	; 22
    131a:	9b e0       	ldi	r25, 0x0B	; 11
    131c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <xTaskCreate>
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	81 f4       	brne	.+32     	; 0x1344 <vTaskStartScheduler+0x52>
    1324:	f8 94       	cli
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	9f ef       	ldi	r25, 0xFF	; 255
    132a:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <xNextTaskUnblockTime+0x1>
    132e:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <xNextTaskUnblockTime>
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <xSchedulerRunning>
    1338:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <xTickCount+0x1>
    133c:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <xTickCount>
    1340:	0e 94 4a 09 	call	0x1294	; 0x1294 <xPortStartScheduler>
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ef 90       	pop	r14
    134a:	df 90       	pop	r13
    134c:	cf 90       	pop	r12
    134e:	08 95       	ret

Disassembly of section .text.vTaskSuspendAll:

00001612 <vTaskSuspendAll>:
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
    1612:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
    1616:	8f 5f       	subi	r24, 0xFF	; 255
    1618:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <uxSchedulerSuspended>
    161c:	08 95       	ret

Disassembly of section .text.xTaskIncrementTick:

000000ba <xTaskIncrementTick>:
    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
  c6:	81 11       	cpse	r24, r1
  c8:	01 c1       	rjmp	.+514    	; 0x2cc <xTaskIncrementTick+0x212>
  ca:	c0 91 99 06 	lds	r28, 0x0699	; 0x800699 <xTickCount>
  ce:	d0 91 9a 06 	lds	r29, 0x069A	; 0x80069a <xTickCount+0x1>
  d2:	8e 01       	movw	r16, r28
  d4:	0f 5f       	subi	r16, 0xFF	; 255
  d6:	1f 4f       	sbci	r17, 0xFF	; 255
  d8:	10 93 9a 06 	sts	0x069A, r17	; 0x80069a <xTickCount+0x1>
  dc:	00 93 99 06 	sts	0x0699, r16	; 0x800699 <xTickCount>
  e0:	01 15       	cp	r16, r1
  e2:	11 05       	cpc	r17, r1
  e4:	b9 f4       	brne	.+46     	; 0x114 <xTaskIncrementTick+0x5a>
  e6:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <pxDelayedTaskList>
  ea:	90 91 9e 06 	lds	r25, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
  ee:	20 91 9b 06 	lds	r18, 0x069B	; 0x80069b <pxOverflowDelayedTaskList>
  f2:	30 91 9c 06 	lds	r19, 0x069C	; 0x80069c <pxOverflowDelayedTaskList+0x1>
  f6:	30 93 9e 06 	sts	0x069E, r19	; 0x80069e <pxDelayedTaskList+0x1>
  fa:	20 93 9d 06 	sts	0x069D, r18	; 0x80069d <pxDelayedTaskList>
  fe:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <pxOverflowDelayedTaskList+0x1>
 102:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <pxOverflowDelayedTaskList>
 106:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <xNumOfOverflows>
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <xNumOfOverflows>
 110:	0e 94 37 0a 	call	0x146e	; 0x146e <prvResetNextTaskUnblockTime>
 114:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <xNextTaskUnblockTime>
 118:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <xNextTaskUnblockTime+0x1>
 11c:	08 17       	cp	r16, r24
 11e:	19 07       	cpc	r17, r25
 120:	20 f4       	brcc	.+8      	; 0x12a <xTaskIncrementTick+0x70>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	b8 c0       	rjmp	.+368    	; 0x296 <xTaskIncrementTick+0x1dc>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	01 c0       	rjmp	.+2      	; 0x12c <xTaskIncrementTick+0x72>
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <pxDelayedTaskList>
 130:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
 134:	90 81       	ld	r25, Z
 136:	91 11       	cpse	r25, r1
 138:	07 c0       	rjmp	.+14     	; 0x148 <xTaskIncrementTick+0x8e>
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	3f ef       	ldi	r19, 0xFF	; 255
 13e:	30 93 96 06 	sts	0x0696, r19	; 0x800696 <xNextTaskUnblockTime+0x1>
 142:	20 93 95 06 	sts	0x0695, r18	; 0x800695 <xNextTaskUnblockTime>
 146:	a7 c0       	rjmp	.+334    	; 0x296 <xTaskIncrementTick+0x1dc>
 148:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <pxDelayedTaskList>
 14c:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
 150:	05 80       	ldd	r0, Z+5	; 0x05
 152:	f6 81       	ldd	r31, Z+6	; 0x06
 154:	e0 2d       	mov	r30, r0
 156:	06 80       	ldd	r0, Z+6	; 0x06
 158:	f7 81       	ldd	r31, Z+7	; 0x07
 15a:	e0 2d       	mov	r30, r0
 15c:	22 81       	ldd	r18, Z+2	; 0x02
 15e:	33 81       	ldd	r19, Z+3	; 0x03
 160:	02 17       	cp	r16, r18
 162:	13 07       	cpc	r17, r19
 164:	28 f4       	brcc	.+10     	; 0x170 <xTaskIncrementTick+0xb6>
 166:	30 93 96 06 	sts	0x0696, r19	; 0x800696 <xNextTaskUnblockTime+0x1>
 16a:	20 93 95 06 	sts	0x0695, r18	; 0x800695 <xNextTaskUnblockTime>
 16e:	93 c0       	rjmp	.+294    	; 0x296 <xTaskIncrementTick+0x1dc>
 170:	a2 85       	ldd	r26, Z+10	; 0x0a
 172:	b3 85       	ldd	r27, Z+11	; 0x0b
 174:	24 81       	ldd	r18, Z+4	; 0x04
 176:	35 81       	ldd	r19, Z+5	; 0x05
 178:	46 81       	ldd	r20, Z+6	; 0x06
 17a:	57 81       	ldd	r21, Z+7	; 0x07
 17c:	e9 01       	movw	r28, r18
 17e:	5d 83       	std	Y+5, r21	; 0x05
 180:	4c 83       	std	Y+4, r20	; 0x04
 182:	26 81       	ldd	r18, Z+6	; 0x06
 184:	37 81       	ldd	r19, Z+7	; 0x07
 186:	44 81       	ldd	r20, Z+4	; 0x04
 188:	55 81       	ldd	r21, Z+5	; 0x05
 18a:	e9 01       	movw	r28, r18
 18c:	5b 83       	std	Y+3, r21	; 0x03
 18e:	4a 83       	std	Y+2, r20	; 0x02
 190:	11 96       	adiw	r26, 0x01	; 1
 192:	2d 91       	ld	r18, X+
 194:	3c 91       	ld	r19, X
 196:	12 97       	sbiw	r26, 0x02	; 2
 198:	af 01       	movw	r20, r30
 19a:	4e 5f       	subi	r20, 0xFE	; 254
 19c:	5f 4f       	sbci	r21, 0xFF	; 255
 19e:	24 17       	cp	r18, r20
 1a0:	35 07       	cpc	r19, r21
 1a2:	31 f4       	brne	.+12     	; 0x1b0 <xTaskIncrementTick+0xf6>
 1a4:	26 81       	ldd	r18, Z+6	; 0x06
 1a6:	37 81       	ldd	r19, Z+7	; 0x07
 1a8:	12 96       	adiw	r26, 0x02	; 2
 1aa:	3c 93       	st	X, r19
 1ac:	2e 93       	st	-X, r18
 1ae:	11 97       	sbiw	r26, 0x01	; 1
 1b0:	13 86       	std	Z+11, r1	; 0x0b
 1b2:	12 86       	std	Z+10, r1	; 0x0a
 1b4:	9c 91       	ld	r25, X
 1b6:	91 50       	subi	r25, 0x01	; 1
 1b8:	9c 93       	st	X, r25
 1ba:	a4 89       	ldd	r26, Z+20	; 0x14
 1bc:	b5 89       	ldd	r27, Z+21	; 0x15
 1be:	10 97       	sbiw	r26, 0x00	; 0
 1c0:	19 f1       	breq	.+70     	; 0x208 <xTaskIncrementTick+0x14e>
 1c2:	26 85       	ldd	r18, Z+14	; 0x0e
 1c4:	37 85       	ldd	r19, Z+15	; 0x0f
 1c6:	60 89       	ldd	r22, Z+16	; 0x10
 1c8:	71 89       	ldd	r23, Z+17	; 0x11
 1ca:	e9 01       	movw	r28, r18
 1cc:	7d 83       	std	Y+5, r23	; 0x05
 1ce:	6c 83       	std	Y+4, r22	; 0x04
 1d0:	20 89       	ldd	r18, Z+16	; 0x10
 1d2:	31 89       	ldd	r19, Z+17	; 0x11
 1d4:	66 85       	ldd	r22, Z+14	; 0x0e
 1d6:	77 85       	ldd	r23, Z+15	; 0x0f
 1d8:	e9 01       	movw	r28, r18
 1da:	7b 83       	std	Y+3, r23	; 0x03
 1dc:	6a 83       	std	Y+2, r22	; 0x02
 1de:	11 96       	adiw	r26, 0x01	; 1
 1e0:	6d 91       	ld	r22, X+
 1e2:	7c 91       	ld	r23, X
 1e4:	12 97       	sbiw	r26, 0x02	; 2
 1e6:	9f 01       	movw	r18, r30
 1e8:	24 5f       	subi	r18, 0xF4	; 244
 1ea:	3f 4f       	sbci	r19, 0xFF	; 255
 1ec:	62 17       	cp	r22, r18
 1ee:	73 07       	cpc	r23, r19
 1f0:	31 f4       	brne	.+12     	; 0x1fe <xTaskIncrementTick+0x144>
 1f2:	20 89       	ldd	r18, Z+16	; 0x10
 1f4:	31 89       	ldd	r19, Z+17	; 0x11
 1f6:	12 96       	adiw	r26, 0x02	; 2
 1f8:	3c 93       	st	X, r19
 1fa:	2e 93       	st	-X, r18
 1fc:	11 97       	sbiw	r26, 0x01	; 1
 1fe:	15 8a       	std	Z+21, r1	; 0x15
 200:	14 8a       	std	Z+20, r1	; 0x14
 202:	9c 91       	ld	r25, X
 204:	91 50       	subi	r25, 0x01	; 1
 206:	9c 93       	st	X, r25
 208:	26 89       	ldd	r18, Z+22	; 0x16
 20a:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 20e:	92 17       	cp	r25, r18
 210:	10 f4       	brcc	.+4      	; 0x216 <xTaskIncrementTick+0x15c>
 212:	20 93 a6 06 	sts	0x06A6, r18	; 0x8006a6 <uxTopReadyPriority>
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	d9 01       	movw	r26, r18
 21a:	aa 0f       	add	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	aa 0f       	add	r26, r26
 220:	bb 1f       	adc	r27, r27
 222:	aa 0f       	add	r26, r26
 224:	bb 1f       	adc	r27, r27
 226:	2a 0f       	add	r18, r26
 228:	3b 1f       	adc	r19, r27
 22a:	d9 01       	movw	r26, r18
 22c:	a4 5c       	subi	r26, 0xC4	; 196
 22e:	b9 4f       	sbci	r27, 0xF9	; 249
 230:	11 96       	adiw	r26, 0x01	; 1
 232:	0d 90       	ld	r0, X+
 234:	bc 91       	ld	r27, X
 236:	a0 2d       	mov	r26, r0
 238:	b5 83       	std	Z+5, r27	; 0x05
 23a:	a4 83       	std	Z+4, r26	; 0x04
 23c:	14 96       	adiw	r26, 0x04	; 4
 23e:	2d 91       	ld	r18, X+
 240:	3c 91       	ld	r19, X
 242:	15 97       	sbiw	r26, 0x05	; 5
 244:	37 83       	std	Z+7, r19	; 0x07
 246:	26 83       	std	Z+6, r18	; 0x06
 248:	14 96       	adiw	r26, 0x04	; 4
 24a:	2d 91       	ld	r18, X+
 24c:	3c 91       	ld	r19, X
 24e:	15 97       	sbiw	r26, 0x05	; 5
 250:	e9 01       	movw	r28, r18
 252:	5b 83       	std	Y+3, r21	; 0x03
 254:	4a 83       	std	Y+2, r20	; 0x02
 256:	15 96       	adiw	r26, 0x05	; 5
 258:	5c 93       	st	X, r21
 25a:	4e 93       	st	-X, r20
 25c:	14 97       	sbiw	r26, 0x04	; 4
 25e:	a6 89       	ldd	r26, Z+22	; 0x16
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	9d 01       	movw	r18, r26
 264:	22 0f       	add	r18, r18
 266:	33 1f       	adc	r19, r19
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
 270:	a2 0f       	add	r26, r18
 272:	b3 1f       	adc	r27, r19
 274:	a4 5c       	subi	r26, 0xC4	; 196
 276:	b9 4f       	sbci	r27, 0xF9	; 249
 278:	b3 87       	std	Z+11, r27	; 0x0b
 27a:	a2 87       	std	Z+10, r26	; 0x0a
 27c:	9c 91       	ld	r25, X
 27e:	9f 5f       	subi	r25, 0xFF	; 255
 280:	9c 93       	st	X, r25
 282:	26 89       	ldd	r18, Z+22	; 0x16
 284:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 288:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 28c:	96 89       	ldd	r25, Z+22	; 0x16
 28e:	92 17       	cp	r25, r18
 290:	08 f4       	brcc	.+2      	; 0x294 <xTaskIncrementTick+0x1da>
 292:	49 cf       	rjmp	.-366    	; 0x126 <xTaskIncrementTick+0x6c>
 294:	4b cf       	rjmp	.-362    	; 0x12c <xTaskIncrementTick+0x72>
 296:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 29a:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 29e:	26 89       	ldd	r18, Z+22	; 0x16
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	f9 01       	movw	r30, r18
 2a4:	ee 0f       	add	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	ee 0f       	add	r30, r30
 2ae:	ff 1f       	adc	r31, r31
 2b0:	2e 0f       	add	r18, r30
 2b2:	3f 1f       	adc	r19, r31
 2b4:	f9 01       	movw	r30, r18
 2b6:	e4 5c       	subi	r30, 0xC4	; 196
 2b8:	f9 4f       	sbci	r31, 0xF9	; 249
 2ba:	90 81       	ld	r25, Z
 2bc:	92 30       	cpi	r25, 0x02	; 2
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <xTaskIncrementTick+0x208>
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <xYieldPending>
 2c6:	91 11       	cpse	r25, r1
 2c8:	0c c0       	rjmp	.+24     	; 0x2e2 <xTaskIncrementTick+0x228>
 2ca:	0c c0       	rjmp	.+24     	; 0x2e4 <xTaskIncrementTick+0x22a>
 2cc:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <xPendedTicks>
 2d0:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <xPendedTicks+0x1>
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	90 93 98 06 	sts	0x0698, r25	; 0x800698 <xPendedTicks+0x1>
 2da:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <xPendedTicks>
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <xTaskIncrementTick+0x22a>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

Disassembly of section .text.xTaskResumeAll:

000002ee <xTaskResumeAll>:
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	0f 92       	push	r0
 2f8:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
 2fc:	81 50       	subi	r24, 0x01	; 1
 2fe:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <uxSchedulerSuspended>
 302:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
 306:	81 11       	cpse	r24, r1
 308:	bf c0       	rjmp	.+382    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 30a:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
 30e:	81 11       	cpse	r24, r1
 310:	96 c0       	rjmp	.+300    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 312:	bd c0       	rjmp	.+378    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 314:	e0 91 77 06 	lds	r30, 0x0677	; 0x800677 <xPendingReadyList+0x5>
 318:	f0 91 78 06 	lds	r31, 0x0678	; 0x800678 <xPendingReadyList+0x6>
 31c:	06 80       	ldd	r0, Z+6	; 0x06
 31e:	f7 81       	ldd	r31, Z+7	; 0x07
 320:	e0 2d       	mov	r30, r0
 322:	a4 89       	ldd	r26, Z+20	; 0x14
 324:	b5 89       	ldd	r27, Z+21	; 0x15
 326:	c6 85       	ldd	r28, Z+14	; 0x0e
 328:	d7 85       	ldd	r29, Z+15	; 0x0f
 32a:	80 89       	ldd	r24, Z+16	; 0x10
 32c:	91 89       	ldd	r25, Z+17	; 0x11
 32e:	9d 83       	std	Y+5, r25	; 0x05
 330:	8c 83       	std	Y+4, r24	; 0x04
 332:	c0 89       	ldd	r28, Z+16	; 0x10
 334:	d1 89       	ldd	r29, Z+17	; 0x11
 336:	86 85       	ldd	r24, Z+14	; 0x0e
 338:	97 85       	ldd	r25, Z+15	; 0x0f
 33a:	9b 83       	std	Y+3, r25	; 0x03
 33c:	8a 83       	std	Y+2, r24	; 0x02
 33e:	11 96       	adiw	r26, 0x01	; 1
 340:	2d 91       	ld	r18, X+
 342:	3c 91       	ld	r19, X
 344:	12 97       	sbiw	r26, 0x02	; 2
 346:	cf 01       	movw	r24, r30
 348:	0c 96       	adiw	r24, 0x0c	; 12
 34a:	28 17       	cp	r18, r24
 34c:	39 07       	cpc	r19, r25
 34e:	31 f4       	brne	.+12     	; 0x35c <xTaskResumeAll+0x6e>
 350:	80 89       	ldd	r24, Z+16	; 0x10
 352:	91 89       	ldd	r25, Z+17	; 0x11
 354:	12 96       	adiw	r26, 0x02	; 2
 356:	9c 93       	st	X, r25
 358:	8e 93       	st	-X, r24
 35a:	11 97       	sbiw	r26, 0x01	; 1
 35c:	15 8a       	std	Z+21, r1	; 0x15
 35e:	14 8a       	std	Z+20, r1	; 0x14
 360:	8c 91       	ld	r24, X
 362:	81 50       	subi	r24, 0x01	; 1
 364:	8c 93       	st	X, r24
 366:	a2 85       	ldd	r26, Z+10	; 0x0a
 368:	b3 85       	ldd	r27, Z+11	; 0x0b
 36a:	c4 81       	ldd	r28, Z+4	; 0x04
 36c:	d5 81       	ldd	r29, Z+5	; 0x05
 36e:	86 81       	ldd	r24, Z+6	; 0x06
 370:	97 81       	ldd	r25, Z+7	; 0x07
 372:	9d 83       	std	Y+5, r25	; 0x05
 374:	8c 83       	std	Y+4, r24	; 0x04
 376:	c6 81       	ldd	r28, Z+6	; 0x06
 378:	d7 81       	ldd	r29, Z+7	; 0x07
 37a:	84 81       	ldd	r24, Z+4	; 0x04
 37c:	95 81       	ldd	r25, Z+5	; 0x05
 37e:	9b 83       	std	Y+3, r25	; 0x03
 380:	8a 83       	std	Y+2, r24	; 0x02
 382:	11 96       	adiw	r26, 0x01	; 1
 384:	8d 91       	ld	r24, X+
 386:	9c 91       	ld	r25, X
 388:	12 97       	sbiw	r26, 0x02	; 2
 38a:	9f 01       	movw	r18, r30
 38c:	2e 5f       	subi	r18, 0xFE	; 254
 38e:	3f 4f       	sbci	r19, 0xFF	; 255
 390:	82 17       	cp	r24, r18
 392:	93 07       	cpc	r25, r19
 394:	31 f4       	brne	.+12     	; 0x3a2 <xTaskResumeAll+0xb4>
 396:	86 81       	ldd	r24, Z+6	; 0x06
 398:	97 81       	ldd	r25, Z+7	; 0x07
 39a:	12 96       	adiw	r26, 0x02	; 2
 39c:	9c 93       	st	X, r25
 39e:	8e 93       	st	-X, r24
 3a0:	11 97       	sbiw	r26, 0x01	; 1
 3a2:	13 86       	std	Z+11, r1	; 0x0b
 3a4:	12 86       	std	Z+10, r1	; 0x0a
 3a6:	8c 91       	ld	r24, X
 3a8:	81 50       	subi	r24, 0x01	; 1
 3aa:	8c 93       	st	X, r24
 3ac:	86 89       	ldd	r24, Z+22	; 0x16
 3ae:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 3b2:	98 17       	cp	r25, r24
 3b4:	10 f4       	brcc	.+4      	; 0x3ba <xTaskResumeAll+0xcc>
 3b6:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <uxTopReadyPriority>
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	dc 01       	movw	r26, r24
 3be:	aa 0f       	add	r26, r26
 3c0:	bb 1f       	adc	r27, r27
 3c2:	aa 0f       	add	r26, r26
 3c4:	bb 1f       	adc	r27, r27
 3c6:	aa 0f       	add	r26, r26
 3c8:	bb 1f       	adc	r27, r27
 3ca:	8a 0f       	add	r24, r26
 3cc:	9b 1f       	adc	r25, r27
 3ce:	dc 01       	movw	r26, r24
 3d0:	a4 5c       	subi	r26, 0xC4	; 196
 3d2:	b9 4f       	sbci	r27, 0xF9	; 249
 3d4:	11 96       	adiw	r26, 0x01	; 1
 3d6:	0d 90       	ld	r0, X+
 3d8:	bc 91       	ld	r27, X
 3da:	a0 2d       	mov	r26, r0
 3dc:	b5 83       	std	Z+5, r27	; 0x05
 3de:	a4 83       	std	Z+4, r26	; 0x04
 3e0:	14 96       	adiw	r26, 0x04	; 4
 3e2:	8d 91       	ld	r24, X+
 3e4:	9c 91       	ld	r25, X
 3e6:	15 97       	sbiw	r26, 0x05	; 5
 3e8:	97 83       	std	Z+7, r25	; 0x07
 3ea:	86 83       	std	Z+6, r24	; 0x06
 3ec:	14 96       	adiw	r26, 0x04	; 4
 3ee:	cd 91       	ld	r28, X+
 3f0:	dc 91       	ld	r29, X
 3f2:	15 97       	sbiw	r26, 0x05	; 5
 3f4:	3b 83       	std	Y+3, r19	; 0x03
 3f6:	2a 83       	std	Y+2, r18	; 0x02
 3f8:	15 96       	adiw	r26, 0x05	; 5
 3fa:	3c 93       	st	X, r19
 3fc:	2e 93       	st	-X, r18
 3fe:	14 97       	sbiw	r26, 0x04	; 4
 400:	a6 89       	ldd	r26, Z+22	; 0x16
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	cd 01       	movw	r24, r26
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	a8 0f       	add	r26, r24
 414:	b9 1f       	adc	r27, r25
 416:	a4 5c       	subi	r26, 0xC4	; 196
 418:	b9 4f       	sbci	r27, 0xF9	; 249
 41a:	b3 87       	std	Z+11, r27	; 0x0b
 41c:	a2 87       	std	Z+10, r26	; 0x0a
 41e:	8c 91       	ld	r24, X
 420:	8f 5f       	subi	r24, 0xFF	; 255
 422:	8c 93       	st	X, r24
 424:	96 89       	ldd	r25, Z+22	; 0x16
 426:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 42a:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 42e:	56 96       	adiw	r26, 0x16	; 22
 430:	8c 91       	ld	r24, X
 432:	98 17       	cp	r25, r24
 434:	30 f0       	brcs	.+12     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	e0 e0       	ldi	r30, 0x00	; 0
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <xPendingReadyList>
 446:	81 11       	cpse	r24, r1
 448:	65 cf       	rjmp	.-310    	; 0x314 <xTaskResumeAll+0x26>
 44a:	ef 2b       	or	r30, r31
 44c:	11 f0       	breq	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	0e 94 37 0a 	call	0x146e	; 0x146e <prvResetNextTaskUnblockTime>
 452:	c0 91 97 06 	lds	r28, 0x0697	; 0x800697 <xPendedTicks>
 456:	d0 91 98 06 	lds	r29, 0x0698	; 0x800698 <xPendedTicks+0x1>
 45a:	20 97       	sbiw	r28, 0x00	; 0
 45c:	69 f0       	breq	.+26     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 45e:	0e 94 5d 00 	call	0xba	; 0xba <xTaskIncrementTick>
 462:	88 23       	and	r24, r24
 464:	19 f0       	breq	.+6      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
 46c:	21 97       	sbiw	r28, 0x01	; 1
 46e:	b9 f7       	brne	.-18     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 470:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <xPendedTicks+0x1>
 474:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <xPendedTicks>
 478:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <xYieldPending>
 47c:	88 23       	and	r24, r24
 47e:	31 f0       	breq	.+12     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 480:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vPortYield>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	03 c0       	rjmp	.+6      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	01 c0       	rjmp	.+2      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

Disassembly of section .text.vTaskDelay:

00001530 <vTaskDelay>:
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	ec 01       	movw	r28, r24
    1536:	89 2b       	or	r24, r25
    1538:	49 f0       	breq	.+18     	; 0x154c <vTaskDelay+0x1c>
    153a:	0e 94 09 0b 	call	0x1612	; 0x1612 <vTaskSuspendAll>
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	ce 01       	movw	r24, r28
    1542:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <prvAddCurrentTaskToDelayedList>
    1546:	0e 94 77 01 	call	0x2ee	; 0x2ee <xTaskResumeAll>
    154a:	01 c0       	rjmp	.+2      	; 0x154e <vTaskDelay+0x1e>
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	81 11       	cpse	r24, r1
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <vTaskDelay+0x26>
    1552:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vPortYield>
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

Disassembly of section .text.vTaskSwitchContext:

00000e5e <vTaskSwitchContext>:
 e5e:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
 e62:	88 23       	and	r24, r24
 e64:	21 f0       	breq	.+8      	; 0xe6e <vTaskSwitchContext+0x10>
 e66:	81 e0       	ldi	r24, 0x01	; 1
 e68:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
 e6c:	08 95       	ret
 e6e:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <xYieldPending>
 e72:	20 91 a6 06 	lds	r18, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 e76:	01 c0       	rjmp	.+2      	; 0xe7a <vTaskSwitchContext+0x1c>
 e78:	21 50       	subi	r18, 0x01	; 1
 e7a:	82 2f       	mov	r24, r18
 e7c:	90 e0       	ldi	r25, 0x00	; 0
 e7e:	fc 01       	movw	r30, r24
 e80:	ee 0f       	add	r30, r30
 e82:	ff 1f       	adc	r31, r31
 e84:	ee 0f       	add	r30, r30
 e86:	ff 1f       	adc	r31, r31
 e88:	ee 0f       	add	r30, r30
 e8a:	ff 1f       	adc	r31, r31
 e8c:	e8 0f       	add	r30, r24
 e8e:	f9 1f       	adc	r31, r25
 e90:	e4 5c       	subi	r30, 0xC4	; 196
 e92:	f9 4f       	sbci	r31, 0xF9	; 249
 e94:	30 81       	ld	r19, Z
 e96:	33 23       	and	r19, r19
 e98:	79 f3       	breq	.-34     	; 0xe78 <vTaskSwitchContext+0x1a>
 e9a:	ac 01       	movw	r20, r24
 e9c:	44 0f       	add	r20, r20
 e9e:	55 1f       	adc	r21, r21
 ea0:	44 0f       	add	r20, r20
 ea2:	55 1f       	adc	r21, r21
 ea4:	44 0f       	add	r20, r20
 ea6:	55 1f       	adc	r21, r21
 ea8:	48 0f       	add	r20, r24
 eaa:	59 1f       	adc	r21, r25
 eac:	df 01       	movw	r26, r30
 eae:	01 80       	ldd	r0, Z+1	; 0x01
 eb0:	f2 81       	ldd	r31, Z+2	; 0x02
 eb2:	e0 2d       	mov	r30, r0
 eb4:	02 80       	ldd	r0, Z+2	; 0x02
 eb6:	f3 81       	ldd	r31, Z+3	; 0x03
 eb8:	e0 2d       	mov	r30, r0
 eba:	12 96       	adiw	r26, 0x02	; 2
 ebc:	fc 93       	st	X, r31
 ebe:	ee 93       	st	-X, r30
 ec0:	11 97       	sbiw	r26, 0x01	; 1
 ec2:	41 5c       	subi	r20, 0xC1	; 193
 ec4:	59 4f       	sbci	r21, 0xF9	; 249
 ec6:	e4 17       	cp	r30, r20
 ec8:	f5 07       	cpc	r31, r21
 eca:	29 f4       	brne	.+10     	; 0xed6 <vTaskSwitchContext+0x78>
 ecc:	42 81       	ldd	r20, Z+2	; 0x02
 ece:	53 81       	ldd	r21, Z+3	; 0x03
 ed0:	fd 01       	movw	r30, r26
 ed2:	52 83       	std	Z+2, r21	; 0x02
 ed4:	41 83       	std	Z+1, r20	; 0x01
 ed6:	fc 01       	movw	r30, r24
 ed8:	ee 0f       	add	r30, r30
 eda:	ff 1f       	adc	r31, r31
 edc:	ee 0f       	add	r30, r30
 ede:	ff 1f       	adc	r31, r31
 ee0:	ee 0f       	add	r30, r30
 ee2:	ff 1f       	adc	r31, r31
 ee4:	8e 0f       	add	r24, r30
 ee6:	9f 1f       	adc	r25, r31
 ee8:	fc 01       	movw	r30, r24
 eea:	e4 5c       	subi	r30, 0xC4	; 196
 eec:	f9 4f       	sbci	r31, 0xF9	; 249
 eee:	01 80       	ldd	r0, Z+1	; 0x01
 ef0:	f2 81       	ldd	r31, Z+2	; 0x02
 ef2:	e0 2d       	mov	r30, r0
 ef4:	86 81       	ldd	r24, Z+6	; 0x06
 ef6:	97 81       	ldd	r25, Z+7	; 0x07
 ef8:	90 93 a0 06 	sts	0x06A0, r25	; 0x8006a0 <pxCurrentTCB+0x1>
 efc:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <pxCurrentTCB>
 f00:	20 93 a6 06 	sts	0x06A6, r18	; 0x8006a6 <uxTopReadyPriority>
 f04:	08 95       	ret

Disassembly of section .text.vTaskPlaceOnUnorderedEventList:

00000f06 <vTaskPlaceOnUnorderedEventList>:
 f06:	cf 93       	push	r28
 f08:	df 93       	push	r29
 f0a:	fc 01       	movw	r30, r24
 f0c:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 f10:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 f14:	70 68       	ori	r23, 0x80	; 128
 f16:	1d 96       	adiw	r26, 0x0d	; 13
 f18:	7c 93       	st	X, r23
 f1a:	6e 93       	st	-X, r22
 f1c:	1c 97       	sbiw	r26, 0x0c	; 12
 f1e:	a1 81       	ldd	r26, Z+1	; 0x01
 f20:	b2 81       	ldd	r27, Z+2	; 0x02
 f22:	c0 91 9f 06 	lds	r28, 0x069F	; 0x80069f <pxCurrentTCB>
 f26:	d0 91 a0 06 	lds	r29, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 f2a:	bf 87       	std	Y+15, r27	; 0x0f
 f2c:	ae 87       	std	Y+14, r26	; 0x0e
 f2e:	c0 91 9f 06 	lds	r28, 0x069F	; 0x80069f <pxCurrentTCB>
 f32:	d0 91 a0 06 	lds	r29, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 f36:	14 96       	adiw	r26, 0x04	; 4
 f38:	8d 91       	ld	r24, X+
 f3a:	9c 91       	ld	r25, X
 f3c:	15 97       	sbiw	r26, 0x05	; 5
 f3e:	99 8b       	std	Y+17, r25	; 0x11
 f40:	88 8b       	std	Y+16, r24	; 0x10
 f42:	14 96       	adiw	r26, 0x04	; 4
 f44:	cd 91       	ld	r28, X+
 f46:	dc 91       	ld	r29, X
 f48:	15 97       	sbiw	r26, 0x05	; 5
 f4a:	20 91 9f 06 	lds	r18, 0x069F	; 0x80069f <pxCurrentTCB>
 f4e:	30 91 a0 06 	lds	r19, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 f52:	24 5f       	subi	r18, 0xF4	; 244
 f54:	3f 4f       	sbci	r19, 0xFF	; 255
 f56:	3b 83       	std	Y+3, r19	; 0x03
 f58:	2a 83       	std	Y+2, r18	; 0x02
 f5a:	20 91 9f 06 	lds	r18, 0x069F	; 0x80069f <pxCurrentTCB>
 f5e:	30 91 a0 06 	lds	r19, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 f62:	24 5f       	subi	r18, 0xF4	; 244
 f64:	3f 4f       	sbci	r19, 0xFF	; 255
 f66:	15 96       	adiw	r26, 0x05	; 5
 f68:	3c 93       	st	X, r19
 f6a:	2e 93       	st	-X, r18
 f6c:	14 97       	sbiw	r26, 0x04	; 4
 f6e:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 f72:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 f76:	55 96       	adiw	r26, 0x15	; 21
 f78:	fc 93       	st	X, r31
 f7a:	ee 93       	st	-X, r30
 f7c:	54 97       	sbiw	r26, 0x14	; 20
 f7e:	90 81       	ld	r25, Z
 f80:	9f 5f       	subi	r25, 0xFF	; 255
 f82:	90 83       	st	Z, r25
 f84:	61 e0       	ldi	r22, 0x01	; 1
 f86:	ca 01       	movw	r24, r20
 f88:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <prvAddCurrentTaskToDelayedList>
 f8c:	df 91       	pop	r29
 f8e:	cf 91       	pop	r28
 f90:	08 95       	ret

Disassembly of section .text.vTaskRemoveFromUnorderedEventList:

00000498 <vTaskRemoveFromUnorderedEventList>:
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	dc 01       	movw	r26, r24
 49e:	70 68       	ori	r23, 0x80	; 128
 4a0:	11 96       	adiw	r26, 0x01	; 1
 4a2:	7c 93       	st	X, r23
 4a4:	6e 93       	st	-X, r22
 4a6:	16 96       	adiw	r26, 0x06	; 6
 4a8:	ed 91       	ld	r30, X+
 4aa:	fc 91       	ld	r31, X
 4ac:	17 97       	sbiw	r26, 0x07	; 7
 4ae:	18 96       	adiw	r26, 0x08	; 8
 4b0:	4d 91       	ld	r20, X+
 4b2:	5c 91       	ld	r21, X
 4b4:	19 97       	sbiw	r26, 0x09	; 9
 4b6:	12 96       	adiw	r26, 0x02	; 2
 4b8:	8d 91       	ld	r24, X+
 4ba:	9c 91       	ld	r25, X
 4bc:	13 97       	sbiw	r26, 0x03	; 3
 4be:	14 96       	adiw	r26, 0x04	; 4
 4c0:	2d 91       	ld	r18, X+
 4c2:	3c 91       	ld	r19, X
 4c4:	15 97       	sbiw	r26, 0x05	; 5
 4c6:	ec 01       	movw	r28, r24
 4c8:	3d 83       	std	Y+5, r19	; 0x05
 4ca:	2c 83       	std	Y+4, r18	; 0x04
 4cc:	14 96       	adiw	r26, 0x04	; 4
 4ce:	8d 91       	ld	r24, X+
 4d0:	9c 91       	ld	r25, X
 4d2:	15 97       	sbiw	r26, 0x05	; 5
 4d4:	12 96       	adiw	r26, 0x02	; 2
 4d6:	2d 91       	ld	r18, X+
 4d8:	3c 91       	ld	r19, X
 4da:	13 97       	sbiw	r26, 0x03	; 3
 4dc:	ec 01       	movw	r28, r24
 4de:	3b 83       	std	Y+3, r19	; 0x03
 4e0:	2a 83       	std	Y+2, r18	; 0x02
 4e2:	ea 01       	movw	r28, r20
 4e4:	89 81       	ldd	r24, Y+1	; 0x01
 4e6:	9a 81       	ldd	r25, Y+2	; 0x02
 4e8:	a8 17       	cp	r26, r24
 4ea:	b9 07       	cpc	r27, r25
 4ec:	31 f4       	brne	.+12     	; 0x4fa <vTaskRemoveFromUnorderedEventList+0x62>
 4ee:	14 96       	adiw	r26, 0x04	; 4
 4f0:	8d 91       	ld	r24, X+
 4f2:	9c 91       	ld	r25, X
 4f4:	15 97       	sbiw	r26, 0x05	; 5
 4f6:	9a 83       	std	Y+2, r25	; 0x02
 4f8:	89 83       	std	Y+1, r24	; 0x01
 4fa:	19 96       	adiw	r26, 0x09	; 9
 4fc:	1c 92       	st	X, r1
 4fe:	1e 92       	st	-X, r1
 500:	18 97       	sbiw	r26, 0x08	; 8
 502:	da 01       	movw	r26, r20
 504:	8c 91       	ld	r24, X
 506:	81 50       	subi	r24, 0x01	; 1
 508:	8c 93       	st	X, r24
 50a:	a2 85       	ldd	r26, Z+10	; 0x0a
 50c:	b3 85       	ldd	r27, Z+11	; 0x0b
 50e:	c4 81       	ldd	r28, Z+4	; 0x04
 510:	d5 81       	ldd	r29, Z+5	; 0x05
 512:	86 81       	ldd	r24, Z+6	; 0x06
 514:	97 81       	ldd	r25, Z+7	; 0x07
 516:	9d 83       	std	Y+5, r25	; 0x05
 518:	8c 83       	std	Y+4, r24	; 0x04
 51a:	c6 81       	ldd	r28, Z+6	; 0x06
 51c:	d7 81       	ldd	r29, Z+7	; 0x07
 51e:	84 81       	ldd	r24, Z+4	; 0x04
 520:	95 81       	ldd	r25, Z+5	; 0x05
 522:	9b 83       	std	Y+3, r25	; 0x03
 524:	8a 83       	std	Y+2, r24	; 0x02
 526:	11 96       	adiw	r26, 0x01	; 1
 528:	8d 91       	ld	r24, X+
 52a:	9c 91       	ld	r25, X
 52c:	12 97       	sbiw	r26, 0x02	; 2
 52e:	9f 01       	movw	r18, r30
 530:	2e 5f       	subi	r18, 0xFE	; 254
 532:	3f 4f       	sbci	r19, 0xFF	; 255
 534:	82 17       	cp	r24, r18
 536:	93 07       	cpc	r25, r19
 538:	31 f4       	brne	.+12     	; 0x546 <vTaskRemoveFromUnorderedEventList+0xae>
 53a:	86 81       	ldd	r24, Z+6	; 0x06
 53c:	97 81       	ldd	r25, Z+7	; 0x07
 53e:	12 96       	adiw	r26, 0x02	; 2
 540:	9c 93       	st	X, r25
 542:	8e 93       	st	-X, r24
 544:	11 97       	sbiw	r26, 0x01	; 1
 546:	13 86       	std	Z+11, r1	; 0x0b
 548:	12 86       	std	Z+10, r1	; 0x0a
 54a:	8c 91       	ld	r24, X
 54c:	81 50       	subi	r24, 0x01	; 1
 54e:	8c 93       	st	X, r24
 550:	86 89       	ldd	r24, Z+22	; 0x16
 552:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 556:	98 17       	cp	r25, r24
 558:	10 f4       	brcc	.+4      	; 0x55e <vTaskRemoveFromUnorderedEventList+0xc6>
 55a:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <uxTopReadyPriority>
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	dc 01       	movw	r26, r24
 562:	aa 0f       	add	r26, r26
 564:	bb 1f       	adc	r27, r27
 566:	aa 0f       	add	r26, r26
 568:	bb 1f       	adc	r27, r27
 56a:	aa 0f       	add	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	8a 0f       	add	r24, r26
 570:	9b 1f       	adc	r25, r27
 572:	dc 01       	movw	r26, r24
 574:	a4 5c       	subi	r26, 0xC4	; 196
 576:	b9 4f       	sbci	r27, 0xF9	; 249
 578:	11 96       	adiw	r26, 0x01	; 1
 57a:	0d 90       	ld	r0, X+
 57c:	bc 91       	ld	r27, X
 57e:	a0 2d       	mov	r26, r0
 580:	b5 83       	std	Z+5, r27	; 0x05
 582:	a4 83       	std	Z+4, r26	; 0x04
 584:	14 96       	adiw	r26, 0x04	; 4
 586:	8d 91       	ld	r24, X+
 588:	9c 91       	ld	r25, X
 58a:	15 97       	sbiw	r26, 0x05	; 5
 58c:	97 83       	std	Z+7, r25	; 0x07
 58e:	86 83       	std	Z+6, r24	; 0x06
 590:	14 96       	adiw	r26, 0x04	; 4
 592:	cd 91       	ld	r28, X+
 594:	dc 91       	ld	r29, X
 596:	15 97       	sbiw	r26, 0x05	; 5
 598:	3b 83       	std	Y+3, r19	; 0x03
 59a:	2a 83       	std	Y+2, r18	; 0x02
 59c:	15 96       	adiw	r26, 0x05	; 5
 59e:	3c 93       	st	X, r19
 5a0:	2e 93       	st	-X, r18
 5a2:	14 97       	sbiw	r26, 0x04	; 4
 5a4:	a6 89       	ldd	r26, Z+22	; 0x16
 5a6:	b0 e0       	ldi	r27, 0x00	; 0
 5a8:	cd 01       	movw	r24, r26
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	a8 0f       	add	r26, r24
 5b8:	b9 1f       	adc	r27, r25
 5ba:	a4 5c       	subi	r26, 0xC4	; 196
 5bc:	b9 4f       	sbci	r27, 0xF9	; 249
 5be:	b3 87       	std	Z+11, r27	; 0x0b
 5c0:	a2 87       	std	Z+10, r26	; 0x0a
 5c2:	8c 91       	ld	r24, X
 5c4:	8f 5f       	subi	r24, 0xFF	; 255
 5c6:	8c 93       	st	X, r24
 5c8:	96 89       	ldd	r25, Z+22	; 0x16
 5ca:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 5ce:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 5d2:	86 89       	ldd	r24, Z+22	; 0x16
 5d4:	89 17       	cp	r24, r25
 5d6:	18 f4       	brcc	.+6      	; 0x5de <vTaskRemoveFromUnorderedEventList+0x146>
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

Disassembly of section .text.uxTaskResetEventItemValue:

000014d6 <uxTaskResetEventItemValue>:
    14d6:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
    14da:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
    14de:	84 85       	ldd	r24, Z+12	; 0x0c
    14e0:	95 85       	ldd	r25, Z+13	; 0x0d
    14e2:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
    14e6:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
    14ea:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
    14ee:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
    14f2:	56 96       	adiw	r26, 0x16	; 22
    14f4:	4c 91       	ld	r20, X
    14f6:	24 e0       	ldi	r18, 0x04	; 4
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	24 1b       	sub	r18, r20
    14fc:	31 09       	sbc	r19, r1
    14fe:	35 87       	std	Z+13, r19	; 0x0d
    1500:	24 87       	std	Z+12, r18	; 0x0c
    1502:	08 95       	ret

Disassembly of section .text.libgcc:

00001602 <__xload_2>:
    1602:	57 fd       	sbrc	r21, 7
    1604:	03 c0       	rjmp	.+6      	; 0x160c <__xload_2+0xa>
    1606:	65 91       	lpm	r22, Z+
    1608:	75 91       	lpm	r23, Z+
    160a:	08 95       	ret
    160c:	61 91       	ld	r22, Z+
    160e:	71 91       	ld	r23, Z+
    1610:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000163c <_fini>:
    163c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000163e <__funcs_on_exit>:
    163e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00001640 <__simulator_exit>:
    1640:	08 95       	ret

Disassembly of section .text.exit:

000015da <exit>:
    15da:	ec 01       	movw	r28, r24
    15dc:	0e 94 1f 0b 	call	0x163e	; 0x163e <__funcs_on_exit>
    15e0:	0e 94 1e 0b 	call	0x163c	; 0x163c <_fini>
    15e4:	ce 01       	movw	r24, r28
    15e6:	0e 94 20 0b 	call	0x1640	; 0x1640 <__simulator_exit>
    15ea:	ce 01       	movw	r24, r28
    15ec:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_Exit>

Disassembly of section .text._Exit:

00001636 <_Exit>:
    1636:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
