
Static_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000fa6  2**0
                  ALLOC, LOAD, DATA
  2 .bss          0000008b  00800060  00800060  00000fa6  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004481  00000000  00000000  00001273  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9a  00000000  00000000  000056f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a6b  00000000  00000000  0000638e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000864  00000000  00000000  00007dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bf  00000000  00000000  00008660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bf1  00000000  00000000  00008b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000b710  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000f02  00000f02  00000f96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000b990  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.vPortFree 00000002  00000f0a  00000f0a  00000f9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.vListInitialise 0000001c  00000e86  00000e86  00000f1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.vListInitialiseItem 00000008  00000eee  00000eee  00000f82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.vListInsert 00000062  00000c74  00000c74  00000d08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.uxListRemove 0000004e  00000d34  00000d34  00000dc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.task1   00000018  00000ea2  00000ea2  00000f36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000066  00000c0e  00000c0e  00000ca2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.vApplicationGetIdleTaskMemory 00000028  00000e5e  00000e5e  00000ef2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .bss.uxIdleTaskStack.2025 00000055  008000eb  008000eb  00000fa6  2**0
                  ALLOC
 24 .bss.xIdleTaskTCB.2024 00000027  00800140  00800140  00000fa6  2**0
                  ALLOC
 25 .text.prvSetupTimerInterrupt 00000012  00000ed0  00000ed0  00000f64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.pxPortInitialiseStack 000000d8  00000778  00000778  0000080c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.xPortStartScheduler 0000005e  00000cd6  00000cd6  00000d6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.vPortYield 000000b2  000009c0  000009c0  00000a54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.vPortYieldFromTick 000000b8  00000850  00000850  000008e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_7 00000006  00000ef6  00000ef6  00000f8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.prvResetNextTaskUnblockTime 00000038  00000dce  00000dce  00000e62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.prvInitialiseNewTask 000000ea  0000068e  0000068e  00000722  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.prvInitialiseTaskLists 0000006e  00000ba0  00000ba0  00000c34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.prvAddNewTaskToReadyList 000000fa  00000594  00000594  00000628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.prvDeleteTCB 0000002c  00000e06  00000e06  00000e9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.prvCheckTasksWaitingTermination 0000004c  00000d82  00000d82  00000e16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.prvIdleTask 00000006  00000efc  00000efc  00000f90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.prvAddCurrentTaskToDelayedList 00000102  00000492  00000492  00000526  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.xTaskCreateStatic 00000086  00000b1a  00000b1a  00000bae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .progmemx.data 00000006  000000ae  000000ae  00000142  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .text.vTaskStartScheduler 000000b8  00000908  00000908  0000099c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.vTaskSuspendAll 0000000c  00000ee2  00000ee2  00000f76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.xTaskIncrementTick 00000234  000000b4  000000b4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.xTaskResumeAll 000001aa  000002e8  000002e8  0000037c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.vTaskDelay 0000002c  00000e32  00000e32  00000ec6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.vTaskSwitchContext 000000a8  00000a72  00000a72  00000b06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .bss.uxSchedulerSuspended 00000001  008001c4  008001c4  00000fa6  2**0
                  ALLOC
 48 .bss.xNextTaskUnblockTime 00000002  008001b8  008001b8  00000fa6  2**0
                  ALLOC
 49 .bss.uxTaskNumber 00000001  008001c5  008001c5  00000fa6  2**0
                  ALLOC
 50 .bss.xNumOfOverflows 00000001  008001c6  008001c6  00000fa6  2**0
                  ALLOC
 51 .bss.xYieldPending 00000001  008001c7  008001c7  00000fa6  2**0
                  ALLOC
 52 .bss.xPendedTicks 00000002  008001ba  008001ba  00000fa6  2**0
                  ALLOC
 53 .bss.xSchedulerRunning 00000001  008001c8  008001c8  00000fa6  2**0
                  ALLOC
 54 .bss.uxTopReadyPriority 00000001  008001c9  008001c9  00000fa6  2**0
                  ALLOC
 55 .bss.xTickCount 00000002  008001bc  008001bc  00000fa6  2**0
                  ALLOC
 56 .bss.uxCurrentNumberOfTasks 00000001  008001ca  008001ca  00000fa6  2**0
                  ALLOC
 57 .bss.xSuspendedTaskList 00000009  0080018b  0080018b  00000fa6  2**0
                  ALLOC
 58 .bss.uxDeletedTasksWaitingCleanUp 00000001  008001cb  008001cb  00000fa6  2**0
                  ALLOC
 59 .bss.xTasksWaitingTermination 00000009  00800194  00800194  00000fa6  2**0
                  ALLOC
 60 .bss.xPendingReadyList 00000009  0080019d  0080019d  00000fa6  2**0
                  ALLOC
 61 .bss.pxOverflowDelayedTaskList 00000002  008001be  008001be  00000fa6  2**0
                  ALLOC
 62 .bss.pxDelayedTaskList 00000002  008001c0  008001c0  00000fa6  2**0
                  ALLOC
 63 .bss.xDelayedTaskList2 00000009  008001a6  008001a6  00000fa6  2**0
                  ALLOC
 64 .bss.xDelayedTaskList1 00000009  008001af  008001af  00000fa6  2**0
                  ALLOC
 65 .bss.pxReadyTasksLists 00000024  00800167  00800167  00000fa6  2**0
                  ALLOC
 66 .bss.pxCurrentTCB 00000002  008001c2  008001c2  00000fa6  2**0
                  ALLOC
 67 .text.__dummy_fini 00000002  00000f0c  00000f0c  00000fa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.__dummy_funcs_on_exit 00000002  00000f0e  00000f0e  00000fa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__dummy_simulator_exit 00000002  00000f10  00000f10  00000fa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.exit    00000016  00000eba  00000eba  00000f4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text._Exit   00000004  00000f06  00000f06  00000f9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
   8:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
   c:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  10:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  14:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  18:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  1c:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__vector_7>
  20:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  24:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  28:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  2c:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  30:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  34:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  38:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  3c:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  40:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  44:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  48:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  4c:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>
  50:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	01 cc       	rjmp	.-2046   	; 0xfffff85a <__eeprom_end+0xff7ef85a>
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 07 06 	call	0xc0e	; 0xc0e <main>
  a6:	0c 94 5d 07 	jmp	0xeba	; 0xeba <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000f02 <__bad_interrupt>:
 f02:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.vPortFree:

00000f0a <vPortFree>:
    return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 f0a:	08 95       	ret

Disassembly of section .text.vListInitialise:

00000e86 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 e86:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 e88:	03 96       	adiw	r24, 0x03	; 3
 e8a:	92 83       	std	Z+2, r25	; 0x02
 e8c:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 e8e:	2f ef       	ldi	r18, 0xFF	; 255
 e90:	3f ef       	ldi	r19, 0xFF	; 255
 e92:	34 83       	std	Z+4, r19	; 0x04
 e94:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 e96:	96 83       	std	Z+6, r25	; 0x06
 e98:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 e9a:	90 87       	std	Z+8, r25	; 0x08
 e9c:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 e9e:	10 82       	st	Z, r1
 ea0:	08 95       	ret

Disassembly of section .text.vListInitialiseItem:

00000eee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 eee:	fc 01       	movw	r30, r24
 ef0:	11 86       	std	Z+9, r1	; 0x09
 ef2:	10 86       	std	Z+8, r1	; 0x08
 ef4:	08 95       	ret

Disassembly of section .text.vListInsert:

00000c74 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 c74:	cf 93       	push	r28
 c76:	df 93       	push	r29
 c78:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 c7a:	48 81       	ld	r20, Y
 c7c:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 c7e:	4f 3f       	cpi	r20, 0xFF	; 255
 c80:	2f ef       	ldi	r18, 0xFF	; 255
 c82:	52 07       	cpc	r21, r18
 c84:	21 f4       	brne	.+8      	; 0xc8e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 c86:	fc 01       	movw	r30, r24
 c88:	a7 81       	ldd	r26, Z+7	; 0x07
 c8a:	b0 85       	ldd	r27, Z+8	; 0x08
 c8c:	0d c0       	rjmp	.+26     	; 0xca8 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 c8e:	dc 01       	movw	r26, r24
 c90:	13 96       	adiw	r26, 0x03	; 3
 c92:	01 c0       	rjmp	.+2      	; 0xc96 <vListInsert+0x22>
 c94:	df 01       	movw	r26, r30
 c96:	12 96       	adiw	r26, 0x02	; 2
 c98:	ed 91       	ld	r30, X+
 c9a:	fc 91       	ld	r31, X
 c9c:	13 97       	sbiw	r26, 0x03	; 3
 c9e:	20 81       	ld	r18, Z
 ca0:	31 81       	ldd	r19, Z+1	; 0x01
 ca2:	42 17       	cp	r20, r18
 ca4:	53 07       	cpc	r21, r19
 ca6:	b0 f7       	brcc	.-20     	; 0xc94 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 ca8:	12 96       	adiw	r26, 0x02	; 2
 caa:	ed 91       	ld	r30, X+
 cac:	fc 91       	ld	r31, X
 cae:	13 97       	sbiw	r26, 0x03	; 3
 cb0:	fb 83       	std	Y+3, r31	; 0x03
 cb2:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 cb4:	d5 83       	std	Z+5, r29	; 0x05
 cb6:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
 cb8:	bd 83       	std	Y+5, r27	; 0x05
 cba:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
 cbc:	13 96       	adiw	r26, 0x03	; 3
 cbe:	dc 93       	st	X, r29
 cc0:	ce 93       	st	-X, r28
 cc2:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 cc4:	99 87       	std	Y+9, r25	; 0x09
 cc6:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
 cc8:	fc 01       	movw	r30, r24
 cca:	20 81       	ld	r18, Z
 ccc:	2f 5f       	subi	r18, 0xFF	; 255
 cce:	20 83       	st	Z, r18
}
 cd0:	df 91       	pop	r29
 cd2:	cf 91       	pop	r28
 cd4:	08 95       	ret

Disassembly of section .text.uxListRemove:

00000d34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 d34:	cf 93       	push	r28
 d36:	df 93       	push	r29
 d38:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 d3a:	a0 85       	ldd	r26, Z+8	; 0x08
 d3c:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 d3e:	c2 81       	ldd	r28, Z+2	; 0x02
 d40:	d3 81       	ldd	r29, Z+3	; 0x03
 d42:	84 81       	ldd	r24, Z+4	; 0x04
 d44:	95 81       	ldd	r25, Z+5	; 0x05
 d46:	9d 83       	std	Y+5, r25	; 0x05
 d48:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 d4a:	c4 81       	ldd	r28, Z+4	; 0x04
 d4c:	d5 81       	ldd	r29, Z+5	; 0x05
 d4e:	82 81       	ldd	r24, Z+2	; 0x02
 d50:	93 81       	ldd	r25, Z+3	; 0x03
 d52:	9b 83       	std	Y+3, r25	; 0x03
 d54:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 d56:	11 96       	adiw	r26, 0x01	; 1
 d58:	8d 91       	ld	r24, X+
 d5a:	9c 91       	ld	r25, X
 d5c:	12 97       	sbiw	r26, 0x02	; 2
 d5e:	e8 17       	cp	r30, r24
 d60:	f9 07       	cpc	r31, r25
 d62:	31 f4       	brne	.+12     	; 0xd70 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 d64:	84 81       	ldd	r24, Z+4	; 0x04
 d66:	95 81       	ldd	r25, Z+5	; 0x05
 d68:	12 96       	adiw	r26, 0x02	; 2
 d6a:	9c 93       	st	X, r25
 d6c:	8e 93       	st	-X, r24
 d6e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 d70:	11 86       	std	Z+9, r1	; 0x09
 d72:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
 d74:	8c 91       	ld	r24, X
 d76:	81 50       	subi	r24, 0x01	; 1
 d78:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
 d7a:	8c 91       	ld	r24, X
}
 d7c:	df 91       	pop	r29
 d7e:	cf 91       	pop	r28
 d80:	08 95       	ret

Disassembly of section .text.task1:

00000ea2 <task1>:
	return 0;
}

void task1(void *ptr)
{
	SET_BIT(DDRD, 3);  // Set pin as output
 ea2:	81 b3       	in	r24, 0x11	; 17
 ea4:	88 60       	ori	r24, 0x08	; 8
 ea6:	81 bb       	out	0x11, r24	; 17

	while (1)
	{
		// Toggle the output pin
		Toggle_BIT(PORTD, 3);
 ea8:	92 b3       	in	r25, 0x12	; 18
 eaa:	88 e0       	ldi	r24, 0x08	; 8
 eac:	89 27       	eor	r24, r25
 eae:	82 bb       	out	0x12, r24	; 18

		// Delay for a while
		vTaskDelay(500);
 eb0:	84 ef       	ldi	r24, 0xF4	; 244
 eb2:	91 e0       	ldi	r25, 0x01	; 1
 eb4:	0e 94 19 07 	call	0xe32	; 0xe32 <vTaskDelay>
 eb8:	f7 cf       	rjmp	.-18     	; 0xea8 <task1+0x6>

Disassembly of section .text.main:

00000c0e <main>:
StackType_t task_stack[STACK_SIZE];



int main(void)
{
 c0e:	8f 92       	push	r8
 c10:	9f 92       	push	r9
 c12:	af 92       	push	r10
 c14:	bf 92       	push	r11
 c16:	cf 92       	push	r12
 c18:	ef 92       	push	r14
 c1a:	ff 92       	push	r15
 c1c:	0f 93       	push	r16
 c1e:	1f 93       	push	r17
	// Create the task statically
	xTaskCreateStatic(task1,          // Task function
 c20:	0f 2e       	mov	r0, r31
 c22:	f4 ec       	ldi	r31, 0xC4	; 196
 c24:	8f 2e       	mov	r8, r31
 c26:	f0 e0       	ldi	r31, 0x00	; 0
 c28:	9f 2e       	mov	r9, r31
 c2a:	f0 2d       	mov	r31, r0
 c2c:	0f 2e       	mov	r0, r31
 c2e:	f0 e6       	ldi	r31, 0x60	; 96
 c30:	af 2e       	mov	r10, r31
 c32:	f0 e0       	ldi	r31, 0x00	; 0
 c34:	bf 2e       	mov	r11, r31
 c36:	f0 2d       	mov	r31, r0
 c38:	68 94       	set
 c3a:	cc 24       	eor	r12, r12
 c3c:	c1 f8       	bld	r12, 1
 c3e:	e1 2c       	mov	r14, r1
 c40:	f1 2c       	mov	r15, r1
 c42:	04 e6       	ldi	r16, 0x64	; 100
 c44:	10 e0       	ldi	r17, 0x00	; 0
 c46:	20 e0       	ldi	r18, 0x00	; 0
 c48:	30 e0       	ldi	r19, 0x00	; 0
 c4a:	40 e0       	ldi	r20, 0x00	; 0
 c4c:	50 e0       	ldi	r21, 0x00	; 0
 c4e:	60 e0       	ldi	r22, 0x00	; 0
 c50:	81 e5       	ldi	r24, 0x51	; 81
 c52:	97 e0       	ldi	r25, 0x07	; 7
 c54:	0e 94 8d 05 	call	0xb1a	; 0xb1a <xTaskCreateStatic>
	2,              // Task priority
	task_stack,     // Task stack buffer
	&tcb_block);    // Task control block

	// Start the FreeRTOS scheduler
	vTaskStartScheduler();
 c58:	0e 94 84 04 	call	0x908	; 0x908 <vTaskStartScheduler>

	return 0;
}
 c5c:	80 e0       	ldi	r24, 0x00	; 0
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	1f 91       	pop	r17
 c62:	0f 91       	pop	r16
 c64:	ff 90       	pop	r15
 c66:	ef 90       	pop	r14
 c68:	cf 90       	pop	r12
 c6a:	bf 90       	pop	r11
 c6c:	af 90       	pop	r10
 c6e:	9f 90       	pop	r9
 c70:	8f 90       	pop	r8
 c72:	08 95       	ret

Disassembly of section .text.vApplicationGetIdleTaskMemory:

00000e5e <vApplicationGetIdleTaskMemory>:
	// Define the idle task control block and stack statically
	static StaticTask_t xIdleTaskTCB;
	static StackType_t uxIdleTaskStack[configMINIMAL_STACK_SIZE];

	// Pass out pointers to the idle task control block and stack
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 e5e:	20 e4       	ldi	r18, 0x40	; 64
 e60:	31 e0       	ldi	r19, 0x01	; 1
 e62:	fc 01       	movw	r30, r24
 e64:	31 83       	std	Z+1, r19	; 0x01
 e66:	20 83       	st	Z, r18
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
 e68:	8b ee       	ldi	r24, 0xEB	; 235
 e6a:	90 e0       	ldi	r25, 0x00	; 0
 e6c:	fb 01       	movw	r30, r22
 e6e:	91 83       	std	Z+1, r25	; 0x01
 e70:	80 83       	st	Z, r24

	// Pass out the size of the idle task stack
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 e72:	85 e5       	ldi	r24, 0x55	; 85
 e74:	90 e0       	ldi	r25, 0x00	; 0
 e76:	a0 e0       	ldi	r26, 0x00	; 0
 e78:	b0 e0       	ldi	r27, 0x00	; 0
 e7a:	fa 01       	movw	r30, r20
 e7c:	80 83       	st	Z, r24
 e7e:	91 83       	std	Z+1, r25	; 0x01
 e80:	a2 83       	std	Z+2, r26	; 0x02
 e82:	b3 83       	std	Z+3, r27	; 0x03
 e84:	08 95       	ret

Disassembly of section .text.prvSetupTimerInterrupt:

00000ed0 <prvSetupTimerInterrupt>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
 ed0:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
 ed2:	89 ef       	ldi	r24, 0xF9	; 249
 ed4:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
 ed6:	8b e0       	ldi	r24, 0x0B	; 11
 ed8:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
 eda:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
 edc:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
 ede:	89 bf       	out	0x39, r24	; 57
 ee0:	08 95       	ret

Disassembly of section .text.pxPortInitialiseStack:

00000778 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 778:	31 e1       	ldi	r19, 0x11	; 17
 77a:	fc 01       	movw	r30, r24
 77c:	30 83       	st	Z, r19
 77e:	31 97       	sbiw	r30, 0x01	; 1
 780:	22 e2       	ldi	r18, 0x22	; 34
 782:	20 83       	st	Z, r18
 784:	31 97       	sbiw	r30, 0x01	; 1
 786:	a3 e3       	ldi	r26, 0x33	; 51
 788:	a0 83       	st	Z, r26
 78a:	31 97       	sbiw	r30, 0x01	; 1
 78c:	60 83       	st	Z, r22
 78e:	31 97       	sbiw	r30, 0x01	; 1
 790:	70 83       	st	Z, r23
 792:	31 97       	sbiw	r30, 0x01	; 1
 794:	10 82       	st	Z, r1
 796:	31 97       	sbiw	r30, 0x01	; 1
 798:	60 e8       	ldi	r22, 0x80	; 128
 79a:	60 83       	st	Z, r22
 79c:	31 97       	sbiw	r30, 0x01	; 1
 79e:	10 82       	st	Z, r1
 7a0:	31 97       	sbiw	r30, 0x01	; 1
 7a2:	62 e0       	ldi	r22, 0x02	; 2
 7a4:	60 83       	st	Z, r22
 7a6:	31 97       	sbiw	r30, 0x01	; 1
 7a8:	63 e0       	ldi	r22, 0x03	; 3
 7aa:	60 83       	st	Z, r22
 7ac:	31 97       	sbiw	r30, 0x01	; 1
 7ae:	64 e0       	ldi	r22, 0x04	; 4
 7b0:	60 83       	st	Z, r22
 7b2:	31 97       	sbiw	r30, 0x01	; 1
 7b4:	65 e0       	ldi	r22, 0x05	; 5
 7b6:	60 83       	st	Z, r22
 7b8:	31 97       	sbiw	r30, 0x01	; 1
 7ba:	66 e0       	ldi	r22, 0x06	; 6
 7bc:	60 83       	st	Z, r22
 7be:	31 97       	sbiw	r30, 0x01	; 1
 7c0:	67 e0       	ldi	r22, 0x07	; 7
 7c2:	60 83       	st	Z, r22
 7c4:	31 97       	sbiw	r30, 0x01	; 1
 7c6:	68 e0       	ldi	r22, 0x08	; 8
 7c8:	60 83       	st	Z, r22
 7ca:	31 97       	sbiw	r30, 0x01	; 1
 7cc:	69 e0       	ldi	r22, 0x09	; 9
 7ce:	60 83       	st	Z, r22
 7d0:	31 97       	sbiw	r30, 0x01	; 1
 7d2:	60 e1       	ldi	r22, 0x10	; 16
 7d4:	60 83       	st	Z, r22
 7d6:	31 97       	sbiw	r30, 0x01	; 1
 7d8:	30 83       	st	Z, r19
 7da:	31 97       	sbiw	r30, 0x01	; 1
 7dc:	32 e1       	ldi	r19, 0x12	; 18
 7de:	30 83       	st	Z, r19
 7e0:	31 97       	sbiw	r30, 0x01	; 1
 7e2:	33 e1       	ldi	r19, 0x13	; 19
 7e4:	30 83       	st	Z, r19
 7e6:	31 97       	sbiw	r30, 0x01	; 1
 7e8:	34 e1       	ldi	r19, 0x14	; 20
 7ea:	30 83       	st	Z, r19
 7ec:	31 97       	sbiw	r30, 0x01	; 1
 7ee:	35 e1       	ldi	r19, 0x15	; 21
 7f0:	30 83       	st	Z, r19
 7f2:	31 97       	sbiw	r30, 0x01	; 1
 7f4:	36 e1       	ldi	r19, 0x16	; 22
 7f6:	30 83       	st	Z, r19
 7f8:	31 97       	sbiw	r30, 0x01	; 1
 7fa:	37 e1       	ldi	r19, 0x17	; 23
 7fc:	30 83       	st	Z, r19
 7fe:	31 97       	sbiw	r30, 0x01	; 1
 800:	38 e1       	ldi	r19, 0x18	; 24
 802:	30 83       	st	Z, r19
 804:	31 97       	sbiw	r30, 0x01	; 1
 806:	39 e1       	ldi	r19, 0x19	; 25
 808:	30 83       	st	Z, r19
 80a:	31 97       	sbiw	r30, 0x01	; 1
 80c:	30 e2       	ldi	r19, 0x20	; 32
 80e:	30 83       	st	Z, r19
 810:	31 97       	sbiw	r30, 0x01	; 1
 812:	31 e2       	ldi	r19, 0x21	; 33
 814:	30 83       	st	Z, r19
 816:	31 97       	sbiw	r30, 0x01	; 1
 818:	20 83       	st	Z, r18
 81a:	31 97       	sbiw	r30, 0x01	; 1
 81c:	23 e2       	ldi	r18, 0x23	; 35
 81e:	20 83       	st	Z, r18
 820:	31 97       	sbiw	r30, 0x01	; 1
 822:	40 83       	st	Z, r20
 824:	31 97       	sbiw	r30, 0x01	; 1
 826:	50 83       	st	Z, r21
 828:	31 97       	sbiw	r30, 0x01	; 1
 82a:	26 e2       	ldi	r18, 0x26	; 38
 82c:	20 83       	st	Z, r18
 82e:	31 97       	sbiw	r30, 0x01	; 1
 830:	27 e2       	ldi	r18, 0x27	; 39
 832:	20 83       	st	Z, r18
 834:	31 97       	sbiw	r30, 0x01	; 1
 836:	28 e2       	ldi	r18, 0x28	; 40
 838:	20 83       	st	Z, r18
 83a:	31 97       	sbiw	r30, 0x01	; 1
 83c:	29 e2       	ldi	r18, 0x29	; 41
 83e:	20 83       	st	Z, r18
 840:	31 97       	sbiw	r30, 0x01	; 1
 842:	20 e3       	ldi	r18, 0x30	; 48
 844:	20 83       	st	Z, r18
 846:	31 97       	sbiw	r30, 0x01	; 1
 848:	21 e3       	ldi	r18, 0x31	; 49
 84a:	20 83       	st	Z, r18
 84c:	86 97       	sbiw	r24, 0x26	; 38
 84e:	08 95       	ret

Disassembly of section .text.xPortStartScheduler:

00000cd6 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
 cd6:	0e 94 68 07 	call	0xed0	; 0xed0 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
 cda:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 cde:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 ce2:	cd 91       	ld	r28, X+
 ce4:	cd bf       	out	0x3d, r28	; 61
 ce6:	dd 91       	ld	r29, X+
 ce8:	de bf       	out	0x3e, r29	; 62
 cea:	ff 91       	pop	r31
 cec:	ef 91       	pop	r30
 cee:	df 91       	pop	r29
 cf0:	cf 91       	pop	r28
 cf2:	bf 91       	pop	r27
 cf4:	af 91       	pop	r26
 cf6:	9f 91       	pop	r25
 cf8:	8f 91       	pop	r24
 cfa:	7f 91       	pop	r23
 cfc:	6f 91       	pop	r22
 cfe:	5f 91       	pop	r21
 d00:	4f 91       	pop	r20
 d02:	3f 91       	pop	r19
 d04:	2f 91       	pop	r18
 d06:	1f 91       	pop	r17
 d08:	0f 91       	pop	r16
 d0a:	ff 90       	pop	r15
 d0c:	ef 90       	pop	r14
 d0e:	df 90       	pop	r13
 d10:	cf 90       	pop	r12
 d12:	bf 90       	pop	r11
 d14:	af 90       	pop	r10
 d16:	9f 90       	pop	r9
 d18:	8f 90       	pop	r8
 d1a:	7f 90       	pop	r7
 d1c:	6f 90       	pop	r6
 d1e:	5f 90       	pop	r5
 d20:	4f 90       	pop	r4
 d22:	3f 90       	pop	r3
 d24:	2f 90       	pop	r2
 d26:	1f 90       	pop	r1
 d28:	0f 90       	pop	r0
 d2a:	0f be       	out	0x3f, r0	; 63
 d2c:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
 d2e:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
 d30:	81 e0       	ldi	r24, 0x01	; 1
 d32:	08 95       	ret

Disassembly of section .text.vPortYield:

000009c0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 9c0:	0f 92       	push	r0
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	f8 94       	cli
 9c6:	0f 92       	push	r0
 9c8:	1f 92       	push	r1
 9ca:	11 24       	eor	r1, r1
 9cc:	2f 92       	push	r2
 9ce:	3f 92       	push	r3
 9d0:	4f 92       	push	r4
 9d2:	5f 92       	push	r5
 9d4:	6f 92       	push	r6
 9d6:	7f 92       	push	r7
 9d8:	8f 92       	push	r8
 9da:	9f 92       	push	r9
 9dc:	af 92       	push	r10
 9de:	bf 92       	push	r11
 9e0:	cf 92       	push	r12
 9e2:	df 92       	push	r13
 9e4:	ef 92       	push	r14
 9e6:	ff 92       	push	r15
 9e8:	0f 93       	push	r16
 9ea:	1f 93       	push	r17
 9ec:	2f 93       	push	r18
 9ee:	3f 93       	push	r19
 9f0:	4f 93       	push	r20
 9f2:	5f 93       	push	r21
 9f4:	6f 93       	push	r22
 9f6:	7f 93       	push	r23
 9f8:	8f 93       	push	r24
 9fa:	9f 93       	push	r25
 9fc:	af 93       	push	r26
 9fe:	bf 93       	push	r27
 a00:	cf 93       	push	r28
 a02:	df 93       	push	r29
 a04:	ef 93       	push	r30
 a06:	ff 93       	push	r31
 a08:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 a0c:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 a10:	0d b6       	in	r0, 0x3d	; 61
 a12:	0d 92       	st	X+, r0
 a14:	0e b6       	in	r0, 0x3e	; 62
 a16:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 a18:	0e 94 39 05 	call	0xa72	; 0xa72 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 a1c:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 a20:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 a24:	cd 91       	ld	r28, X+
 a26:	cd bf       	out	0x3d, r28	; 61
 a28:	dd 91       	ld	r29, X+
 a2a:	de bf       	out	0x3e, r29	; 62
 a2c:	ff 91       	pop	r31
 a2e:	ef 91       	pop	r30
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	bf 91       	pop	r27
 a36:	af 91       	pop	r26
 a38:	9f 91       	pop	r25
 a3a:	8f 91       	pop	r24
 a3c:	7f 91       	pop	r23
 a3e:	6f 91       	pop	r22
 a40:	5f 91       	pop	r21
 a42:	4f 91       	pop	r20
 a44:	3f 91       	pop	r19
 a46:	2f 91       	pop	r18
 a48:	1f 91       	pop	r17
 a4a:	0f 91       	pop	r16
 a4c:	ff 90       	pop	r15
 a4e:	ef 90       	pop	r14
 a50:	df 90       	pop	r13
 a52:	cf 90       	pop	r12
 a54:	bf 90       	pop	r11
 a56:	af 90       	pop	r10
 a58:	9f 90       	pop	r9
 a5a:	8f 90       	pop	r8
 a5c:	7f 90       	pop	r7
 a5e:	6f 90       	pop	r6
 a60:	5f 90       	pop	r5
 a62:	4f 90       	pop	r4
 a64:	3f 90       	pop	r3
 a66:	2f 90       	pop	r2
 a68:	1f 90       	pop	r1
 a6a:	0f 90       	pop	r0
 a6c:	0f be       	out	0x3f, r0	; 63
 a6e:	0f 90       	pop	r0

	asm volatile ( "ret" );
 a70:	08 95       	ret

Disassembly of section .text.vPortYieldFromTick:

00000850 <vPortYieldFromTick>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 850:	0f 92       	push	r0
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	f8 94       	cli
 856:	0f 92       	push	r0
 858:	1f 92       	push	r1
 85a:	11 24       	eor	r1, r1
 85c:	2f 92       	push	r2
 85e:	3f 92       	push	r3
 860:	4f 92       	push	r4
 862:	5f 92       	push	r5
 864:	6f 92       	push	r6
 866:	7f 92       	push	r7
 868:	8f 92       	push	r8
 86a:	9f 92       	push	r9
 86c:	af 92       	push	r10
 86e:	bf 92       	push	r11
 870:	cf 92       	push	r12
 872:	df 92       	push	r13
 874:	ef 92       	push	r14
 876:	ff 92       	push	r15
 878:	0f 93       	push	r16
 87a:	1f 93       	push	r17
 87c:	2f 93       	push	r18
 87e:	3f 93       	push	r19
 880:	4f 93       	push	r20
 882:	5f 93       	push	r21
 884:	6f 93       	push	r22
 886:	7f 93       	push	r23
 888:	8f 93       	push	r24
 88a:	9f 93       	push	r25
 88c:	af 93       	push	r26
 88e:	bf 93       	push	r27
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	ef 93       	push	r30
 896:	ff 93       	push	r31
 898:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 89c:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 8a0:	0d b6       	in	r0, 0x3d	; 61
 8a2:	0d 92       	st	X+, r0
 8a4:	0e b6       	in	r0, 0x3e	; 62
 8a6:	0d 92       	st	X+, r0
 8a8:	0e 94 5a 00 	call	0xb4	; 0xb4 <xTaskIncrementTick>
 8ac:	81 11       	cpse	r24, r1
 8ae:	0e 94 39 05 	call	0xa72	; 0xa72 <vTaskSwitchContext>
 8b2:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 8b6:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 8ba:	cd 91       	ld	r28, X+
 8bc:	cd bf       	out	0x3d, r28	; 61
 8be:	dd 91       	ld	r29, X+
 8c0:	de bf       	out	0x3e, r29	; 62
 8c2:	ff 91       	pop	r31
 8c4:	ef 91       	pop	r30
 8c6:	df 91       	pop	r29
 8c8:	cf 91       	pop	r28
 8ca:	bf 91       	pop	r27
 8cc:	af 91       	pop	r26
 8ce:	9f 91       	pop	r25
 8d0:	8f 91       	pop	r24
 8d2:	7f 91       	pop	r23
 8d4:	6f 91       	pop	r22
 8d6:	5f 91       	pop	r21
 8d8:	4f 91       	pop	r20
 8da:	3f 91       	pop	r19
 8dc:	2f 91       	pop	r18
 8de:	1f 91       	pop	r17
 8e0:	0f 91       	pop	r16
 8e2:	ff 90       	pop	r15
 8e4:	ef 90       	pop	r14
 8e6:	df 90       	pop	r13
 8e8:	cf 90       	pop	r12
 8ea:	bf 90       	pop	r11
 8ec:	af 90       	pop	r10
 8ee:	9f 90       	pop	r9
 8f0:	8f 90       	pop	r8
 8f2:	7f 90       	pop	r7
 8f4:	6f 90       	pop	r6
 8f6:	5f 90       	pop	r5
 8f8:	4f 90       	pop	r4
 8fa:	3f 90       	pop	r3
 8fc:	2f 90       	pop	r2
 8fe:	1f 90       	pop	r1
 900:	0f 90       	pop	r0
 902:	0f be       	out	0x3f, r0	; 63
 904:	0f 90       	pop	r0
 906:	08 95       	ret

Disassembly of section .text.__vector_7:

00000ef6 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 ef6:	0e 94 28 04 	call	0x850	; 0x850 <vPortYieldFromTick>
		asm volatile ( "reti" );
 efa:	18 95       	reti

Disassembly of section .text.prvResetNextTaskUnblockTime:

00000dce <prvResetNextTaskUnblockTime>:
    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
 dce:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <pxDelayedTaskList>
 dd2:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <pxDelayedTaskList+0x1>
 dd6:	80 81       	ld	r24, Z
 dd8:	81 11       	cpse	r24, r1
 dda:	07 c0       	rjmp	.+14     	; 0xdea <prvResetNextTaskUnblockTime+0x1c>
 ddc:	8f ef       	ldi	r24, 0xFF	; 255
 dde:	9f ef       	ldi	r25, 0xFF	; 255
 de0:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <xNextTaskUnblockTime+0x1>
 de4:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <xNextTaskUnblockTime>
 de8:	08 95       	ret
 dea:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <pxDelayedTaskList>
 dee:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <pxDelayedTaskList+0x1>
 df2:	05 80       	ldd	r0, Z+5	; 0x05
 df4:	f6 81       	ldd	r31, Z+6	; 0x06
 df6:	e0 2d       	mov	r30, r0
 df8:	80 81       	ld	r24, Z
 dfa:	91 81       	ldd	r25, Z+1	; 0x01
 dfc:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <xNextTaskUnblockTime+0x1>
 e00:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <xNextTaskUnblockTime>
 e04:	08 95       	ret

Disassembly of section .text.prvInitialiseNewTask:

0000068e <prvInitialiseNewTask>:
 68e:	6f 92       	push	r6
 690:	7f 92       	push	r7
 692:	8f 92       	push	r8
 694:	9f 92       	push	r9
 696:	af 92       	push	r10
 698:	bf 92       	push	r11
 69a:	cf 92       	push	r12
 69c:	df 92       	push	r13
 69e:	ef 92       	push	r14
 6a0:	ff 92       	push	r15
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62
 6ae:	3c 01       	movw	r6, r24
 6b0:	a6 2f       	mov	r26, r22
 6b2:	ca 01       	movw	r24, r20
 6b4:	f4 01       	movw	r30, r8
 6b6:	47 89       	ldd	r20, Z+23	; 0x17
 6b8:	50 8d       	ldd	r21, Z+24	; 0x18
 6ba:	01 50       	subi	r16, 0x01	; 1
 6bc:	11 09       	sbc	r17, r1
 6be:	04 0f       	add	r16, r20
 6c0:	15 1f       	adc	r17, r21
 6c2:	00 97       	sbiw	r24, 0x00	; 0
 6c4:	a1 05       	cpc	r26, r1
 6c6:	d1 f4       	brne	.+52     	; 0x6fc <prvInitialiseNewTask+0x6e>
 6c8:	1e c0       	rjmp	.+60     	; 0x706 <prvInitialiseNewTask+0x78>
 6ca:	27 2f       	mov	r18, r23
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	ac 01       	movw	r20, r24
 6d0:	6a 2f       	mov	r22, r26
 6d2:	42 0f       	add	r20, r18
 6d4:	53 1f       	adc	r21, r19
 6d6:	61 1d       	adc	r22, r1
 6d8:	37 fd       	sbrc	r19, 7
 6da:	6a 95       	dec	r22
 6dc:	fa 01       	movw	r30, r20
 6de:	b4 91       	lpm	r27, Z
 6e0:	67 fd       	sbrc	r22, 7
 6e2:	b0 81       	ld	r27, Z
 6e4:	f4 01       	movw	r30, r8
 6e6:	e2 0f       	add	r30, r18
 6e8:	f3 1f       	adc	r31, r19
 6ea:	b1 8f       	std	Z+25, r27	; 0x19
 6ec:	fa 01       	movw	r30, r20
 6ee:	24 91       	lpm	r18, Z
 6f0:	67 fd       	sbrc	r22, 7
 6f2:	20 81       	ld	r18, Z
 6f4:	22 23       	and	r18, r18
 6f6:	29 f0       	breq	.+10     	; 0x702 <prvInitialiseNewTask+0x74>
 6f8:	7f 5f       	subi	r23, 0xFF	; 255
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <prvInitialiseNewTask+0x70>
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	78 30       	cpi	r23, 0x08	; 8
 700:	20 f3       	brcs	.-56     	; 0x6ca <prvInitialiseNewTask+0x3c>
 702:	f4 01       	movw	r30, r8
 704:	10 a2       	std	Z+32, r1	; 0x20
 706:	f3 e0       	ldi	r31, 0x03	; 3
 708:	fc 15       	cp	r31, r12
 70a:	20 f4       	brcc	.+8      	; 0x714 <prvInitialiseNewTask+0x86>
 70c:	0f 2e       	mov	r0, r31
 70e:	f3 e0       	ldi	r31, 0x03	; 3
 710:	cf 2e       	mov	r12, r31
 712:	f0 2d       	mov	r31, r0
 714:	f4 01       	movw	r30, r8
 716:	c6 8a       	std	Z+22, r12	; 0x16
 718:	c4 01       	movw	r24, r8
 71a:	02 96       	adiw	r24, 0x02	; 2
 71c:	0e 94 77 07 	call	0xeee	; 0xeee <vListInitialiseItem>
 720:	c4 01       	movw	r24, r8
 722:	0c 96       	adiw	r24, 0x0c	; 12
 724:	0e 94 77 07 	call	0xeee	; 0xeee <vListInitialiseItem>
 728:	f4 01       	movw	r30, r8
 72a:	91 86       	std	Z+9, r9	; 0x09
 72c:	80 86       	std	Z+8, r8	; 0x08
 72e:	84 e0       	ldi	r24, 0x04	; 4
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	8c 19       	sub	r24, r12
 734:	91 09       	sbc	r25, r1
 736:	95 87       	std	Z+13, r25	; 0x0d
 738:	84 87       	std	Z+12, r24	; 0x0c
 73a:	93 8a       	std	Z+19, r9	; 0x13
 73c:	82 8a       	std	Z+18, r8	; 0x12
 73e:	a7 01       	movw	r20, r14
 740:	b3 01       	movw	r22, r6
 742:	c8 01       	movw	r24, r16
 744:	0e 94 bc 03 	call	0x778	; 0x778 <pxPortInitialiseStack>
 748:	f4 01       	movw	r30, r8
 74a:	91 83       	std	Z+1, r25	; 0x01
 74c:	80 83       	st	Z, r24
 74e:	a1 14       	cp	r10, r1
 750:	b1 04       	cpc	r11, r1
 752:	19 f0       	breq	.+6      	; 0x75a <prvInitialiseNewTask+0xcc>
 754:	f5 01       	movw	r30, r10
 756:	91 82       	std	Z+1, r9	; 0x01
 758:	80 82       	st	Z, r8
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	1f 91       	pop	r17
 760:	0f 91       	pop	r16
 762:	ff 90       	pop	r15
 764:	ef 90       	pop	r14
 766:	df 90       	pop	r13
 768:	cf 90       	pop	r12
 76a:	bf 90       	pop	r11
 76c:	af 90       	pop	r10
 76e:	9f 90       	pop	r9
 770:	8f 90       	pop	r8
 772:	7f 90       	pop	r7
 774:	6f 90       	pop	r6
 776:	08 95       	ret

Disassembly of section .text.prvInitialiseTaskLists:

00000ba0 <prvInitialiseTaskLists>:
 ba0:	cf 93       	push	r28
 ba2:	c0 e0       	ldi	r28, 0x00	; 0
 ba4:	10 c0       	rjmp	.+32     	; 0xbc6 <prvInitialiseTaskLists+0x26>
 ba6:	8c 2f       	mov	r24, r28
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	9c 01       	movw	r18, r24
 bac:	22 0f       	add	r18, r18
 bae:	33 1f       	adc	r19, r19
 bb0:	22 0f       	add	r18, r18
 bb2:	33 1f       	adc	r19, r19
 bb4:	22 0f       	add	r18, r18
 bb6:	33 1f       	adc	r19, r19
 bb8:	82 0f       	add	r24, r18
 bba:	93 1f       	adc	r25, r19
 bbc:	89 59       	subi	r24, 0x99	; 153
 bbe:	9e 4f       	sbci	r25, 0xFE	; 254
 bc0:	0e 94 43 07 	call	0xe86	; 0xe86 <vListInitialise>
 bc4:	cf 5f       	subi	r28, 0xFF	; 255
 bc6:	c4 30       	cpi	r28, 0x04	; 4
 bc8:	70 f3       	brcs	.-36     	; 0xba6 <prvInitialiseTaskLists+0x6>
 bca:	8f ea       	ldi	r24, 0xAF	; 175
 bcc:	91 e0       	ldi	r25, 0x01	; 1
 bce:	0e 94 43 07 	call	0xe86	; 0xe86 <vListInitialise>
 bd2:	86 ea       	ldi	r24, 0xA6	; 166
 bd4:	91 e0       	ldi	r25, 0x01	; 1
 bd6:	0e 94 43 07 	call	0xe86	; 0xe86 <vListInitialise>
 bda:	8d e9       	ldi	r24, 0x9D	; 157
 bdc:	91 e0       	ldi	r25, 0x01	; 1
 bde:	0e 94 43 07 	call	0xe86	; 0xe86 <vListInitialise>
 be2:	84 e9       	ldi	r24, 0x94	; 148
 be4:	91 e0       	ldi	r25, 0x01	; 1
 be6:	0e 94 43 07 	call	0xe86	; 0xe86 <vListInitialise>
 bea:	8b e8       	ldi	r24, 0x8B	; 139
 bec:	91 e0       	ldi	r25, 0x01	; 1
 bee:	0e 94 43 07 	call	0xe86	; 0xe86 <vListInitialise>
 bf2:	8f ea       	ldi	r24, 0xAF	; 175
 bf4:	91 e0       	ldi	r25, 0x01	; 1
 bf6:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <pxDelayedTaskList+0x1>
 bfa:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <pxDelayedTaskList>
 bfe:	86 ea       	ldi	r24, 0xA6	; 166
 c00:	91 e0       	ldi	r25, 0x01	; 1
 c02:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <pxOverflowDelayedTaskList+0x1>
 c06:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <pxOverflowDelayedTaskList>
 c0a:	cf 91       	pop	r28
 c0c:	08 95       	ret

Disassembly of section .text.prvAddNewTaskToReadyList:

00000594 <prvAddNewTaskToReadyList>:
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	ec 01       	movw	r28, r24
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	0f 92       	push	r0
 5a0:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <uxCurrentNumberOfTasks>
 5a4:	8f 5f       	subi	r24, 0xFF	; 255
 5a6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <uxCurrentNumberOfTasks>
 5aa:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 5ae:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 5b2:	89 2b       	or	r24, r25
 5b4:	59 f4       	brne	.+22     	; 0x5cc <prvAddNewTaskToReadyList+0x38>
 5b6:	d0 93 c3 01 	sts	0x01C3, r29	; 0x8001c3 <pxCurrentTCB+0x1>
 5ba:	c0 93 c2 01 	sts	0x01C2, r28	; 0x8001c2 <pxCurrentTCB>
 5be:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <uxCurrentNumberOfTasks>
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	99 f4       	brne	.+38     	; 0x5ec <prvAddNewTaskToReadyList+0x58>
 5c6:	0e 94 d0 05 	call	0xba0	; 0xba0 <prvInitialiseTaskLists>
 5ca:	10 c0       	rjmp	.+32     	; 0x5ec <prvAddNewTaskToReadyList+0x58>
 5cc:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <xSchedulerRunning>
 5d0:	81 11       	cpse	r24, r1
 5d2:	0c c0       	rjmp	.+24     	; 0x5ec <prvAddNewTaskToReadyList+0x58>
 5d4:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 5d8:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 5dc:	96 89       	ldd	r25, Z+22	; 0x16
 5de:	8e 89       	ldd	r24, Y+22	; 0x16
 5e0:	89 17       	cp	r24, r25
 5e2:	20 f0       	brcs	.+8      	; 0x5ec <prvAddNewTaskToReadyList+0x58>
 5e4:	d0 93 c3 01 	sts	0x01C3, r29	; 0x8001c3 <pxCurrentTCB+0x1>
 5e8:	c0 93 c2 01 	sts	0x01C2, r28	; 0x8001c2 <pxCurrentTCB>
 5ec:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <uxTaskNumber>
 5f0:	8f 5f       	subi	r24, 0xFF	; 255
 5f2:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <uxTaskNumber>
 5f6:	8e 89       	ldd	r24, Y+22	; 0x16
 5f8:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <uxTopReadyPriority>
 5fc:	98 17       	cp	r25, r24
 5fe:	10 f4       	brcc	.+4      	; 0x604 <prvAddNewTaskToReadyList+0x70>
 600:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <uxTopReadyPriority>
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	fc 01       	movw	r30, r24
 608:	ee 0f       	add	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	ee 0f       	add	r30, r30
 60e:	ff 1f       	adc	r31, r31
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	8e 0f       	add	r24, r30
 616:	9f 1f       	adc	r25, r31
 618:	fc 01       	movw	r30, r24
 61a:	e9 59       	subi	r30, 0x99	; 153
 61c:	fe 4f       	sbci	r31, 0xFE	; 254
 61e:	01 80       	ldd	r0, Z+1	; 0x01
 620:	f2 81       	ldd	r31, Z+2	; 0x02
 622:	e0 2d       	mov	r30, r0
 624:	fd 83       	std	Y+5, r31	; 0x05
 626:	ec 83       	std	Y+4, r30	; 0x04
 628:	84 81       	ldd	r24, Z+4	; 0x04
 62a:	95 81       	ldd	r25, Z+5	; 0x05
 62c:	9f 83       	std	Y+7, r25	; 0x07
 62e:	8e 83       	std	Y+6, r24	; 0x06
 630:	a4 81       	ldd	r26, Z+4	; 0x04
 632:	b5 81       	ldd	r27, Z+5	; 0x05
 634:	ce 01       	movw	r24, r28
 636:	02 96       	adiw	r24, 0x02	; 2
 638:	13 96       	adiw	r26, 0x03	; 3
 63a:	9c 93       	st	X, r25
 63c:	8e 93       	st	-X, r24
 63e:	12 97       	sbiw	r26, 0x02	; 2
 640:	95 83       	std	Z+5, r25	; 0x05
 642:	84 83       	std	Z+4, r24	; 0x04
 644:	ee 89       	ldd	r30, Y+22	; 0x16
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	cf 01       	movw	r24, r30
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	e8 0f       	add	r30, r24
 658:	f9 1f       	adc	r31, r25
 65a:	e9 59       	subi	r30, 0x99	; 153
 65c:	fe 4f       	sbci	r31, 0xFE	; 254
 65e:	fb 87       	std	Y+11, r31	; 0x0b
 660:	ea 87       	std	Y+10, r30	; 0x0a
 662:	80 81       	ld	r24, Z
 664:	8f 5f       	subi	r24, 0xFF	; 255
 666:	80 83       	st	Z, r24
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <xSchedulerRunning>
 670:	88 23       	and	r24, r24
 672:	51 f0       	breq	.+20     	; 0x688 <prvAddNewTaskToReadyList+0xf4>
 674:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 678:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 67c:	96 89       	ldd	r25, Z+22	; 0x16
 67e:	8e 89       	ldd	r24, Y+22	; 0x16
 680:	98 17       	cp	r25, r24
 682:	10 f4       	brcc	.+4      	; 0x688 <prvAddNewTaskToReadyList+0xf4>
 684:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <vPortYield>
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	08 95       	ret

Disassembly of section .text.prvDeleteTCB:

00000e06 <prvDeleteTCB>:
 e06:	cf 93       	push	r28
 e08:	df 93       	push	r29
 e0a:	ec 01       	movw	r28, r24
 e0c:	8e a1       	ldd	r24, Y+38	; 0x26
 e0e:	81 11       	cpse	r24, r1
 e10:	08 c0       	rjmp	.+16     	; 0xe22 <prvDeleteTCB+0x1c>
 e12:	8f 89       	ldd	r24, Y+23	; 0x17
 e14:	98 8d       	ldd	r25, Y+24	; 0x18
 e16:	0e 94 85 07 	call	0xf0a	; 0xf0a <vPortFree>
 e1a:	ce 01       	movw	r24, r28
 e1c:	0e 94 85 07 	call	0xf0a	; 0xf0a <vPortFree>
 e20:	05 c0       	rjmp	.+10     	; 0xe2c <prvDeleteTCB+0x26>
 e22:	81 30       	cpi	r24, 0x01	; 1
 e24:	19 f4       	brne	.+6      	; 0xe2c <prvDeleteTCB+0x26>
 e26:	ce 01       	movw	r24, r28
 e28:	0e 94 85 07 	call	0xf0a	; 0xf0a <vPortFree>
 e2c:	df 91       	pop	r29
 e2e:	cf 91       	pop	r28
 e30:	08 95       	ret

Disassembly of section .text.prvCheckTasksWaitingTermination:

00000d82 <prvCheckTasksWaitingTermination>:
 d82:	cf 93       	push	r28
 d84:	df 93       	push	r29
 d86:	1c c0       	rjmp	.+56     	; 0xdc0 <prvCheckTasksWaitingTermination+0x3e>
 d88:	0f b6       	in	r0, 0x3f	; 63
 d8a:	f8 94       	cli
 d8c:	0f 92       	push	r0
 d8e:	e0 91 99 01 	lds	r30, 0x0199	; 0x800199 <xTasksWaitingTermination+0x5>
 d92:	f0 91 9a 01 	lds	r31, 0x019A	; 0x80019a <xTasksWaitingTermination+0x6>
 d96:	c6 81       	ldd	r28, Z+6	; 0x06
 d98:	d7 81       	ldd	r29, Z+7	; 0x07
 d9a:	ce 01       	movw	r24, r28
 d9c:	02 96       	adiw	r24, 0x02	; 2
 d9e:	0e 94 9a 06 	call	0xd34	; 0xd34 <uxListRemove>
 da2:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <uxCurrentNumberOfTasks>
 da6:	81 50       	subi	r24, 0x01	; 1
 da8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <uxCurrentNumberOfTasks>
 dac:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <uxDeletedTasksWaitingCleanUp>
 db0:	81 50       	subi	r24, 0x01	; 1
 db2:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <uxDeletedTasksWaitingCleanUp>
 db6:	0f 90       	pop	r0
 db8:	0f be       	out	0x3f, r0	; 63
 dba:	ce 01       	movw	r24, r28
 dbc:	0e 94 03 07 	call	0xe06	; 0xe06 <prvDeleteTCB>
 dc0:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <uxDeletedTasksWaitingCleanUp>
 dc4:	81 11       	cpse	r24, r1
 dc6:	e0 cf       	rjmp	.-64     	; 0xd88 <prvCheckTasksWaitingTermination+0x6>
 dc8:	df 91       	pop	r29
 dca:	cf 91       	pop	r28
 dcc:	08 95       	ret

Disassembly of section .text.prvIdleTask:

00000efc <prvIdleTask>:

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 efc:	0e 94 c1 06 	call	0xd82	; 0xd82 <prvCheckTasksWaitingTermination>
 f00:	fd cf       	rjmp	.-6      	; 0xefc <prvIdleTask>

Disassembly of section .text.prvAddCurrentTaskToDelayedList:

00000492 <prvAddCurrentTaskToDelayedList>:
    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
 492:	ff 92       	push	r15
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	ec 01       	movw	r28, r24
 49e:	f6 2e       	mov	r15, r22
 4a0:	00 91 bc 01 	lds	r16, 0x01BC	; 0x8001bc <xTickCount>
 4a4:	10 91 bd 01 	lds	r17, 0x01BD	; 0x8001bd <xTickCount+0x1>
 4a8:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 4ac:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 4b0:	02 96       	adiw	r24, 0x02	; 2
 4b2:	0e 94 9a 06 	call	0xd34	; 0xd34 <uxListRemove>
 4b6:	cf 3f       	cpi	r28, 0xFF	; 255
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	d8 07       	cpc	r29, r24
 4bc:	b1 f5       	brne	.+108    	; 0x52a <prvAddCurrentTaskToDelayedList+0x98>
 4be:	ff 20       	and	r15, r15
 4c0:	a1 f1       	breq	.+104    	; 0x52a <prvAddCurrentTaskToDelayedList+0x98>
 4c2:	eb e8       	ldi	r30, 0x8B	; 139
 4c4:	f1 e0       	ldi	r31, 0x01	; 1
 4c6:	a1 81       	ldd	r26, Z+1	; 0x01
 4c8:	b2 81       	ldd	r27, Z+2	; 0x02
 4ca:	c0 91 c2 01 	lds	r28, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 4ce:	d0 91 c3 01 	lds	r29, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 4d2:	bd 83       	std	Y+5, r27	; 0x05
 4d4:	ac 83       	std	Y+4, r26	; 0x04
 4d6:	c0 91 c2 01 	lds	r28, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 4da:	d0 91 c3 01 	lds	r29, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 4de:	14 96       	adiw	r26, 0x04	; 4
 4e0:	8d 91       	ld	r24, X+
 4e2:	9c 91       	ld	r25, X
 4e4:	15 97       	sbiw	r26, 0x05	; 5
 4e6:	9f 83       	std	Y+7, r25	; 0x07
 4e8:	8e 83       	std	Y+6, r24	; 0x06
 4ea:	14 96       	adiw	r26, 0x04	; 4
 4ec:	cd 91       	ld	r28, X+
 4ee:	dc 91       	ld	r29, X
 4f0:	15 97       	sbiw	r26, 0x05	; 5
 4f2:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 4f6:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 4fa:	02 96       	adiw	r24, 0x02	; 2
 4fc:	9b 83       	std	Y+3, r25	; 0x03
 4fe:	8a 83       	std	Y+2, r24	; 0x02
 500:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 504:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 508:	02 96       	adiw	r24, 0x02	; 2
 50a:	15 96       	adiw	r26, 0x05	; 5
 50c:	9c 93       	st	X, r25
 50e:	8e 93       	st	-X, r24
 510:	14 97       	sbiw	r26, 0x04	; 4
 512:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 516:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 51a:	1b 96       	adiw	r26, 0x0b	; 11
 51c:	fc 93       	st	X, r31
 51e:	ee 93       	st	-X, r30
 520:	1a 97       	sbiw	r26, 0x0a	; 10
 522:	80 81       	ld	r24, Z
 524:	8f 5f       	subi	r24, 0xFF	; 255
 526:	80 83       	st	Z, r24
 528:	2f c0       	rjmp	.+94     	; 0x588 <prvAddCurrentTaskToDelayedList+0xf6>
 52a:	c0 0f       	add	r28, r16
 52c:	d1 1f       	adc	r29, r17
 52e:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 532:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 536:	d3 83       	std	Z+3, r29	; 0x03
 538:	c2 83       	std	Z+2, r28	; 0x02
 53a:	c0 17       	cp	r28, r16
 53c:	d1 07       	cpc	r29, r17
 53e:	68 f4       	brcc	.+26     	; 0x55a <prvAddCurrentTaskToDelayedList+0xc8>
 540:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 544:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 548:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <pxOverflowDelayedTaskList>
 54c:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <pxOverflowDelayedTaskList+0x1>
 550:	6e 5f       	subi	r22, 0xFE	; 254
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	0e 94 3a 06 	call	0xc74	; 0xc74 <vListInsert>
 558:	17 c0       	rjmp	.+46     	; 0x588 <prvAddCurrentTaskToDelayedList+0xf6>
 55a:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 55e:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 562:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <pxDelayedTaskList>
 566:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <pxDelayedTaskList+0x1>
 56a:	6e 5f       	subi	r22, 0xFE	; 254
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	0e 94 3a 06 	call	0xc74	; 0xc74 <vListInsert>
 572:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <xNextTaskUnblockTime>
 576:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <xNextTaskUnblockTime+0x1>
 57a:	c8 17       	cp	r28, r24
 57c:	d9 07       	cpc	r29, r25
 57e:	20 f4       	brcc	.+8      	; 0x588 <prvAddCurrentTaskToDelayedList+0xf6>
 580:	d0 93 b9 01 	sts	0x01B9, r29	; 0x8001b9 <xNextTaskUnblockTime+0x1>
 584:	c0 93 b8 01 	sts	0x01B8, r28	; 0x8001b8 <xNextTaskUnblockTime>
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	08 95       	ret

Disassembly of section .text.xTaskCreateStatic:

00000b1a <xTaskCreateStatic>:
 b1a:	6f 92       	push	r6
 b1c:	7f 92       	push	r7
 b1e:	8f 92       	push	r8
 b20:	9f 92       	push	r9
 b22:	af 92       	push	r10
 b24:	bf 92       	push	r11
 b26:	cf 92       	push	r12
 b28:	ef 92       	push	r14
 b2a:	ff 92       	push	r15
 b2c:	0f 93       	push	r16
 b2e:	1f 93       	push	r17
 b30:	cf 93       	push	r28
 b32:	df 93       	push	r29
 b34:	00 d0       	rcall	.+0      	; 0xb36 <xTaskCreateStatic+0x1c>
 b36:	cd b7       	in	r28, 0x3d	; 61
 b38:	de b7       	in	r29, 0x3e	; 62
 b3a:	81 14       	cp	r8, r1
 b3c:	91 04       	cpc	r9, r1
 b3e:	e1 f0       	breq	.+56     	; 0xb78 <xTaskCreateStatic+0x5e>
 b40:	a1 14       	cp	r10, r1
 b42:	b1 04       	cpc	r11, r1
 b44:	c9 f0       	breq	.+50     	; 0xb78 <xTaskCreateStatic+0x5e>
 b46:	77 e2       	ldi	r23, 0x27	; 39
 b48:	f4 01       	movw	r30, r8
 b4a:	11 92       	st	Z+, r1
 b4c:	7a 95       	dec	r23
 b4e:	e9 f7       	brne	.-6      	; 0xb4a <xTaskCreateStatic+0x30>
 b50:	f4 01       	movw	r30, r8
 b52:	b0 8e       	std	Z+24, r11	; 0x18
 b54:	a7 8a       	std	Z+23, r10	; 0x17
 b56:	72 e0       	ldi	r23, 0x02	; 2
 b58:	76 a3       	std	Z+38, r23	; 0x26
 b5a:	1f 92       	push	r1
 b5c:	1f 92       	push	r1
 b5e:	1f 92       	push	r1
 b60:	fe 01       	movw	r30, r28
 b62:	31 96       	adiw	r30, 0x01	; 1
 b64:	5f 01       	movw	r10, r30
 b66:	0e 94 47 03 	call	0x68e	; 0x68e <prvInitialiseNewTask>
 b6a:	c4 01       	movw	r24, r8
 b6c:	0e 94 ca 02 	call	0x594	; 0x594 <prvAddNewTaskToReadyList>
 b70:	0f 90       	pop	r0
 b72:	0f 90       	pop	r0
 b74:	0f 90       	pop	r0
 b76:	02 c0       	rjmp	.+4      	; 0xb7c <xTaskCreateStatic+0x62>
 b78:	1a 82       	std	Y+2, r1	; 0x02
 b7a:	19 82       	std	Y+1, r1	; 0x01
 b7c:	89 81       	ldd	r24, Y+1	; 0x01
 b7e:	9a 81       	ldd	r25, Y+2	; 0x02
 b80:	0f 90       	pop	r0
 b82:	0f 90       	pop	r0
 b84:	df 91       	pop	r29
 b86:	cf 91       	pop	r28
 b88:	1f 91       	pop	r17
 b8a:	0f 91       	pop	r16
 b8c:	ff 90       	pop	r15
 b8e:	ef 90       	pop	r14
 b90:	cf 90       	pop	r12
 b92:	bf 90       	pop	r11
 b94:	af 90       	pop	r10
 b96:	9f 90       	pop	r9
 b98:	8f 90       	pop	r8
 b9a:	7f 90       	pop	r7
 b9c:	6f 90       	pop	r6
 b9e:	08 95       	ret

Disassembly of section .text.vTaskStartScheduler:

00000908 <vTaskStartScheduler>:
 908:	8f 92       	push	r8
 90a:	9f 92       	push	r9
 90c:	af 92       	push	r10
 90e:	bf 92       	push	r11
 910:	cf 92       	push	r12
 912:	ef 92       	push	r14
 914:	ff 92       	push	r15
 916:	0f 93       	push	r16
 918:	1f 93       	push	r17
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
 91e:	cd b7       	in	r28, 0x3d	; 61
 920:	de b7       	in	r29, 0x3e	; 62
 922:	28 97       	sbiw	r28, 0x08	; 8
 924:	0f b6       	in	r0, 0x3f	; 63
 926:	f8 94       	cli
 928:	de bf       	out	0x3e, r29	; 62
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	cd bf       	out	0x3d, r28	; 61
 92e:	18 86       	std	Y+8, r1	; 0x08
 930:	1f 82       	std	Y+7, r1	; 0x07
 932:	1e 82       	std	Y+6, r1	; 0x06
 934:	1d 82       	std	Y+5, r1	; 0x05
 936:	ae 01       	movw	r20, r28
 938:	4f 5f       	subi	r20, 0xFF	; 255
 93a:	5f 4f       	sbci	r21, 0xFF	; 255
 93c:	be 01       	movw	r22, r28
 93e:	6b 5f       	subi	r22, 0xFB	; 251
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	ce 01       	movw	r24, r28
 944:	07 96       	adiw	r24, 0x07	; 7
 946:	0e 94 2f 07 	call	0xe5e	; 0xe5e <vApplicationGetIdleTaskMemory>
 94a:	8f 80       	ldd	r8, Y+7	; 0x07
 94c:	98 84       	ldd	r9, Y+8	; 0x08
 94e:	ad 80       	ldd	r10, Y+5	; 0x05
 950:	be 80       	ldd	r11, Y+6	; 0x06
 952:	09 81       	ldd	r16, Y+1	; 0x01
 954:	1a 81       	ldd	r17, Y+2	; 0x02
 956:	2b 81       	ldd	r18, Y+3	; 0x03
 958:	3c 81       	ldd	r19, Y+4	; 0x04
 95a:	c1 2c       	mov	r12, r1
 95c:	e1 2c       	mov	r14, r1
 95e:	f1 2c       	mov	r15, r1
 960:	4e ea       	ldi	r20, 0xAE	; 174
 962:	50 e0       	ldi	r21, 0x00	; 0
 964:	60 e0       	ldi	r22, 0x00	; 0
 966:	8e e7       	ldi	r24, 0x7E	; 126
 968:	97 e0       	ldi	r25, 0x07	; 7
 96a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <xTaskCreateStatic>
 96e:	89 2b       	or	r24, r25
 970:	11 f0       	breq	.+4      	; 0x976 <vTaskStartScheduler+0x6e>
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	01 c0       	rjmp	.+2      	; 0x978 <vTaskStartScheduler+0x70>
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	81 30       	cpi	r24, 0x01	; 1
 97a:	81 f4       	brne	.+32     	; 0x99c <vTaskStartScheduler+0x94>
 97c:	f8 94       	cli
 97e:	8f ef       	ldi	r24, 0xFF	; 255
 980:	9f ef       	ldi	r25, 0xFF	; 255
 982:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <xNextTaskUnblockTime+0x1>
 986:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <xNextTaskUnblockTime>
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <xSchedulerRunning>
 990:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <xTickCount+0x1>
 994:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <xTickCount>
 998:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <xPortStartScheduler>
 99c:	28 96       	adiw	r28, 0x08	; 8
 99e:	0f b6       	in	r0, 0x3f	; 63
 9a0:	f8 94       	cli
 9a2:	de bf       	out	0x3e, r29	; 62
 9a4:	0f be       	out	0x3f, r0	; 63
 9a6:	cd bf       	out	0x3d, r28	; 61
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	1f 91       	pop	r17
 9ae:	0f 91       	pop	r16
 9b0:	ff 90       	pop	r15
 9b2:	ef 90       	pop	r14
 9b4:	cf 90       	pop	r12
 9b6:	bf 90       	pop	r11
 9b8:	af 90       	pop	r10
 9ba:	9f 90       	pop	r9
 9bc:	8f 90       	pop	r8
 9be:	08 95       	ret

Disassembly of section .text.vTaskSuspendAll:

00000ee2 <vTaskSuspendAll>:
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 ee2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <uxSchedulerSuspended>
 ee6:	8f 5f       	subi	r24, 0xFF	; 255
 ee8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <uxSchedulerSuspended>
 eec:	08 95       	ret

Disassembly of section .text.xTaskIncrementTick:

000000b4 <xTaskIncrementTick>:
    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <uxSchedulerSuspended>
  c0:	81 11       	cpse	r24, r1
  c2:	01 c1       	rjmp	.+514    	; 0x2c6 <xTaskIncrementTick+0x212>
  c4:	c0 91 bc 01 	lds	r28, 0x01BC	; 0x8001bc <xTickCount>
  c8:	d0 91 bd 01 	lds	r29, 0x01BD	; 0x8001bd <xTickCount+0x1>
  cc:	8e 01       	movw	r16, r28
  ce:	0f 5f       	subi	r16, 0xFF	; 255
  d0:	1f 4f       	sbci	r17, 0xFF	; 255
  d2:	10 93 bd 01 	sts	0x01BD, r17	; 0x8001bd <xTickCount+0x1>
  d6:	00 93 bc 01 	sts	0x01BC, r16	; 0x8001bc <xTickCount>
  da:	01 15       	cp	r16, r1
  dc:	11 05       	cpc	r17, r1
  de:	b9 f4       	brne	.+46     	; 0x10e <xTaskIncrementTick+0x5a>
  e0:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <pxDelayedTaskList>
  e4:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <pxDelayedTaskList+0x1>
  e8:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <pxOverflowDelayedTaskList>
  ec:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <pxOverflowDelayedTaskList+0x1>
  f0:	30 93 c1 01 	sts	0x01C1, r19	; 0x8001c1 <pxDelayedTaskList+0x1>
  f4:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <pxDelayedTaskList>
  f8:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <pxOverflowDelayedTaskList+0x1>
  fc:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <pxOverflowDelayedTaskList>
 100:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <xNumOfOverflows>
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <xNumOfOverflows>
 10a:	0e 94 e7 06 	call	0xdce	; 0xdce <prvResetNextTaskUnblockTime>
 10e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <xNextTaskUnblockTime>
 112:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <xNextTaskUnblockTime+0x1>
 116:	08 17       	cp	r16, r24
 118:	19 07       	cpc	r17, r25
 11a:	20 f4       	brcc	.+8      	; 0x124 <xTaskIncrementTick+0x70>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	b8 c0       	rjmp	.+368    	; 0x290 <xTaskIncrementTick+0x1dc>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	01 c0       	rjmp	.+2      	; 0x126 <xTaskIncrementTick+0x72>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <pxDelayedTaskList>
 12a:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <pxDelayedTaskList+0x1>
 12e:	90 81       	ld	r25, Z
 130:	91 11       	cpse	r25, r1
 132:	07 c0       	rjmp	.+14     	; 0x142 <xTaskIncrementTick+0x8e>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	3f ef       	ldi	r19, 0xFF	; 255
 138:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <xNextTaskUnblockTime+0x1>
 13c:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <xNextTaskUnblockTime>
 140:	a7 c0       	rjmp	.+334    	; 0x290 <xTaskIncrementTick+0x1dc>
 142:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <pxDelayedTaskList>
 146:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <pxDelayedTaskList+0x1>
 14a:	05 80       	ldd	r0, Z+5	; 0x05
 14c:	f6 81       	ldd	r31, Z+6	; 0x06
 14e:	e0 2d       	mov	r30, r0
 150:	06 80       	ldd	r0, Z+6	; 0x06
 152:	f7 81       	ldd	r31, Z+7	; 0x07
 154:	e0 2d       	mov	r30, r0
 156:	22 81       	ldd	r18, Z+2	; 0x02
 158:	33 81       	ldd	r19, Z+3	; 0x03
 15a:	02 17       	cp	r16, r18
 15c:	13 07       	cpc	r17, r19
 15e:	28 f4       	brcc	.+10     	; 0x16a <xTaskIncrementTick+0xb6>
 160:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <xNextTaskUnblockTime+0x1>
 164:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <xNextTaskUnblockTime>
 168:	93 c0       	rjmp	.+294    	; 0x290 <xTaskIncrementTick+0x1dc>
 16a:	a2 85       	ldd	r26, Z+10	; 0x0a
 16c:	b3 85       	ldd	r27, Z+11	; 0x0b
 16e:	24 81       	ldd	r18, Z+4	; 0x04
 170:	35 81       	ldd	r19, Z+5	; 0x05
 172:	46 81       	ldd	r20, Z+6	; 0x06
 174:	57 81       	ldd	r21, Z+7	; 0x07
 176:	e9 01       	movw	r28, r18
 178:	5d 83       	std	Y+5, r21	; 0x05
 17a:	4c 83       	std	Y+4, r20	; 0x04
 17c:	26 81       	ldd	r18, Z+6	; 0x06
 17e:	37 81       	ldd	r19, Z+7	; 0x07
 180:	44 81       	ldd	r20, Z+4	; 0x04
 182:	55 81       	ldd	r21, Z+5	; 0x05
 184:	e9 01       	movw	r28, r18
 186:	5b 83       	std	Y+3, r21	; 0x03
 188:	4a 83       	std	Y+2, r20	; 0x02
 18a:	11 96       	adiw	r26, 0x01	; 1
 18c:	2d 91       	ld	r18, X+
 18e:	3c 91       	ld	r19, X
 190:	12 97       	sbiw	r26, 0x02	; 2
 192:	af 01       	movw	r20, r30
 194:	4e 5f       	subi	r20, 0xFE	; 254
 196:	5f 4f       	sbci	r21, 0xFF	; 255
 198:	24 17       	cp	r18, r20
 19a:	35 07       	cpc	r19, r21
 19c:	31 f4       	brne	.+12     	; 0x1aa <xTaskIncrementTick+0xf6>
 19e:	26 81       	ldd	r18, Z+6	; 0x06
 1a0:	37 81       	ldd	r19, Z+7	; 0x07
 1a2:	12 96       	adiw	r26, 0x02	; 2
 1a4:	3c 93       	st	X, r19
 1a6:	2e 93       	st	-X, r18
 1a8:	11 97       	sbiw	r26, 0x01	; 1
 1aa:	13 86       	std	Z+11, r1	; 0x0b
 1ac:	12 86       	std	Z+10, r1	; 0x0a
 1ae:	9c 91       	ld	r25, X
 1b0:	91 50       	subi	r25, 0x01	; 1
 1b2:	9c 93       	st	X, r25
 1b4:	a4 89       	ldd	r26, Z+20	; 0x14
 1b6:	b5 89       	ldd	r27, Z+21	; 0x15
 1b8:	10 97       	sbiw	r26, 0x00	; 0
 1ba:	19 f1       	breq	.+70     	; 0x202 <xTaskIncrementTick+0x14e>
 1bc:	26 85       	ldd	r18, Z+14	; 0x0e
 1be:	37 85       	ldd	r19, Z+15	; 0x0f
 1c0:	60 89       	ldd	r22, Z+16	; 0x10
 1c2:	71 89       	ldd	r23, Z+17	; 0x11
 1c4:	e9 01       	movw	r28, r18
 1c6:	7d 83       	std	Y+5, r23	; 0x05
 1c8:	6c 83       	std	Y+4, r22	; 0x04
 1ca:	20 89       	ldd	r18, Z+16	; 0x10
 1cc:	31 89       	ldd	r19, Z+17	; 0x11
 1ce:	66 85       	ldd	r22, Z+14	; 0x0e
 1d0:	77 85       	ldd	r23, Z+15	; 0x0f
 1d2:	e9 01       	movw	r28, r18
 1d4:	7b 83       	std	Y+3, r23	; 0x03
 1d6:	6a 83       	std	Y+2, r22	; 0x02
 1d8:	11 96       	adiw	r26, 0x01	; 1
 1da:	6d 91       	ld	r22, X+
 1dc:	7c 91       	ld	r23, X
 1de:	12 97       	sbiw	r26, 0x02	; 2
 1e0:	9f 01       	movw	r18, r30
 1e2:	24 5f       	subi	r18, 0xF4	; 244
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	62 17       	cp	r22, r18
 1e8:	73 07       	cpc	r23, r19
 1ea:	31 f4       	brne	.+12     	; 0x1f8 <xTaskIncrementTick+0x144>
 1ec:	20 89       	ldd	r18, Z+16	; 0x10
 1ee:	31 89       	ldd	r19, Z+17	; 0x11
 1f0:	12 96       	adiw	r26, 0x02	; 2
 1f2:	3c 93       	st	X, r19
 1f4:	2e 93       	st	-X, r18
 1f6:	11 97       	sbiw	r26, 0x01	; 1
 1f8:	15 8a       	std	Z+21, r1	; 0x15
 1fa:	14 8a       	std	Z+20, r1	; 0x14
 1fc:	9c 91       	ld	r25, X
 1fe:	91 50       	subi	r25, 0x01	; 1
 200:	9c 93       	st	X, r25
 202:	26 89       	ldd	r18, Z+22	; 0x16
 204:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <uxTopReadyPriority>
 208:	92 17       	cp	r25, r18
 20a:	10 f4       	brcc	.+4      	; 0x210 <xTaskIncrementTick+0x15c>
 20c:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <uxTopReadyPriority>
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	d9 01       	movw	r26, r18
 214:	aa 0f       	add	r26, r26
 216:	bb 1f       	adc	r27, r27
 218:	aa 0f       	add	r26, r26
 21a:	bb 1f       	adc	r27, r27
 21c:	aa 0f       	add	r26, r26
 21e:	bb 1f       	adc	r27, r27
 220:	2a 0f       	add	r18, r26
 222:	3b 1f       	adc	r19, r27
 224:	d9 01       	movw	r26, r18
 226:	a9 59       	subi	r26, 0x99	; 153
 228:	be 4f       	sbci	r27, 0xFE	; 254
 22a:	11 96       	adiw	r26, 0x01	; 1
 22c:	0d 90       	ld	r0, X+
 22e:	bc 91       	ld	r27, X
 230:	a0 2d       	mov	r26, r0
 232:	b5 83       	std	Z+5, r27	; 0x05
 234:	a4 83       	std	Z+4, r26	; 0x04
 236:	14 96       	adiw	r26, 0x04	; 4
 238:	2d 91       	ld	r18, X+
 23a:	3c 91       	ld	r19, X
 23c:	15 97       	sbiw	r26, 0x05	; 5
 23e:	37 83       	std	Z+7, r19	; 0x07
 240:	26 83       	std	Z+6, r18	; 0x06
 242:	14 96       	adiw	r26, 0x04	; 4
 244:	2d 91       	ld	r18, X+
 246:	3c 91       	ld	r19, X
 248:	15 97       	sbiw	r26, 0x05	; 5
 24a:	e9 01       	movw	r28, r18
 24c:	5b 83       	std	Y+3, r21	; 0x03
 24e:	4a 83       	std	Y+2, r20	; 0x02
 250:	15 96       	adiw	r26, 0x05	; 5
 252:	5c 93       	st	X, r21
 254:	4e 93       	st	-X, r20
 256:	14 97       	sbiw	r26, 0x04	; 4
 258:	a6 89       	ldd	r26, Z+22	; 0x16
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	9d 01       	movw	r18, r26
 25e:	22 0f       	add	r18, r18
 260:	33 1f       	adc	r19, r19
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	a2 0f       	add	r26, r18
 26c:	b3 1f       	adc	r27, r19
 26e:	a9 59       	subi	r26, 0x99	; 153
 270:	be 4f       	sbci	r27, 0xFE	; 254
 272:	b3 87       	std	Z+11, r27	; 0x0b
 274:	a2 87       	std	Z+10, r26	; 0x0a
 276:	9c 91       	ld	r25, X
 278:	9f 5f       	subi	r25, 0xFF	; 255
 27a:	9c 93       	st	X, r25
 27c:	26 89       	ldd	r18, Z+22	; 0x16
 27e:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 282:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 286:	96 89       	ldd	r25, Z+22	; 0x16
 288:	92 17       	cp	r25, r18
 28a:	08 f4       	brcc	.+2      	; 0x28e <xTaskIncrementTick+0x1da>
 28c:	49 cf       	rjmp	.-366    	; 0x120 <xTaskIncrementTick+0x6c>
 28e:	4b cf       	rjmp	.-362    	; 0x126 <xTaskIncrementTick+0x72>
 290:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 294:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 298:	26 89       	ldd	r18, Z+22	; 0x16
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	f9 01       	movw	r30, r18
 29e:	ee 0f       	add	r30, r30
 2a0:	ff 1f       	adc	r31, r31
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	2e 0f       	add	r18, r30
 2ac:	3f 1f       	adc	r19, r31
 2ae:	f9 01       	movw	r30, r18
 2b0:	e9 59       	subi	r30, 0x99	; 153
 2b2:	fe 4f       	sbci	r31, 0xFE	; 254
 2b4:	90 81       	ld	r25, Z
 2b6:	92 30       	cpi	r25, 0x02	; 2
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <xTaskIncrementTick+0x208>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <xYieldPending>
 2c0:	91 11       	cpse	r25, r1
 2c2:	0c c0       	rjmp	.+24     	; 0x2dc <xTaskIncrementTick+0x228>
 2c4:	0c c0       	rjmp	.+24     	; 0x2de <xTaskIncrementTick+0x22a>
 2c6:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <xPendedTicks>
 2ca:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <xPendedTicks+0x1>
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <xPendedTicks+0x1>
 2d4:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <xPendedTicks>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	01 c0       	rjmp	.+2      	; 0x2de <xTaskIncrementTick+0x22a>
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	08 95       	ret

Disassembly of section .text.xTaskResumeAll:

000002e8 <xTaskResumeAll>:
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	0f 92       	push	r0
 2f2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <uxSchedulerSuspended>
 2f6:	81 50       	subi	r24, 0x01	; 1
 2f8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <uxSchedulerSuspended>
 2fc:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <uxSchedulerSuspended>
 300:	81 11       	cpse	r24, r1
 302:	bf c0       	rjmp	.+382    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 304:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <uxCurrentNumberOfTasks>
 308:	81 11       	cpse	r24, r1
 30a:	96 c0       	rjmp	.+300    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 30c:	bd c0       	rjmp	.+378    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 30e:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <xPendingReadyList+0x5>
 312:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <xPendingReadyList+0x6>
 316:	06 80       	ldd	r0, Z+6	; 0x06
 318:	f7 81       	ldd	r31, Z+7	; 0x07
 31a:	e0 2d       	mov	r30, r0
 31c:	a4 89       	ldd	r26, Z+20	; 0x14
 31e:	b5 89       	ldd	r27, Z+21	; 0x15
 320:	c6 85       	ldd	r28, Z+14	; 0x0e
 322:	d7 85       	ldd	r29, Z+15	; 0x0f
 324:	80 89       	ldd	r24, Z+16	; 0x10
 326:	91 89       	ldd	r25, Z+17	; 0x11
 328:	9d 83       	std	Y+5, r25	; 0x05
 32a:	8c 83       	std	Y+4, r24	; 0x04
 32c:	c0 89       	ldd	r28, Z+16	; 0x10
 32e:	d1 89       	ldd	r29, Z+17	; 0x11
 330:	86 85       	ldd	r24, Z+14	; 0x0e
 332:	97 85       	ldd	r25, Z+15	; 0x0f
 334:	9b 83       	std	Y+3, r25	; 0x03
 336:	8a 83       	std	Y+2, r24	; 0x02
 338:	11 96       	adiw	r26, 0x01	; 1
 33a:	2d 91       	ld	r18, X+
 33c:	3c 91       	ld	r19, X
 33e:	12 97       	sbiw	r26, 0x02	; 2
 340:	cf 01       	movw	r24, r30
 342:	0c 96       	adiw	r24, 0x0c	; 12
 344:	28 17       	cp	r18, r24
 346:	39 07       	cpc	r19, r25
 348:	31 f4       	brne	.+12     	; 0x356 <xTaskResumeAll+0x6e>
 34a:	80 89       	ldd	r24, Z+16	; 0x10
 34c:	91 89       	ldd	r25, Z+17	; 0x11
 34e:	12 96       	adiw	r26, 0x02	; 2
 350:	9c 93       	st	X, r25
 352:	8e 93       	st	-X, r24
 354:	11 97       	sbiw	r26, 0x01	; 1
 356:	15 8a       	std	Z+21, r1	; 0x15
 358:	14 8a       	std	Z+20, r1	; 0x14
 35a:	8c 91       	ld	r24, X
 35c:	81 50       	subi	r24, 0x01	; 1
 35e:	8c 93       	st	X, r24
 360:	a2 85       	ldd	r26, Z+10	; 0x0a
 362:	b3 85       	ldd	r27, Z+11	; 0x0b
 364:	c4 81       	ldd	r28, Z+4	; 0x04
 366:	d5 81       	ldd	r29, Z+5	; 0x05
 368:	86 81       	ldd	r24, Z+6	; 0x06
 36a:	97 81       	ldd	r25, Z+7	; 0x07
 36c:	9d 83       	std	Y+5, r25	; 0x05
 36e:	8c 83       	std	Y+4, r24	; 0x04
 370:	c6 81       	ldd	r28, Z+6	; 0x06
 372:	d7 81       	ldd	r29, Z+7	; 0x07
 374:	84 81       	ldd	r24, Z+4	; 0x04
 376:	95 81       	ldd	r25, Z+5	; 0x05
 378:	9b 83       	std	Y+3, r25	; 0x03
 37a:	8a 83       	std	Y+2, r24	; 0x02
 37c:	11 96       	adiw	r26, 0x01	; 1
 37e:	8d 91       	ld	r24, X+
 380:	9c 91       	ld	r25, X
 382:	12 97       	sbiw	r26, 0x02	; 2
 384:	9f 01       	movw	r18, r30
 386:	2e 5f       	subi	r18, 0xFE	; 254
 388:	3f 4f       	sbci	r19, 0xFF	; 255
 38a:	82 17       	cp	r24, r18
 38c:	93 07       	cpc	r25, r19
 38e:	31 f4       	brne	.+12     	; 0x39c <xTaskResumeAll+0xb4>
 390:	86 81       	ldd	r24, Z+6	; 0x06
 392:	97 81       	ldd	r25, Z+7	; 0x07
 394:	12 96       	adiw	r26, 0x02	; 2
 396:	9c 93       	st	X, r25
 398:	8e 93       	st	-X, r24
 39a:	11 97       	sbiw	r26, 0x01	; 1
 39c:	13 86       	std	Z+11, r1	; 0x0b
 39e:	12 86       	std	Z+10, r1	; 0x0a
 3a0:	8c 91       	ld	r24, X
 3a2:	81 50       	subi	r24, 0x01	; 1
 3a4:	8c 93       	st	X, r24
 3a6:	86 89       	ldd	r24, Z+22	; 0x16
 3a8:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <uxTopReadyPriority>
 3ac:	98 17       	cp	r25, r24
 3ae:	10 f4       	brcc	.+4      	; 0x3b4 <xTaskResumeAll+0xcc>
 3b0:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <uxTopReadyPriority>
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	dc 01       	movw	r26, r24
 3b8:	aa 0f       	add	r26, r26
 3ba:	bb 1f       	adc	r27, r27
 3bc:	aa 0f       	add	r26, r26
 3be:	bb 1f       	adc	r27, r27
 3c0:	aa 0f       	add	r26, r26
 3c2:	bb 1f       	adc	r27, r27
 3c4:	8a 0f       	add	r24, r26
 3c6:	9b 1f       	adc	r25, r27
 3c8:	dc 01       	movw	r26, r24
 3ca:	a9 59       	subi	r26, 0x99	; 153
 3cc:	be 4f       	sbci	r27, 0xFE	; 254
 3ce:	11 96       	adiw	r26, 0x01	; 1
 3d0:	0d 90       	ld	r0, X+
 3d2:	bc 91       	ld	r27, X
 3d4:	a0 2d       	mov	r26, r0
 3d6:	b5 83       	std	Z+5, r27	; 0x05
 3d8:	a4 83       	std	Z+4, r26	; 0x04
 3da:	14 96       	adiw	r26, 0x04	; 4
 3dc:	8d 91       	ld	r24, X+
 3de:	9c 91       	ld	r25, X
 3e0:	15 97       	sbiw	r26, 0x05	; 5
 3e2:	97 83       	std	Z+7, r25	; 0x07
 3e4:	86 83       	std	Z+6, r24	; 0x06
 3e6:	14 96       	adiw	r26, 0x04	; 4
 3e8:	cd 91       	ld	r28, X+
 3ea:	dc 91       	ld	r29, X
 3ec:	15 97       	sbiw	r26, 0x05	; 5
 3ee:	3b 83       	std	Y+3, r19	; 0x03
 3f0:	2a 83       	std	Y+2, r18	; 0x02
 3f2:	15 96       	adiw	r26, 0x05	; 5
 3f4:	3c 93       	st	X, r19
 3f6:	2e 93       	st	-X, r18
 3f8:	14 97       	sbiw	r26, 0x04	; 4
 3fa:	a6 89       	ldd	r26, Z+22	; 0x16
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	cd 01       	movw	r24, r26
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	a8 0f       	add	r26, r24
 40e:	b9 1f       	adc	r27, r25
 410:	a9 59       	subi	r26, 0x99	; 153
 412:	be 4f       	sbci	r27, 0xFE	; 254
 414:	b3 87       	std	Z+11, r27	; 0x0b
 416:	a2 87       	std	Z+10, r26	; 0x0a
 418:	8c 91       	ld	r24, X
 41a:	8f 5f       	subi	r24, 0xFF	; 255
 41c:	8c 93       	st	X, r24
 41e:	96 89       	ldd	r25, Z+22	; 0x16
 420:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <pxCurrentTCB>
 424:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <pxCurrentTCB+0x1>
 428:	56 96       	adiw	r26, 0x16	; 22
 42a:	8c 91       	ld	r24, X
 42c:	98 17       	cp	r25, r24
 42e:	30 f0       	brcs	.+12     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <xYieldPending>
 436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 438:	e0 e0       	ldi	r30, 0x00	; 0
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <xPendingReadyList>
 440:	81 11       	cpse	r24, r1
 442:	65 cf       	rjmp	.-310    	; 0x30e <xTaskResumeAll+0x26>
 444:	ef 2b       	or	r30, r31
 446:	11 f0       	breq	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	0e 94 e7 06 	call	0xdce	; 0xdce <prvResetNextTaskUnblockTime>
 44c:	c0 91 ba 01 	lds	r28, 0x01BA	; 0x8001ba <xPendedTicks>
 450:	d0 91 bb 01 	lds	r29, 0x01BB	; 0x8001bb <xPendedTicks+0x1>
 454:	20 97       	sbiw	r28, 0x00	; 0
 456:	69 f0       	breq	.+26     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 458:	0e 94 5a 00 	call	0xb4	; 0xb4 <xTaskIncrementTick>
 45c:	88 23       	and	r24, r24
 45e:	19 f0       	breq	.+6      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <xYieldPending>
 466:	21 97       	sbiw	r28, 0x01	; 1
 468:	b9 f7       	brne	.-18     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 46a:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <xPendedTicks+0x1>
 46e:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <xPendedTicks>
 472:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <xYieldPending>
 476:	88 23       	and	r24, r24
 478:	31 f0       	breq	.+12     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 47a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <vPortYield>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	03 c0       	rjmp	.+6      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	01 c0       	rjmp	.+2      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

Disassembly of section .text.vTaskDelay:

00000e32 <vTaskDelay>:
 e32:	cf 93       	push	r28
 e34:	df 93       	push	r29
 e36:	ec 01       	movw	r28, r24
 e38:	89 2b       	or	r24, r25
 e3a:	49 f0       	breq	.+18     	; 0xe4e <vTaskDelay+0x1c>
 e3c:	0e 94 71 07 	call	0xee2	; 0xee2 <vTaskSuspendAll>
 e40:	60 e0       	ldi	r22, 0x00	; 0
 e42:	ce 01       	movw	r24, r28
 e44:	0e 94 49 02 	call	0x492	; 0x492 <prvAddCurrentTaskToDelayedList>
 e48:	0e 94 74 01 	call	0x2e8	; 0x2e8 <xTaskResumeAll>
 e4c:	01 c0       	rjmp	.+2      	; 0xe50 <vTaskDelay+0x1e>
 e4e:	80 e0       	ldi	r24, 0x00	; 0
 e50:	81 11       	cpse	r24, r1
 e52:	02 c0       	rjmp	.+4      	; 0xe58 <vTaskDelay+0x26>
 e54:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <vPortYield>
 e58:	df 91       	pop	r29
 e5a:	cf 91       	pop	r28
 e5c:	08 95       	ret

Disassembly of section .text.vTaskSwitchContext:

00000a72 <vTaskSwitchContext>:
 a72:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <uxSchedulerSuspended>
 a76:	88 23       	and	r24, r24
 a78:	21 f0       	breq	.+8      	; 0xa82 <vTaskSwitchContext+0x10>
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <xYieldPending>
 a80:	08 95       	ret
 a82:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <xYieldPending>
 a86:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <uxTopReadyPriority>
 a8a:	01 c0       	rjmp	.+2      	; 0xa8e <vTaskSwitchContext+0x1c>
 a8c:	21 50       	subi	r18, 0x01	; 1
 a8e:	82 2f       	mov	r24, r18
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	fc 01       	movw	r30, r24
 a94:	ee 0f       	add	r30, r30
 a96:	ff 1f       	adc	r31, r31
 a98:	ee 0f       	add	r30, r30
 a9a:	ff 1f       	adc	r31, r31
 a9c:	ee 0f       	add	r30, r30
 a9e:	ff 1f       	adc	r31, r31
 aa0:	e8 0f       	add	r30, r24
 aa2:	f9 1f       	adc	r31, r25
 aa4:	e9 59       	subi	r30, 0x99	; 153
 aa6:	fe 4f       	sbci	r31, 0xFE	; 254
 aa8:	30 81       	ld	r19, Z
 aaa:	33 23       	and	r19, r19
 aac:	79 f3       	breq	.-34     	; 0xa8c <vTaskSwitchContext+0x1a>
 aae:	ac 01       	movw	r20, r24
 ab0:	44 0f       	add	r20, r20
 ab2:	55 1f       	adc	r21, r21
 ab4:	44 0f       	add	r20, r20
 ab6:	55 1f       	adc	r21, r21
 ab8:	44 0f       	add	r20, r20
 aba:	55 1f       	adc	r21, r21
 abc:	48 0f       	add	r20, r24
 abe:	59 1f       	adc	r21, r25
 ac0:	df 01       	movw	r26, r30
 ac2:	01 80       	ldd	r0, Z+1	; 0x01
 ac4:	f2 81       	ldd	r31, Z+2	; 0x02
 ac6:	e0 2d       	mov	r30, r0
 ac8:	02 80       	ldd	r0, Z+2	; 0x02
 aca:	f3 81       	ldd	r31, Z+3	; 0x03
 acc:	e0 2d       	mov	r30, r0
 ace:	12 96       	adiw	r26, 0x02	; 2
 ad0:	fc 93       	st	X, r31
 ad2:	ee 93       	st	-X, r30
 ad4:	11 97       	sbiw	r26, 0x01	; 1
 ad6:	46 59       	subi	r20, 0x96	; 150
 ad8:	5e 4f       	sbci	r21, 0xFE	; 254
 ada:	e4 17       	cp	r30, r20
 adc:	f5 07       	cpc	r31, r21
 ade:	29 f4       	brne	.+10     	; 0xaea <vTaskSwitchContext+0x78>
 ae0:	42 81       	ldd	r20, Z+2	; 0x02
 ae2:	53 81       	ldd	r21, Z+3	; 0x03
 ae4:	fd 01       	movw	r30, r26
 ae6:	52 83       	std	Z+2, r21	; 0x02
 ae8:	41 83       	std	Z+1, r20	; 0x01
 aea:	fc 01       	movw	r30, r24
 aec:	ee 0f       	add	r30, r30
 aee:	ff 1f       	adc	r31, r31
 af0:	ee 0f       	add	r30, r30
 af2:	ff 1f       	adc	r31, r31
 af4:	ee 0f       	add	r30, r30
 af6:	ff 1f       	adc	r31, r31
 af8:	8e 0f       	add	r24, r30
 afa:	9f 1f       	adc	r25, r31
 afc:	fc 01       	movw	r30, r24
 afe:	e9 59       	subi	r30, 0x99	; 153
 b00:	fe 4f       	sbci	r31, 0xFE	; 254
 b02:	01 80       	ldd	r0, Z+1	; 0x01
 b04:	f2 81       	ldd	r31, Z+2	; 0x02
 b06:	e0 2d       	mov	r30, r0
 b08:	86 81       	ldd	r24, Z+6	; 0x06
 b0a:	97 81       	ldd	r25, Z+7	; 0x07
 b0c:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <pxCurrentTCB+0x1>
 b10:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <pxCurrentTCB>
 b14:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <uxTopReadyPriority>
 b18:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000f0c <_fini>:
 f0c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000f0e <__funcs_on_exit>:
 f0e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000f10 <__simulator_exit>:
 f10:	08 95       	ret

Disassembly of section .text.exit:

00000eba <exit>:
 eba:	ec 01       	movw	r28, r24
 ebc:	0e 94 87 07 	call	0xf0e	; 0xf0e <__funcs_on_exit>
 ec0:	0e 94 86 07 	call	0xf0c	; 0xf0c <_fini>
 ec4:	ce 01       	movw	r24, r28
 ec6:	0e 94 88 07 	call	0xf10	; 0xf10 <__simulator_exit>
 eca:	ce 01       	movw	r24, r28
 ecc:	0e 94 83 07 	call	0xf06	; 0xf06 <_Exit>

Disassembly of section .text._Exit:

00000f06 <_Exit>:
 f06:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
