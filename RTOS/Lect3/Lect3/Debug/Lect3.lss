
Lect3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  000001c1  2**0
                  ALLOC
  2 .bss          00000006  00800060  00800060  00001bf2  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00001bf2  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000002a  00000000  00000000  00001c21  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  00001c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006783  00000000  00000000  00002033  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e2  00000000  00000000  000087b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002994  00000000  00000000  00009898  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cd4  00000000  00000000  0000c22c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ba  00000000  00000000  0000cf00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004e94  00000000  00000000  0000d6ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0001254e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00001aee  00001aee  00001be2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00012948  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.pvPortMalloc 00000074  00001362  00001362  00001456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.vPortFree 00000002  00001af6  00001af6  00001bea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.pucAlignedHeap.2094 00000002  00800693  00800693  00001bf2  2**0
                  ALLOC
 18 .bss.xNextFreeByte 00000002  00800695  00800695  00001bf2  2**0
                  ALLOC
 19 .bss.ucHeap   000005dc  00800066  00800066  00001bf2  2**0
                  ALLOC
 20 .text.HLCD_vsendData 00000068  00001444  00001444  00001538  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.HLCD_vsendCommand 00000068  000014ac  000014ac  000015a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.HLCD_vShowString 00000042  00001810  00001810  00001904  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.HLCD_vInit 00000076  000012ec  000012ec  000013e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.vListInitialise 0000001c  00001a20  00001a20  00001b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.vListInitialiseItem 00000008  00001ad8  00001ad8  00001bcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.vListInsert 00000062  0000157c  0000157c  00001670  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.uxListRemove 0000004e  0000169a  0000169a  0000178e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .progmemx.data 0000001f  000000ae  000000ae  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .text.SenderTask1 0000004a  00001734  00001734  00001828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.SenderTask2 0000004a  0000177e  0000177e  00001872  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.ReceiverTask 00000068  00001514  00001514  00001608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.main    000000e2  00000b08  00000b08  00000bfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.prvSetupTimerInterrupt 00000012  00001a96  00001a96  00001b8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.pxPortInitialiseStack 000000d8  00000cc8  00000cc8  00000dbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.xPortStartScheduler 0000005e  000015de  000015de  000016d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.vPortYield 000000b2  00000e5a  00000e5a  00000f4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__vector_7 00000048  000017c8  000017c8  000018bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.prvIsQueueEmpty 00000026  000019d6  000019d6  00001aca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.prvIsQueueFull 00000038  00001852  00001852  00001946  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.prvCopyDataToQueue 00000092  0000104c  0000104c  00001140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.prvCopyDataFromQueue 00000036  000018c2  000018c2  000019b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.prvNotifyQueueSetContainer 00000098  00000fb4  00000fb4  000010a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.prvUnlockQueue 0000008a  000010de  000010de  000011d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.xQueueGenericReset 000000ba  00000da0  00000da0  00000e94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.prvInitialiseNewQueue 00000032  000018f8  000018f8  000019ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.xQueueGenericCreate 00000082  000011ec  000011ec  000012e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.xQueueGenericSend 0000013e  000005d0  000005d0  000006c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.xQueueReceive 00000120  0000070e  0000070e  00000802  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.xQueueCreateSet 0000000a  00001ac4  00001ac4  00001bb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.xQueueAddToSet 0000002a  0000195c  0000195c  00001a50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.xQueueSelectFromSet 00000028  00001986  00001986  00001a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.prvResetNextTaskUnblockTime 00000038  0000188a  0000188a  0000197e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.prvDeleteTCB 0000001a  00001a3c  00001a3c  00001b30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.prvInitialiseNewTask 000000ea  00000a1e  00000a1e  00000b12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.prvInitialiseTaskLists 0000006e  000013d6  000013d6  000014ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.prvAddNewTaskToReadyList 000000ee  00000930  00000930  00000a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.prvCheckTasksWaitingTermination 0000004c  000016e8  000016e8  000017dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.prvIdleTask 0000000a  00001ace  00001ace  00001bc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.prvAddCurrentTaskToDelayedList 00000102  0000082e  0000082e  00000922  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.xTaskCreate 000000de  00000bea  00000bea  00000cde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .progmemx.data 00000006  000000cd  000000cd  000001c1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 62 .text.vTaskStartScheduler 0000005e  0000163c  0000163c  00001730  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.vTaskSuspendAll 0000000c  00001ab8  00001ab8  00001bac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.xTaskGetTickCount 00000014  00001a82  00001a82  00001b76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uxTaskGetNumberOfTasks 00000006  00001ae8  00001ae8  00001bdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.xTaskIncrementTick 000001de  000000d4  000000d4  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.xTaskResumeAll 0000019a  000002b2  000002b2  000003a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.xTaskDelayUntil 00000084  00001168  00001168  0000125c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.vTaskSwitchContext 000000a8  00000f0c  00000f0c  00001000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.vTaskPlaceOnEventList 00000024  000019fc  000019fc  00001af0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.xTaskRemoveFromEventList 00000184  0000044c  0000044c  00000540  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.vTaskInternalSetTimeOutState 00000016  00001a56  00001a56  00001b4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.xTaskCheckForTimeOut 0000007e  0000126e  0000126e  00001362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.vTaskMissedYield 00000008  00001ae0  00001ae0  00001bd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .bss.uxSchedulerSuspended 00000001  008006a5  008006a5  00001bf2  2**0
                  ALLOC
 76 .bss.xIdleTaskHandle 00000002  00800697  00800697  00001bf2  2**0
                  ALLOC
 77 .bss.xNextTaskUnblockTime 00000002  00800699  00800699  00001bf2  2**0
                  ALLOC
 78 .bss.uxTaskNumber 00000001  008006a6  008006a6  00001bf2  2**0
                  ALLOC
 79 .bss.xNumOfOverflows 00000001  008006a7  008006a7  00001bf2  2**0
                  ALLOC
 80 .bss.xYieldPending 00000001  008006a8  008006a8  00001bf2  2**0
                  ALLOC
 81 .bss.xPendedTicks 00000002  0080069b  0080069b  00001bf2  2**0
                  ALLOC
 82 .bss.xSchedulerRunning 00000001  008006a9  008006a9  00001bf2  2**0
                  ALLOC
 83 .bss.uxTopReadyPriority 00000001  008006aa  008006aa  00001bf2  2**0
                  ALLOC
 84 .bss.xTickCount 00000002  0080069d  0080069d  00001bf2  2**0
                  ALLOC
 85 .bss.uxCurrentNumberOfTasks 00000001  008006ab  008006ab  00001bf2  2**0
                  ALLOC
 86 .bss.xSuspendedTaskList 00000009  00800666  00800666  00001bf2  2**0
                  ALLOC
 87 .bss.uxDeletedTasksWaitingCleanUp 00000001  008006ac  008006ac  00001bf2  2**0
                  ALLOC
 88 .bss.xTasksWaitingTermination 00000009  0080066f  0080066f  00001bf2  2**0
                  ALLOC
 89 .bss.xPendingReadyList 00000009  00800678  00800678  00001bf2  2**0
                  ALLOC
 90 .bss.pxOverflowDelayedTaskList 00000002  0080069f  0080069f  00001bf2  2**0
                  ALLOC
 91 .bss.pxDelayedTaskList 00000002  008006a1  008006a1  00001bf2  2**0
                  ALLOC
 92 .bss.xDelayedTaskList2 00000009  00800681  00800681  00001bf2  2**0
                  ALLOC
 93 .bss.xDelayedTaskList1 00000009  0080068a  0080068a  00001bf2  2**0
                  ALLOC
 94 .bss.pxReadyTasksLists 00000024  00800642  00800642  00001bf2  2**0
                  ALLOC
 95 .bss.pxCurrentTCB 00000002  008006a3  008006a3  00001bf2  2**0
                  ALLOC
 96 .text.libgcc.div 00000028  000019ae  000019ae  00001aa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.libgcc  00000010  00001aa8  00001aa8  00001b9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.__dummy_fini 00000002  00001af8  00001af8  00001bec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.__dummy_funcs_on_exit 00000002  00001afa  00001afa  00001bee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.__dummy_simulator_exit 00000002  00001afc  00001afc  00001bf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.exit    00000016  00001a6c  00001a6c  00001b60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.memcpy  00000032  0000192a  0000192a  00001a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text._Exit   00000004  00001af2  00001af2  00001be6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
   8:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
   c:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  10:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  14:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  18:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  1c:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__vector_7>
  20:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  24:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  28:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  2c:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  30:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  34:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  38:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  3c:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  40:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  44:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  48:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  4c:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>
  50:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	06 ad       	ldd	r16, Z+62	; 0x3e
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 84 05 	call	0xb08	; 0xb08 <main>
  a6:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00001aee <__bad_interrupt>:
    1aee:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.pvPortMalloc:

00001362 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
    1368:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
    136c:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <pucAlignedHeap.2094>
    1370:	90 91 94 06 	lds	r25, 0x0694	; 0x800694 <pucAlignedHeap.2094+0x1>
    1374:	89 2b       	or	r24, r25
    1376:	31 f4       	brne	.+12     	; 0x1384 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1378:	86 e6       	ldi	r24, 0x66	; 102
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	90 93 94 06 	sts	0x0694, r25	; 0x800694 <pucAlignedHeap.2094+0x1>
    1380:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <pucAlignedHeap.2094>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    1384:	20 97       	sbiw	r28, 0x00	; 0
    1386:	c9 f0       	breq	.+50     	; 0x13ba <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1388:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <xNextFreeByte>
    138c:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <xNextFreeByte+0x1>
    1390:	9e 01       	movw	r18, r28
    1392:	28 0f       	add	r18, r24
    1394:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    1396:	2b 3d       	cpi	r18, 0xDB	; 219
    1398:	45 e0       	ldi	r20, 0x05	; 5
    139a:	34 07       	cpc	r19, r20
    139c:	88 f4       	brcc	.+34     	; 0x13c0 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    139e:	82 17       	cp	r24, r18
    13a0:	93 07       	cpc	r25, r19
    13a2:	88 f4       	brcc	.+34     	; 0x13c6 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
    13a4:	c0 91 93 06 	lds	r28, 0x0693	; 0x800693 <pucAlignedHeap.2094>
    13a8:	d0 91 94 06 	lds	r29, 0x0694	; 0x800694 <pucAlignedHeap.2094+0x1>
    13ac:	c8 0f       	add	r28, r24
    13ae:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
    13b0:	30 93 96 06 	sts	0x0696, r19	; 0x800696 <xNextFreeByte+0x1>
    13b4:	20 93 95 06 	sts	0x0695, r18	; 0x800695 <xNextFreeByte>
    13b8:	08 c0       	rjmp	.+16     	; 0x13ca <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
    13ba:	c0 e0       	ldi	r28, 0x00	; 0
    13bc:	d0 e0       	ldi	r29, 0x00	; 0
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <pvPortMalloc+0x68>
    13c0:	c0 e0       	ldi	r28, 0x00	; 0
    13c2:	d0 e0       	ldi	r29, 0x00	; 0
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <pvPortMalloc+0x68>
    13c6:	c0 e0       	ldi	r28, 0x00	; 0
    13c8:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    13ca:	0e 94 59 01 	call	0x2b2	; 0x2b2 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
    13ce:	ce 01       	movw	r24, r28
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

Disassembly of section .text.vPortFree:

00001af6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    1af6:	08 95       	ret

Disassembly of section .text.HLCD_vsendData:

00001444 <HLCD_vsendData>:
	_delay_us(40);
	HLCD_vsendCommand(0x0f);
}

void HLCD_vshowString(u8 * chars){
	HLCD_vClearDisplay();
    1444:	9b b3       	in	r25, 0x1b	; 27
    1446:	9f 70       	andi	r25, 0x0F	; 15
    1448:	28 2f       	mov	r18, r24
    144a:	20 7f       	andi	r18, 0xF0	; 240
    144c:	92 2b       	or	r25, r18
    144e:	9b bb       	out	0x1b, r25	; 27
    1450:	98 b3       	in	r25, 0x18	; 24
    1452:	92 60       	ori	r25, 0x02	; 2
    1454:	98 bb       	out	0x18, r25	; 24
    1456:	98 b3       	in	r25, 0x18	; 24
    1458:	9b 7f       	andi	r25, 0xFB	; 251
    145a:	98 bb       	out	0x18, r25	; 24
    145c:	98 b3       	in	r25, 0x18	; 24
    145e:	98 60       	ori	r25, 0x08	; 8
    1460:	98 bb       	out	0x18, r25	; 24
    1462:	ef e9       	ldi	r30, 0x9F	; 159
    1464:	ff e0       	ldi	r31, 0x0F	; 15
    1466:	31 97       	sbiw	r30, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <HLCD_vsendData+0x22>
    146a:	00 c0       	rjmp	.+0      	; 0x146c <HLCD_vsendData+0x28>
    146c:	00 00       	nop
    146e:	98 b3       	in	r25, 0x18	; 24
    1470:	97 7f       	andi	r25, 0xF7	; 247
    1472:	98 bb       	out	0x18, r25	; 24
    1474:	2b b3       	in	r18, 0x1b	; 27
    1476:	f0 e1       	ldi	r31, 0x10	; 16
    1478:	8f 9f       	mul	r24, r31
    147a:	c0 01       	movw	r24, r0
    147c:	11 24       	eor	r1, r1
    147e:	92 2f       	mov	r25, r18
    1480:	9f 70       	andi	r25, 0x0F	; 15
    1482:	89 2b       	or	r24, r25
    1484:	8b bb       	out	0x1b, r24	; 27
    1486:	88 b3       	in	r24, 0x18	; 24
    1488:	82 60       	ori	r24, 0x02	; 2
    148a:	88 bb       	out	0x18, r24	; 24
    148c:	88 b3       	in	r24, 0x18	; 24
    148e:	8b 7f       	andi	r24, 0xFB	; 251
    1490:	88 bb       	out	0x18, r24	; 24
    1492:	88 b3       	in	r24, 0x18	; 24
    1494:	88 60       	ori	r24, 0x08	; 8
    1496:	88 bb       	out	0x18, r24	; 24
    1498:	8f e9       	ldi	r24, 0x9F	; 159
    149a:	9f e0       	ldi	r25, 0x0F	; 15
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <HLCD_vsendData+0x58>
    14a0:	00 c0       	rjmp	.+0      	; 0x14a2 <HLCD_vsendData+0x5e>
    14a2:	00 00       	nop
    14a4:	88 b3       	in	r24, 0x18	; 24
    14a6:	87 7f       	andi	r24, 0xF7	; 247
    14a8:	88 bb       	out	0x18, r24	; 24
    14aa:	08 95       	ret

Disassembly of section .text.HLCD_vsendCommand:

000014ac <HLCD_vsendCommand>:
    14ac:	9b b3       	in	r25, 0x1b	; 27
    14ae:	9f 70       	andi	r25, 0x0F	; 15
    14b0:	28 2f       	mov	r18, r24
    14b2:	20 7f       	andi	r18, 0xF0	; 240
    14b4:	92 2b       	or	r25, r18
    14b6:	9b bb       	out	0x1b, r25	; 27
    14b8:	98 b3       	in	r25, 0x18	; 24
    14ba:	9d 7f       	andi	r25, 0xFD	; 253
    14bc:	98 bb       	out	0x18, r25	; 24
    14be:	98 b3       	in	r25, 0x18	; 24
    14c0:	9b 7f       	andi	r25, 0xFB	; 251
    14c2:	98 bb       	out	0x18, r25	; 24
    14c4:	98 b3       	in	r25, 0x18	; 24
    14c6:	98 60       	ori	r25, 0x08	; 8
    14c8:	98 bb       	out	0x18, r25	; 24
    14ca:	ef e9       	ldi	r30, 0x9F	; 159
    14cc:	ff e0       	ldi	r31, 0x0F	; 15
    14ce:	31 97       	sbiw	r30, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <HLCD_vsendCommand+0x22>
    14d2:	00 c0       	rjmp	.+0      	; 0x14d4 <HLCD_vsendCommand+0x28>
    14d4:	00 00       	nop
    14d6:	98 b3       	in	r25, 0x18	; 24
    14d8:	97 7f       	andi	r25, 0xF7	; 247
    14da:	98 bb       	out	0x18, r25	; 24
    14dc:	2b b3       	in	r18, 0x1b	; 27
    14de:	f0 e1       	ldi	r31, 0x10	; 16
    14e0:	8f 9f       	mul	r24, r31
    14e2:	c0 01       	movw	r24, r0
    14e4:	11 24       	eor	r1, r1
    14e6:	92 2f       	mov	r25, r18
    14e8:	9f 70       	andi	r25, 0x0F	; 15
    14ea:	89 2b       	or	r24, r25
    14ec:	8b bb       	out	0x1b, r24	; 27
    14ee:	88 b3       	in	r24, 0x18	; 24
    14f0:	8d 7f       	andi	r24, 0xFD	; 253
    14f2:	88 bb       	out	0x18, r24	; 24
    14f4:	88 b3       	in	r24, 0x18	; 24
    14f6:	8b 7f       	andi	r24, 0xFB	; 251
    14f8:	88 bb       	out	0x18, r24	; 24
    14fa:	88 b3       	in	r24, 0x18	; 24
    14fc:	88 60       	ori	r24, 0x08	; 8
    14fe:	88 bb       	out	0x18, r24	; 24
    1500:	8f e9       	ldi	r24, 0x9F	; 159
    1502:	9f e0       	ldi	r25, 0x0F	; 15
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	f1 f7       	brne	.-4      	; 0x1504 <HLCD_vsendCommand+0x58>
    1508:	00 c0       	rjmp	.+0      	; 0x150a <HLCD_vsendCommand+0x5e>
    150a:	00 00       	nop
    150c:	88 b3       	in	r24, 0x18	; 24
    150e:	87 7f       	andi	r24, 0xF7	; 247
    1510:	88 bb       	out	0x18, r24	; 24
    1512:	08 95       	ret

Disassembly of section .text.HLCD_vShowString:

00001810 <HLCD_vShowString>:
void HLCD_vClearDisplay(void){
	HLCD_vsendCommand(0x01);
	_delay_ms(2);

}
void HLCD_vShowString(u8 const *  str){
    1810:	cf 92       	push	r12
    1812:	df 92       	push	r13
    1814:	ef 92       	push	r14
    1816:	cf 93       	push	r28
    1818:	6b 01       	movw	r12, r22
    181a:	e8 2e       	mov	r14, r24
	u8 i = 0;
    181c:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i]!=0){
    181e:	09 c0       	rjmp	.+18     	; 0x1832 <HLCD_vShowString+0x22>
		HLCD_vsendData(str[i]);
    1820:	0e 94 22 0a 	call	0x1444	; 0x1444 <HLCD_vsendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1824:	8f e9       	ldi	r24, 0x9F	; 159
    1826:	9f e0       	ldi	r25, 0x0F	; 15
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <HLCD_vShowString+0x18>
    182c:	00 c0       	rjmp	.+0      	; 0x182e <HLCD_vShowString+0x1e>
    182e:	00 00       	nop
		_delay_ms(1);
		i++;
    1830:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(2);

}
void HLCD_vShowString(u8 const *  str){
	u8 i = 0;
	while(str[i]!=0){
    1832:	ae 2d       	mov	r26, r14
    1834:	c6 01       	movw	r24, r12
    1836:	8c 0f       	add	r24, r28
    1838:	91 1d       	adc	r25, r1
    183a:	a1 1d       	adc	r26, r1
    183c:	fc 01       	movw	r30, r24
    183e:	84 91       	lpm	r24, Z
    1840:	a7 fd       	sbrc	r26, 7
    1842:	80 81       	ld	r24, Z
    1844:	81 11       	cpse	r24, r1
    1846:	ec cf       	rjmp	.-40     	; 0x1820 <HLCD_vShowString+0x10>
		HLCD_vsendData(str[i]);
		_delay_ms(1);
		i++;
	}
	
}
    1848:	cf 91       	pop	r28
    184a:	ef 90       	pop	r14
    184c:	df 90       	pop	r13
    184e:	cf 90       	pop	r12
    1850:	08 95       	ret

Disassembly of section .text.HLCD_vInit:

000012ec <HLCD_vInit>:
	_delay_us(40);
	HLCD_vsendCommand(0x0f);
}

void HLCD_vshowString(u8 * chars){
	HLCD_vClearDisplay();
    12ec:	8f e0       	ldi	r24, 0x0F	; 15
    12ee:	87 bb       	out	0x17, r24	; 23
    12f0:	80 ef       	ldi	r24, 0xF0	; 240
    12f2:	8a bb       	out	0x1a, r24	; 26
    12f4:	2f ef       	ldi	r18, 0xFF	; 255
    12f6:	83 ef       	ldi	r24, 0xF3	; 243
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	21 50       	subi	r18, 0x01	; 1
    12fc:	80 40       	sbci	r24, 0x00	; 0
    12fe:	90 40       	sbci	r25, 0x00	; 0
    1300:	e1 f7       	brne	.-8      	; 0x12fa <HLCD_vInit+0xe>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <HLCD_vInit+0x18>
    1304:	00 00       	nop
    1306:	88 e2       	ldi	r24, 0x28	; 40
    1308:	0e 94 56 0a 	call	0x14ac	; 0x14ac <HLCD_vsendCommand>
    130c:	25 ed       	ldi	r18, 0xD5	; 213
    130e:	2a 95       	dec	r18
    1310:	f1 f7       	brne	.-4      	; 0x130e <HLCD_vInit+0x22>
    1312:	00 00       	nop
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	0e 94 56 0a 	call	0x14ac	; 0x14ac <HLCD_vsendCommand>
    131a:	8f e3       	ldi	r24, 0x3F	; 63
    131c:	9f e1       	ldi	r25, 0x1F	; 31
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <HLCD_vInit+0x32>
    1322:	00 c0       	rjmp	.+0      	; 0x1324 <HLCD_vInit+0x38>
    1324:	00 00       	nop
    1326:	86 e0       	ldi	r24, 0x06	; 6
    1328:	0e 94 56 0a 	call	0x14ac	; 0x14ac <HLCD_vsendCommand>
    132c:	95 ed       	ldi	r25, 0xD5	; 213
    132e:	9a 95       	dec	r25
    1330:	f1 f7       	brne	.-4      	; 0x132e <HLCD_vInit+0x42>
    1332:	00 00       	nop
    1334:	8f e0       	ldi	r24, 0x0F	; 15
    1336:	0e 94 56 0a 	call	0x14ac	; 0x14ac <HLCD_vsendCommand>
    133a:	84 e1       	ldi	r24, 0x14	; 20
    133c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <HLCD_vsendCommand>
    1340:	25 ed       	ldi	r18, 0xD5	; 213
    1342:	2a 95       	dec	r18
    1344:	f1 f7       	brne	.-4      	; 0x1342 <HLCD_vInit+0x56>
    1346:	00 00       	nop
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <HLCD_vsendCommand>
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	93 ec       	ldi	r25, 0xC3	; 195
    1352:	29 e0       	ldi	r18, 0x09	; 9
    1354:	81 50       	subi	r24, 0x01	; 1
    1356:	90 40       	sbci	r25, 0x00	; 0
    1358:	20 40       	sbci	r18, 0x00	; 0
    135a:	e1 f7       	brne	.-8      	; 0x1354 <HLCD_vInit+0x68>
    135c:	00 c0       	rjmp	.+0      	; 0x135e <HLCD_vInit+0x72>
    135e:	00 00       	nop
    1360:	08 95       	ret

Disassembly of section .text.vListInitialise:

00001a20 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1a20:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a22:	03 96       	adiw	r24, 0x03	; 3
    1a24:	92 83       	std	Z+2, r25	; 0x02
    1a26:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1a28:	2f ef       	ldi	r18, 0xFF	; 255
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	34 83       	std	Z+4, r19	; 0x04
    1a2e:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a30:	96 83       	std	Z+6, r25	; 0x06
    1a32:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a34:	90 87       	std	Z+8, r25	; 0x08
    1a36:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1a38:	10 82       	st	Z, r1
    1a3a:	08 95       	ret

Disassembly of section .text.vListInitialiseItem:

00001ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1ad8:	fc 01       	movw	r30, r24
    1ada:	11 86       	std	Z+9, r1	; 0x09
    1adc:	10 86       	std	Z+8, r1	; 0x08
    1ade:	08 95       	ret

Disassembly of section .text.vListInsert:

0000157c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1582:	48 81       	ld	r20, Y
    1584:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1586:	4f 3f       	cpi	r20, 0xFF	; 255
    1588:	2f ef       	ldi	r18, 0xFF	; 255
    158a:	52 07       	cpc	r21, r18
    158c:	21 f4       	brne	.+8      	; 0x1596 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    158e:	fc 01       	movw	r30, r24
    1590:	a7 81       	ldd	r26, Z+7	; 0x07
    1592:	b0 85       	ldd	r27, Z+8	; 0x08
    1594:	0d c0       	rjmp	.+26     	; 0x15b0 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1596:	dc 01       	movw	r26, r24
    1598:	13 96       	adiw	r26, 0x03	; 3
    159a:	01 c0       	rjmp	.+2      	; 0x159e <vListInsert+0x22>
    159c:	df 01       	movw	r26, r30
    159e:	12 96       	adiw	r26, 0x02	; 2
    15a0:	ed 91       	ld	r30, X+
    15a2:	fc 91       	ld	r31, X
    15a4:	13 97       	sbiw	r26, 0x03	; 3
    15a6:	20 81       	ld	r18, Z
    15a8:	31 81       	ldd	r19, Z+1	; 0x01
    15aa:	42 17       	cp	r20, r18
    15ac:	53 07       	cpc	r21, r19
    15ae:	b0 f7       	brcc	.-20     	; 0x159c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    15b0:	12 96       	adiw	r26, 0x02	; 2
    15b2:	ed 91       	ld	r30, X+
    15b4:	fc 91       	ld	r31, X
    15b6:	13 97       	sbiw	r26, 0x03	; 3
    15b8:	fb 83       	std	Y+3, r31	; 0x03
    15ba:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    15bc:	d5 83       	std	Z+5, r29	; 0x05
    15be:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    15c0:	bd 83       	std	Y+5, r27	; 0x05
    15c2:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    15c4:	13 96       	adiw	r26, 0x03	; 3
    15c6:	dc 93       	st	X, r29
    15c8:	ce 93       	st	-X, r28
    15ca:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    15cc:	99 87       	std	Y+9, r25	; 0x09
    15ce:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    15d0:	fc 01       	movw	r30, r24
    15d2:	20 81       	ld	r18, Z
    15d4:	2f 5f       	subi	r18, 0xFF	; 255
    15d6:	20 83       	st	Z, r18
}
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	08 95       	ret

Disassembly of section .text.uxListRemove:

0000169a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    16a0:	a0 85       	ldd	r26, Z+8	; 0x08
    16a2:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    16a4:	c2 81       	ldd	r28, Z+2	; 0x02
    16a6:	d3 81       	ldd	r29, Z+3	; 0x03
    16a8:	84 81       	ldd	r24, Z+4	; 0x04
    16aa:	95 81       	ldd	r25, Z+5	; 0x05
    16ac:	9d 83       	std	Y+5, r25	; 0x05
    16ae:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    16b0:	c4 81       	ldd	r28, Z+4	; 0x04
    16b2:	d5 81       	ldd	r29, Z+5	; 0x05
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	9b 83       	std	Y+3, r25	; 0x03
    16ba:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    16bc:	11 96       	adiw	r26, 0x01	; 1
    16be:	8d 91       	ld	r24, X+
    16c0:	9c 91       	ld	r25, X
    16c2:	12 97       	sbiw	r26, 0x02	; 2
    16c4:	e8 17       	cp	r30, r24
    16c6:	f9 07       	cpc	r31, r25
    16c8:	31 f4       	brne	.+12     	; 0x16d6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    16ca:	84 81       	ldd	r24, Z+4	; 0x04
    16cc:	95 81       	ldd	r25, Z+5	; 0x05
    16ce:	12 96       	adiw	r26, 0x02	; 2
    16d0:	9c 93       	st	X, r25
    16d2:	8e 93       	st	-X, r24
    16d4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    16d6:	11 86       	std	Z+9, r1	; 0x09
    16d8:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    16da:	8c 91       	ld	r24, X
    16dc:	81 50       	subi	r24, 0x01	; 1
    16de:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    16e0:	8c 91       	ld	r24, X
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret

Disassembly of section .text.SenderTask1:

00001734 <SenderTask1>:
	
	// The scheduler should never return, but in case it does, return 1
	return 1;
}

void SenderTask1(void *pvParameters) {
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	00 d0       	rcall	.+0      	; 0x173a <SenderTask1+0x6>
    173a:	00 d0       	rcall	.+0      	; 0x173c <SenderTask1+0x8>
    173c:	0f 92       	push	r0
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
	const char *message = "H1";
    1742:	8e ea       	ldi	r24, 0xAE	; 174
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a0 e0       	ldi	r26, 0x00	; 0
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	ab 83       	std	Y+3, r26	; 0x03
	TickType_t lastwake = xTaskGetTickCount();
    174e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <xTaskGetTickCount>
    1752:	9d 83       	std	Y+5, r25	; 0x05
    1754:	8c 83       	std	Y+4, r24	; 0x04
	TickType_t delay = 4000/portTICK_PERIOD_MS ;
	BaseType_t  state ;
	while (1)
	{
		vTaskDelayUntil(&lastwake, delay);
    1756:	60 ea       	ldi	r22, 0xA0	; 160
    1758:	7f e0       	ldi	r23, 0x0F	; 15
    175a:	ce 01       	movw	r24, r28
    175c:	04 96       	adiw	r24, 0x04	; 4
    175e:	0e 94 b4 08 	call	0x1168	; 0x1168 <xTaskDelayUntil>
		// Send the message pointer to Queue1
		state = xQueueSend(xQueue1, &message, portMAX_DELAY);
    1762:	ae 01       	movw	r20, r28
    1764:	4f 5f       	subi	r20, 0xFF	; 255
    1766:	5f 4f       	sbci	r21, 0xFF	; 255
    1768:	60 e8       	ldi	r22, 0x80	; 128
    176a:	00 e0       	ldi	r16, 0x00	; 0
    176c:	2f ef       	ldi	r18, 0xFF	; 255
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xQueue1>
    1774:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <xQueue1+0x1>
    1778:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <xQueueGenericSend>
    177c:	ec cf       	rjmp	.-40     	; 0x1756 <SenderTask1+0x22>

Disassembly of section .text.SenderTask2:

0000177e <SenderTask2>:
	
	// Delete the task (optional)
	// 	vTaskDelete(NULL);
}

void SenderTask2(void *pvParameters) {
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	00 d0       	rcall	.+0      	; 0x1784 <SenderTask2+0x6>
    1784:	00 d0       	rcall	.+0      	; 0x1786 <SenderTask2+0x8>
    1786:	0f 92       	push	r0
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
	const char *message = "H2";
    178c:	81 eb       	ldi	r24, 0xB1	; 177
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a0 e0       	ldi	r26, 0x00	; 0
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	ab 83       	std	Y+3, r26	; 0x03
	TickType_t lastwake = xTaskGetTickCount();
    1798:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <xTaskGetTickCount>
    179c:	9d 83       	std	Y+5, r25	; 0x05
    179e:	8c 83       	std	Y+4, r24	; 0x04
	TickType_t delay = 2000/portTICK_PERIOD_MS ;
	while (1)
	{
		vTaskDelayUntil(&lastwake, delay);
    17a0:	60 ed       	ldi	r22, 0xD0	; 208
    17a2:	77 e0       	ldi	r23, 0x07	; 7
    17a4:	ce 01       	movw	r24, r28
    17a6:	04 96       	adiw	r24, 0x04	; 4
    17a8:	0e 94 b4 08 	call	0x1168	; 0x1168 <xTaskDelayUntil>
		// Send the message pointer to Queue1
		xQueueSend(xQueue2, &message, portMAX_DELAY);
    17ac:	ae 01       	movw	r20, r28
    17ae:	4f 5f       	subi	r20, 0xFF	; 255
    17b0:	5f 4f       	sbci	r21, 0xFF	; 255
    17b2:	60 e8       	ldi	r22, 0x80	; 128
    17b4:	00 e0       	ldi	r16, 0x00	; 0
    17b6:	2f ef       	ldi	r18, 0xFF	; 255
    17b8:	3f ef       	ldi	r19, 0xFF	; 255
    17ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    17be:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    17c2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <xQueueGenericSend>
    17c6:	ec cf       	rjmp	.-40     	; 0x17a0 <SenderTask2+0x22>

Disassembly of section .text.ReceiverTask:

00001514 <ReceiverTask>:
	}

}


void ReceiverTask(void *pvParameters) {
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	00 d0       	rcall	.+0      	; 0x151a <ReceiverTask+0x6>
    151a:	00 d0       	rcall	.+0      	; 0x151c <ReceiverTask+0x8>
    151c:	00 d0       	rcall	.+0      	; 0x151e <ReceiverTask+0xa>
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
	const char *receivedMessage[2];
	QueueSetMemberHandle_t xActivatedMember;
	
	while (1) {
		// Wait to receive a pointer to a string from any queue in the queue set
		xActivatedMember = xQueueSelectFromSet(xQueueSet, portMAX_DELAY);
    1522:	6f ef       	ldi	r22, 0xFF	; 255
    1524:	7f ef       	ldi	r23, 0xFF	; 255
    1526:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <xQueueSet>
    152a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <xQueueSet+0x1>
    152e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <xQueueSelectFromSet>
		
		// Check which queue the message came from
		if (xActivatedMember == xQueue1) {
    1532:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <xQueue1>
    1536:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <xQueue1+0x1>
    153a:	82 17       	cp	r24, r18
    153c:	93 07       	cpc	r25, r19
    153e:	49 f4       	brne	.+18     	; 0x1552 <ReceiverTask+0x3e>
			
			// Receive message from Queue1
			xQueueReceive(xQueue1, &receivedMessage[0], portMAX_DELAY);
    1540:	4f ef       	ldi	r20, 0xFF	; 255
    1542:	5f ef       	ldi	r21, 0xFF	; 255
    1544:	be 01       	movw	r22, r28
    1546:	6f 5f       	subi	r22, 0xFF	; 255
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	c9 01       	movw	r24, r18
    154c:	0e 94 87 03 	call	0x70e	; 0x70e <xQueueReceive>
    1550:	0f c0       	rjmp	.+30     	; 0x1570 <ReceiverTask+0x5c>
			
			} else if (xActivatedMember == xQueue2) {
    1552:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1556:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    155a:	82 17       	cp	r24, r18
    155c:	93 07       	cpc	r25, r19
    155e:	41 f4       	brne	.+16     	; 0x1570 <ReceiverTask+0x5c>
			// Receive message from Queue2
			xQueueReceive(xQueue2, &receivedMessage[0], portMAX_DELAY);
    1560:	4f ef       	ldi	r20, 0xFF	; 255
    1562:	5f ef       	ldi	r21, 0xFF	; 255
    1564:	be 01       	movw	r22, r28
    1566:	6f 5f       	subi	r22, 0xFF	; 255
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	c9 01       	movw	r24, r18
    156c:	0e 94 87 03 	call	0x70e	; 0x70e <xQueueReceive>

		}
		// Display the received message on LCD
// 		HLCD_u8GotoXY(1,1);
		HLCD_vShowString(receivedMessage[0]);
    1570:	69 81       	ldd	r22, Y+1	; 0x01
    1572:	7a 81       	ldd	r23, Y+2	; 0x02
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	0e 94 08 0c 	call	0x1810	; 0x1810 <HLCD_vShowString>

		// 		HLCD_vShowString(receivedMessage[1]);

	}
    157a:	d3 cf       	rjmp	.-90     	; 0x1522 <ReceiverTask+0xe>

Disassembly of section .text.main:

00000b08 <main>:
// Task prototypes
void SenderTask1(void *pvParameters);
void SenderTask2(void *pvParameters);
void ReceiverTask(void *pvParameters);

int main(void) {
 b08:	cf 92       	push	r12
 b0a:	df 92       	push	r13
 b0c:	ef 92       	push	r14
 b0e:	0f 93       	push	r16
 b10:	1f 93       	push	r17
	// Initialize LCD
	HLCD_vInit();
 b12:	0e 94 76 09 	call	0x12ec	; 0x12ec <HLCD_vInit>
	
	// Create two queues
	xQueue1 = xQueueCreate(QUEUE_LENGTH, sizeof(char *));
 b16:	40 e0       	ldi	r20, 0x00	; 0
 b18:	62 e0       	ldi	r22, 0x02	; 2
 b1a:	85 e0       	ldi	r24, 0x05	; 5
 b1c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xQueueGenericCreate>
 b20:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <xQueue1+0x1>
 b24:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <xQueue1>
	xQueue2 = xQueueCreate(QUEUE_LENGTH, sizeof(char *));
 b28:	40 e0       	ldi	r20, 0x00	; 0
 b2a:	62 e0       	ldi	r22, 0x02	; 2
 b2c:	85 e0       	ldi	r24, 0x05	; 5
 b2e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xQueueGenericCreate>
 b32:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 b36:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	// Create a queue set
	xQueueSet = xQueueCreateSet(QUEUE_LENGTH * 2);
 b3a:	8a e0       	ldi	r24, 0x0A	; 10
 b3c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xQueueCreateSet>
 b40:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <xQueueSet+0x1>
 b44:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <xQueueSet>
	
	// Add the queues to the queue set
	xQueueAddToSet(xQueue1, xQueueSet);
 b48:	bc 01       	movw	r22, r24
 b4a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xQueue1>
 b4e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <xQueue1+0x1>
 b52:	0e 94 ae 0c 	call	0x195c	; 0x195c <xQueueAddToSet>
	xQueueAddToSet(xQueue2, xQueueSet);
 b56:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <xQueueSet>
 b5a:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <xQueueSet+0x1>
 b5e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 b62:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 b66:	0e 94 ae 0c 	call	0x195c	; 0x195c <xQueueAddToSet>
	
	if (xQueue1 != NULL && xQueue2 != NULL && xQueueSet != NULL) {
 b6a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xQueue1>
 b6e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <xQueue1+0x1>
 b72:	89 2b       	or	r24, r25
 b74:	91 f1       	breq	.+100    	; 0xbda <main+0xd2>
 b76:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 b7a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 b7e:	89 2b       	or	r24, r25
 b80:	61 f1       	breq	.+88     	; 0xbda <main+0xd2>
 b82:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <xQueueSet>
 b86:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <xQueueSet+0x1>
 b8a:	89 2b       	or	r24, r25
 b8c:	31 f1       	breq	.+76     	; 0xbda <main+0xd2>
		// Create Sender tasks
		xTaskCreate(SenderTask1, "Sender1", 120, NULL, tskIDLE_PRIORITY + 1, NULL);
 b8e:	c1 2c       	mov	r12, r1
 b90:	d1 2c       	mov	r13, r1
 b92:	ee 24       	eor	r14, r14
 b94:	e3 94       	inc	r14
 b96:	00 e0       	ldi	r16, 0x00	; 0
 b98:	10 e0       	ldi	r17, 0x00	; 0
 b9a:	28 e7       	ldi	r18, 0x78	; 120
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	44 eb       	ldi	r20, 0xB4	; 180
 ba0:	50 e0       	ldi	r21, 0x00	; 0
 ba2:	60 e0       	ldi	r22, 0x00	; 0
 ba4:	8a e9       	ldi	r24, 0x9A	; 154
 ba6:	9b e0       	ldi	r25, 0x0B	; 11
 ba8:	0e 94 f5 05 	call	0xbea	; 0xbea <xTaskCreate>
		xTaskCreate(SenderTask2, "Sender2", 120, NULL, tskIDLE_PRIORITY + 1, NULL);
 bac:	28 e7       	ldi	r18, 0x78	; 120
 bae:	30 e0       	ldi	r19, 0x00	; 0
 bb0:	4c eb       	ldi	r20, 0xBC	; 188
 bb2:	50 e0       	ldi	r21, 0x00	; 0
 bb4:	60 e0       	ldi	r22, 0x00	; 0
 bb6:	8f eb       	ldi	r24, 0xBF	; 191
 bb8:	9b e0       	ldi	r25, 0x0B	; 11
 bba:	0e 94 f5 05 	call	0xbea	; 0xbea <xTaskCreate>
		
		// Create the Receiver task
		xTaskCreate(ReceiverTask, "Receiver", 120, NULL, tskIDLE_PRIORITY + 2, NULL);
 bbe:	68 94       	set
 bc0:	ee 24       	eor	r14, r14
 bc2:	e1 f8       	bld	r14, 1
 bc4:	28 e7       	ldi	r18, 0x78	; 120
 bc6:	30 e0       	ldi	r19, 0x00	; 0
 bc8:	44 ec       	ldi	r20, 0xC4	; 196
 bca:	50 e0       	ldi	r21, 0x00	; 0
 bcc:	60 e0       	ldi	r22, 0x00	; 0
 bce:	8a e8       	ldi	r24, 0x8A	; 138
 bd0:	9a e0       	ldi	r25, 0x0A	; 10
 bd2:	0e 94 f5 05 	call	0xbea	; 0xbea <xTaskCreate>
		
		// Start the FreeRTOS scheduler
		vTaskStartScheduler();
 bd6:	0e 94 1e 0b 	call	0x163c	; 0x163c <vTaskStartScheduler>
	}
	
	// The scheduler should never return, but in case it does, return 1
	return 1;
}
 bda:	81 e0       	ldi	r24, 0x01	; 1
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	1f 91       	pop	r17
 be0:	0f 91       	pop	r16
 be2:	ef 90       	pop	r14
 be4:	df 90       	pop	r13
 be6:	cf 90       	pop	r12
 be8:	08 95       	ret

Disassembly of section .text.prvSetupTimerInterrupt:

00001a96 <prvSetupTimerInterrupt>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
    1a96:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
    1a98:	89 ef       	ldi	r24, 0xF9	; 249
    1a9a:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    1a9c:	8b e0       	ldi	r24, 0x0B	; 11
    1a9e:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    1aa0:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1aa2:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
    1aa4:	89 bf       	out	0x39, r24	; 57
    1aa6:	08 95       	ret

Disassembly of section .text.pxPortInitialiseStack:

00000cc8 <pxPortInitialiseStack>:
	{
		vTaskSwitchContext();
	}
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
 cc8:	31 e1       	ldi	r19, 0x11	; 17
 cca:	fc 01       	movw	r30, r24
 ccc:	30 83       	st	Z, r19
 cce:	31 97       	sbiw	r30, 0x01	; 1
 cd0:	22 e2       	ldi	r18, 0x22	; 34
 cd2:	20 83       	st	Z, r18
 cd4:	31 97       	sbiw	r30, 0x01	; 1
 cd6:	a3 e3       	ldi	r26, 0x33	; 51
 cd8:	a0 83       	st	Z, r26
 cda:	31 97       	sbiw	r30, 0x01	; 1
 cdc:	60 83       	st	Z, r22
 cde:	31 97       	sbiw	r30, 0x01	; 1
 ce0:	70 83       	st	Z, r23
 ce2:	31 97       	sbiw	r30, 0x01	; 1
 ce4:	10 82       	st	Z, r1
 ce6:	31 97       	sbiw	r30, 0x01	; 1
 ce8:	60 e8       	ldi	r22, 0x80	; 128
 cea:	60 83       	st	Z, r22
 cec:	31 97       	sbiw	r30, 0x01	; 1
 cee:	10 82       	st	Z, r1
 cf0:	31 97       	sbiw	r30, 0x01	; 1
 cf2:	62 e0       	ldi	r22, 0x02	; 2
 cf4:	60 83       	st	Z, r22
 cf6:	31 97       	sbiw	r30, 0x01	; 1
 cf8:	63 e0       	ldi	r22, 0x03	; 3
 cfa:	60 83       	st	Z, r22
 cfc:	31 97       	sbiw	r30, 0x01	; 1
 cfe:	64 e0       	ldi	r22, 0x04	; 4
 d00:	60 83       	st	Z, r22
 d02:	31 97       	sbiw	r30, 0x01	; 1
 d04:	65 e0       	ldi	r22, 0x05	; 5
 d06:	60 83       	st	Z, r22
 d08:	31 97       	sbiw	r30, 0x01	; 1
 d0a:	66 e0       	ldi	r22, 0x06	; 6
 d0c:	60 83       	st	Z, r22
 d0e:	31 97       	sbiw	r30, 0x01	; 1
 d10:	67 e0       	ldi	r22, 0x07	; 7
 d12:	60 83       	st	Z, r22
 d14:	31 97       	sbiw	r30, 0x01	; 1
 d16:	68 e0       	ldi	r22, 0x08	; 8
 d18:	60 83       	st	Z, r22
 d1a:	31 97       	sbiw	r30, 0x01	; 1
 d1c:	69 e0       	ldi	r22, 0x09	; 9
 d1e:	60 83       	st	Z, r22
 d20:	31 97       	sbiw	r30, 0x01	; 1
 d22:	60 e1       	ldi	r22, 0x10	; 16
 d24:	60 83       	st	Z, r22
 d26:	31 97       	sbiw	r30, 0x01	; 1
 d28:	30 83       	st	Z, r19
 d2a:	31 97       	sbiw	r30, 0x01	; 1
 d2c:	32 e1       	ldi	r19, 0x12	; 18
 d2e:	30 83       	st	Z, r19
 d30:	31 97       	sbiw	r30, 0x01	; 1
 d32:	33 e1       	ldi	r19, 0x13	; 19
 d34:	30 83       	st	Z, r19
 d36:	31 97       	sbiw	r30, 0x01	; 1
 d38:	34 e1       	ldi	r19, 0x14	; 20
 d3a:	30 83       	st	Z, r19
 d3c:	31 97       	sbiw	r30, 0x01	; 1
 d3e:	35 e1       	ldi	r19, 0x15	; 21
 d40:	30 83       	st	Z, r19
 d42:	31 97       	sbiw	r30, 0x01	; 1
 d44:	36 e1       	ldi	r19, 0x16	; 22
 d46:	30 83       	st	Z, r19
 d48:	31 97       	sbiw	r30, 0x01	; 1
 d4a:	37 e1       	ldi	r19, 0x17	; 23
 d4c:	30 83       	st	Z, r19
 d4e:	31 97       	sbiw	r30, 0x01	; 1
 d50:	38 e1       	ldi	r19, 0x18	; 24
 d52:	30 83       	st	Z, r19
 d54:	31 97       	sbiw	r30, 0x01	; 1
 d56:	39 e1       	ldi	r19, 0x19	; 25
 d58:	30 83       	st	Z, r19
 d5a:	31 97       	sbiw	r30, 0x01	; 1
 d5c:	30 e2       	ldi	r19, 0x20	; 32
 d5e:	30 83       	st	Z, r19
 d60:	31 97       	sbiw	r30, 0x01	; 1
 d62:	31 e2       	ldi	r19, 0x21	; 33
 d64:	30 83       	st	Z, r19
 d66:	31 97       	sbiw	r30, 0x01	; 1
 d68:	20 83       	st	Z, r18
 d6a:	31 97       	sbiw	r30, 0x01	; 1
 d6c:	23 e2       	ldi	r18, 0x23	; 35
 d6e:	20 83       	st	Z, r18
 d70:	31 97       	sbiw	r30, 0x01	; 1
 d72:	40 83       	st	Z, r20
 d74:	31 97       	sbiw	r30, 0x01	; 1
 d76:	50 83       	st	Z, r21
 d78:	31 97       	sbiw	r30, 0x01	; 1
 d7a:	26 e2       	ldi	r18, 0x26	; 38
 d7c:	20 83       	st	Z, r18
 d7e:	31 97       	sbiw	r30, 0x01	; 1
 d80:	27 e2       	ldi	r18, 0x27	; 39
 d82:	20 83       	st	Z, r18
 d84:	31 97       	sbiw	r30, 0x01	; 1
 d86:	28 e2       	ldi	r18, 0x28	; 40
 d88:	20 83       	st	Z, r18
 d8a:	31 97       	sbiw	r30, 0x01	; 1
 d8c:	29 e2       	ldi	r18, 0x29	; 41
 d8e:	20 83       	st	Z, r18
 d90:	31 97       	sbiw	r30, 0x01	; 1
 d92:	20 e3       	ldi	r18, 0x30	; 48
 d94:	20 83       	st	Z, r18
 d96:	31 97       	sbiw	r30, 0x01	; 1
 d98:	21 e3       	ldi	r18, 0x31	; 49
 d9a:	20 83       	st	Z, r18
 d9c:	86 97       	sbiw	r24, 0x26	; 38
 d9e:	08 95       	ret

Disassembly of section .text.xPortStartScheduler:

000015de <xPortStartScheduler>:
    15de:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <prvSetupTimerInterrupt>
    15e2:	a0 91 a3 06 	lds	r26, 0x06A3	; 0x8006a3 <pxCurrentTCB>
    15e6:	b0 91 a4 06 	lds	r27, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
    15ea:	cd 91       	ld	r28, X+
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	dd 91       	ld	r29, X+
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	ff 91       	pop	r31
    15f4:	ef 91       	pop	r30
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	bf 91       	pop	r27
    15fc:	af 91       	pop	r26
    15fe:	9f 91       	pop	r25
    1600:	8f 91       	pop	r24
    1602:	7f 91       	pop	r23
    1604:	6f 91       	pop	r22
    1606:	5f 91       	pop	r21
    1608:	4f 91       	pop	r20
    160a:	3f 91       	pop	r19
    160c:	2f 91       	pop	r18
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
    161a:	bf 90       	pop	r11
    161c:	af 90       	pop	r10
    161e:	9f 90       	pop	r9
    1620:	8f 90       	pop	r8
    1622:	7f 90       	pop	r7
    1624:	6f 90       	pop	r6
    1626:	5f 90       	pop	r5
    1628:	4f 90       	pop	r4
    162a:	3f 90       	pop	r3
    162c:	2f 90       	pop	r2
    162e:	1f 90       	pop	r1
    1630:	0f 90       	pop	r0
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	0f 90       	pop	r0
    1636:	08 95       	ret
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	08 95       	ret

Disassembly of section .text.vPortYield:

00000e5a <vPortYield>:
 e5a:	0f 92       	push	r0
 e5c:	0f b6       	in	r0, 0x3f	; 63
 e5e:	f8 94       	cli
 e60:	0f 92       	push	r0
 e62:	1f 92       	push	r1
 e64:	11 24       	eor	r1, r1
 e66:	2f 92       	push	r2
 e68:	3f 92       	push	r3
 e6a:	4f 92       	push	r4
 e6c:	5f 92       	push	r5
 e6e:	6f 92       	push	r6
 e70:	7f 92       	push	r7
 e72:	8f 92       	push	r8
 e74:	9f 92       	push	r9
 e76:	af 92       	push	r10
 e78:	bf 92       	push	r11
 e7a:	cf 92       	push	r12
 e7c:	df 92       	push	r13
 e7e:	ef 92       	push	r14
 e80:	ff 92       	push	r15
 e82:	0f 93       	push	r16
 e84:	1f 93       	push	r17
 e86:	2f 93       	push	r18
 e88:	3f 93       	push	r19
 e8a:	4f 93       	push	r20
 e8c:	5f 93       	push	r21
 e8e:	6f 93       	push	r22
 e90:	7f 93       	push	r23
 e92:	8f 93       	push	r24
 e94:	9f 93       	push	r25
 e96:	af 93       	push	r26
 e98:	bf 93       	push	r27
 e9a:	cf 93       	push	r28
 e9c:	df 93       	push	r29
 e9e:	ef 93       	push	r30
 ea0:	ff 93       	push	r31
 ea2:	a0 91 a3 06 	lds	r26, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 ea6:	b0 91 a4 06 	lds	r27, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 eaa:	0d b6       	in	r0, 0x3d	; 61
 eac:	0d 92       	st	X+, r0
 eae:	0e b6       	in	r0, 0x3e	; 62
 eb0:	0d 92       	st	X+, r0
 eb2:	0e 94 86 07 	call	0xf0c	; 0xf0c <vTaskSwitchContext>
 eb6:	a0 91 a3 06 	lds	r26, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 eba:	b0 91 a4 06 	lds	r27, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 ebe:	cd 91       	ld	r28, X+
 ec0:	cd bf       	out	0x3d, r28	; 61
 ec2:	dd 91       	ld	r29, X+
 ec4:	de bf       	out	0x3e, r29	; 62
 ec6:	ff 91       	pop	r31
 ec8:	ef 91       	pop	r30
 eca:	df 91       	pop	r29
 ecc:	cf 91       	pop	r28
 ece:	bf 91       	pop	r27
 ed0:	af 91       	pop	r26
 ed2:	9f 91       	pop	r25
 ed4:	8f 91       	pop	r24
 ed6:	7f 91       	pop	r23
 ed8:	6f 91       	pop	r22
 eda:	5f 91       	pop	r21
 edc:	4f 91       	pop	r20
 ede:	3f 91       	pop	r19
 ee0:	2f 91       	pop	r18
 ee2:	1f 91       	pop	r17
 ee4:	0f 91       	pop	r16
 ee6:	ff 90       	pop	r15
 ee8:	ef 90       	pop	r14
 eea:	df 90       	pop	r13
 eec:	cf 90       	pop	r12
 eee:	bf 90       	pop	r11
 ef0:	af 90       	pop	r10
 ef2:	9f 90       	pop	r9
 ef4:	8f 90       	pop	r8
 ef6:	7f 90       	pop	r7
 ef8:	6f 90       	pop	r6
 efa:	5f 90       	pop	r5
 efc:	4f 90       	pop	r4
 efe:	3f 90       	pop	r3
 f00:	2f 90       	pop	r2
 f02:	1f 90       	pop	r1
 f04:	0f 90       	pop	r0
 f06:	0f be       	out	0x3f, r0	; 63
 f08:	0f 90       	pop	r0
 f0a:	08 95       	ret

Disassembly of section .text.__vector_7:

000017c8 <__vector_7>:
	 * tick count.  We don't need to switch context, this can only be done by
	 * manual calls to taskYIELD();
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal ) );
	void TIMER1_COMPA_vect( void )
	{
    17c8:	1f 92       	push	r1
    17ca:	0f 92       	push	r0
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	0f 92       	push	r0
    17d0:	11 24       	eor	r1, r1
    17d2:	2f 93       	push	r18
    17d4:	3f 93       	push	r19
    17d6:	4f 93       	push	r20
    17d8:	5f 93       	push	r21
    17da:	6f 93       	push	r22
    17dc:	7f 93       	push	r23
    17de:	8f 93       	push	r24
    17e0:	9f 93       	push	r25
    17e2:	af 93       	push	r26
    17e4:	bf 93       	push	r27
    17e6:	ef 93       	push	r30
    17e8:	ff 93       	push	r31
		xTaskIncrementTick();
    17ea:	0e 94 6a 00 	call	0xd4	; 0xd4 <xTaskIncrementTick>
	}
    17ee:	ff 91       	pop	r31
    17f0:	ef 91       	pop	r30
    17f2:	bf 91       	pop	r27
    17f4:	af 91       	pop	r26
    17f6:	9f 91       	pop	r25
    17f8:	8f 91       	pop	r24
    17fa:	7f 91       	pop	r23
    17fc:	6f 91       	pop	r22
    17fe:	5f 91       	pop	r21
    1800:	4f 91       	pop	r20
    1802:	3f 91       	pop	r19
    1804:	2f 91       	pop	r18
    1806:	0f 90       	pop	r0
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	0f 90       	pop	r0
    180c:	1f 90       	pop	r1
    180e:	18 95       	reti

Disassembly of section .text.prvIsQueueEmpty:

000019d6 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	0f 92       	push	r0
    19dc:	a8 2f       	mov	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	4a 96       	adiw	r24, 0x1a	; 26
    19e2:	a1 1d       	adc	r26, r1
    19e4:	fc 01       	movw	r30, r24
    19e6:	84 91       	lpm	r24, Z
    19e8:	a7 fd       	sbrc	r26, 7
    19ea:	80 81       	ld	r24, Z
    19ec:	81 11       	cpse	r24, r1
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <prvIsQueueEmpty+0x1e>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <prvIsQueueEmpty+0x20>
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	0f 90       	pop	r0
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	08 95       	ret

Disassembly of section .text.prvIsQueueFull:

00001852 <prvIsQueueFull>:
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	0f 92       	push	r0
    1858:	9b 01       	movw	r18, r22
    185a:	48 2f       	mov	r20, r24
    185c:	26 5e       	subi	r18, 0xE6	; 230
    185e:	3f 4f       	sbci	r19, 0xFF	; 255
    1860:	4f 4f       	sbci	r20, 0xFF	; 255
    1862:	f9 01       	movw	r30, r18
    1864:	24 91       	lpm	r18, Z
    1866:	47 fd       	sbrc	r20, 7
    1868:	20 81       	ld	r18, Z
    186a:	a8 2f       	mov	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	4b 96       	adiw	r24, 0x1b	; 27
    1870:	a1 1d       	adc	r26, r1
    1872:	fc 01       	movw	r30, r24
    1874:	84 91       	lpm	r24, Z
    1876:	a7 fd       	sbrc	r26, 7
    1878:	80 81       	ld	r24, Z
    187a:	28 13       	cpse	r18, r24
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <prvIsQueueFull+0x30>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <prvIsQueueFull+0x32>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	08 95       	ret

Disassembly of section .text.prvCopyDataToQueue:

0000104c <prvCopyDataToQueue>:
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	ec 01       	movw	r28, r24
    1056:	02 2f       	mov	r16, r18
    1058:	1a 8d       	ldd	r17, Y+26	; 0x1a
    105a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    105c:	22 23       	and	r18, r18
    105e:	b9 f1       	breq	.+110    	; 0x10ce <prvCopyDataToQueue+0x82>
    1060:	01 11       	cpse	r16, r1
    1062:	16 c0       	rjmp	.+44     	; 0x1090 <prvCopyDataToQueue+0x44>
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	0e 94 95 0c 	call	0x192a	; 0x192a <memcpy>
    106e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	9b 81       	ldd	r25, Y+3	; 0x03
    1074:	82 0f       	add	r24, r18
    1076:	91 1d       	adc	r25, r1
    1078:	9b 83       	std	Y+3, r25	; 0x03
    107a:	8a 83       	std	Y+2, r24	; 0x02
    107c:	2c 81       	ldd	r18, Y+4	; 0x04
    107e:	3d 81       	ldd	r19, Y+5	; 0x05
    1080:	82 17       	cp	r24, r18
    1082:	93 07       	cpc	r25, r19
    1084:	20 f1       	brcs	.+72     	; 0x10ce <prvCopyDataToQueue+0x82>
    1086:	88 81       	ld	r24, Y
    1088:	99 81       	ldd	r25, Y+1	; 0x01
    108a:	9b 83       	std	Y+3, r25	; 0x03
    108c:	8a 83       	std	Y+2, r24	; 0x02
    108e:	1f c0       	rjmp	.+62     	; 0x10ce <prvCopyDataToQueue+0x82>
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	8e 81       	ldd	r24, Y+6	; 0x06
    1094:	9f 81       	ldd	r25, Y+7	; 0x07
    1096:	0e 94 95 0c 	call	0x192a	; 0x192a <memcpy>
    109a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	91 95       	neg	r25
    10a0:	81 95       	neg	r24
    10a2:	91 09       	sbc	r25, r1
    10a4:	2e 81       	ldd	r18, Y+6	; 0x06
    10a6:	3f 81       	ldd	r19, Y+7	; 0x07
    10a8:	28 0f       	add	r18, r24
    10aa:	39 1f       	adc	r19, r25
    10ac:	3f 83       	std	Y+7, r19	; 0x07
    10ae:	2e 83       	std	Y+6, r18	; 0x06
    10b0:	48 81       	ld	r20, Y
    10b2:	59 81       	ldd	r21, Y+1	; 0x01
    10b4:	24 17       	cp	r18, r20
    10b6:	35 07       	cpc	r19, r21
    10b8:	30 f4       	brcc	.+12     	; 0x10c6 <prvCopyDataToQueue+0x7a>
    10ba:	2c 81       	ldd	r18, Y+4	; 0x04
    10bc:	3d 81       	ldd	r19, Y+5	; 0x05
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	9f 83       	std	Y+7, r25	; 0x07
    10c4:	8e 83       	std	Y+6, r24	; 0x06
    10c6:	02 30       	cpi	r16, 0x02	; 2
    10c8:	11 f4       	brne	.+4      	; 0x10ce <prvCopyDataToQueue+0x82>
    10ca:	11 11       	cpse	r17, r1
    10cc:	11 50       	subi	r17, 0x01	; 1
    10ce:	1f 5f       	subi	r17, 0xFF	; 255
    10d0:	1a 8f       	std	Y+26, r17	; 0x1a
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	08 95       	ret

Disassembly of section .text.prvCopyDataFromQueue:

000018c2 <prvCopyDataFromQueue>:
    18c2:	fc 01       	movw	r30, r24
    18c4:	24 8d       	ldd	r18, Z+28	; 0x1c
    18c6:	22 23       	and	r18, r18
    18c8:	b1 f0       	breq	.+44     	; 0x18f6 <prvCopyDataFromQueue+0x34>
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	46 81       	ldd	r20, Z+6	; 0x06
    18ce:	57 81       	ldd	r21, Z+7	; 0x07
    18d0:	42 0f       	add	r20, r18
    18d2:	53 1f       	adc	r21, r19
    18d4:	57 83       	std	Z+7, r21	; 0x07
    18d6:	46 83       	std	Z+6, r20	; 0x06
    18d8:	84 81       	ldd	r24, Z+4	; 0x04
    18da:	95 81       	ldd	r25, Z+5	; 0x05
    18dc:	48 17       	cp	r20, r24
    18de:	59 07       	cpc	r21, r25
    18e0:	20 f0       	brcs	.+8      	; 0x18ea <prvCopyDataFromQueue+0x28>
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	97 83       	std	Z+7, r25	; 0x07
    18e8:	86 83       	std	Z+6, r24	; 0x06
    18ea:	cb 01       	movw	r24, r22
    18ec:	46 81       	ldd	r20, Z+6	; 0x06
    18ee:	57 81       	ldd	r21, Z+7	; 0x07
    18f0:	60 e8       	ldi	r22, 0x80	; 128
    18f2:	0e 94 95 0c 	call	0x192a	; 0x192a <memcpy>
    18f6:	08 95       	ret

Disassembly of section .text.prvNotifyQueueSetContainer:

00000fb4 <prvNotifyQueueSetContainer>:
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <prvNotifyQueueSetContainer+0xe>
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	69 83       	std	Y+1, r22	; 0x01
     fca:	7a 83       	std	Y+2, r23	; 0x02
     fcc:	8b 83       	std	Y+3, r24	; 0x03
     fce:	a8 2f       	mov	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	4f 96       	adiw	r24, 0x1f	; 31
     fd4:	a1 1d       	adc	r26, r1
     fd6:	fc 01       	movw	r30, r24
     fd8:	5a 2f       	mov	r21, r26
     fda:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__xload_2>
     fde:	fb 01       	movw	r30, r22
     fe0:	92 8d       	ldd	r25, Z+26	; 0x1a
     fe2:	83 8d       	ldd	r24, Z+27	; 0x1b
     fe4:	98 17       	cp	r25, r24
     fe6:	18 f5       	brcc	.+70     	; 0x102e <prvNotifyQueueSetContainer+0x7a>
     fe8:	8b 01       	movw	r16, r22
     fea:	e6 8c       	ldd	r14, Z+30	; 0x1e
     fec:	ae 01       	movw	r20, r28
     fee:	4f 5f       	subi	r20, 0xFF	; 255
     ff0:	5f 4f       	sbci	r21, 0xFF	; 255
     ff2:	60 e8       	ldi	r22, 0x80	; 128
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	cf 01       	movw	r24, r30
     ff8:	0e 94 26 08 	call	0x104c	; 0x104c <prvCopyDataToQueue>
     ffc:	f8 2e       	mov	r15, r24
     ffe:	ff ef       	ldi	r31, 0xFF	; 255
    1000:	ef 12       	cpse	r14, r31
    1002:	0d c0       	rjmp	.+26     	; 0x101e <prvNotifyQueueSetContainer+0x6a>
    1004:	f8 01       	movw	r30, r16
    1006:	81 89       	ldd	r24, Z+17	; 0x11
    1008:	88 23       	and	r24, r24
    100a:	a9 f0       	breq	.+42     	; 0x1036 <prvNotifyQueueSetContainer+0x82>
    100c:	b8 01       	movw	r22, r16
    100e:	6f 5e       	subi	r22, 0xEF	; 239
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	80 e8       	ldi	r24, 0x80	; 128
    1014:	0e 94 26 02 	call	0x44c	; 0x44c <xTaskRemoveFromEventList>
    1018:	81 11       	cpse	r24, r1
    101a:	0b c0       	rjmp	.+22     	; 0x1032 <prvNotifyQueueSetContainer+0x7e>
    101c:	0c c0       	rjmp	.+24     	; 0x1036 <prvNotifyQueueSetContainer+0x82>
    101e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <uxTaskGetNumberOfTasks>
    1022:	e8 16       	cp	r14, r24
    1024:	40 f4       	brcc	.+16     	; 0x1036 <prvNotifyQueueSetContainer+0x82>
    1026:	e3 94       	inc	r14
    1028:	f8 01       	movw	r30, r16
    102a:	e6 8e       	std	Z+30, r14	; 0x1e
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <prvNotifyQueueSetContainer+0x82>
    102e:	f1 2c       	mov	r15, r1
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <prvNotifyQueueSetContainer+0x82>
    1032:	ff 24       	eor	r15, r15
    1034:	f3 94       	inc	r15
    1036:	8f 2d       	mov	r24, r15
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	08 95       	ret

Disassembly of section .text.prvUnlockQueue:

000010de <prvUnlockQueue>:
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	ec 01       	movw	r28, r24
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	0f 92       	push	r0
    10ec:	1e 8d       	ldd	r17, Y+30	; 0x1e
    10ee:	1a c0       	rjmp	.+52     	; 0x1124 <prvUnlockQueue+0x46>
    10f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10f2:	98 a1       	ldd	r25, Y+32	; 0x20
    10f4:	89 2b       	or	r24, r25
    10f6:	49 f0       	breq	.+18     	; 0x110a <prvUnlockQueue+0x2c>
    10f8:	be 01       	movw	r22, r28
    10fa:	80 e8       	ldi	r24, 0x80	; 128
    10fc:	0e 94 da 07 	call	0xfb4	; 0xfb4 <prvNotifyQueueSetContainer>
    1100:	88 23       	and	r24, r24
    1102:	79 f0       	breq	.+30     	; 0x1122 <prvUnlockQueue+0x44>
    1104:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <vTaskMissedYield>
    1108:	0c c0       	rjmp	.+24     	; 0x1122 <prvUnlockQueue+0x44>
    110a:	89 89       	ldd	r24, Y+17	; 0x11
    110c:	88 23       	and	r24, r24
    110e:	61 f0       	breq	.+24     	; 0x1128 <prvUnlockQueue+0x4a>
    1110:	be 01       	movw	r22, r28
    1112:	6f 5e       	subi	r22, 0xEF	; 239
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	80 e8       	ldi	r24, 0x80	; 128
    1118:	0e 94 26 02 	call	0x44c	; 0x44c <xTaskRemoveFromEventList>
    111c:	81 11       	cpse	r24, r1
    111e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <vTaskMissedYield>
    1122:	11 50       	subi	r17, 0x01	; 1
    1124:	11 16       	cp	r1, r17
    1126:	24 f3       	brlt	.-56     	; 0x10f0 <prvUnlockQueue+0x12>
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	8e 8f       	std	Y+30, r24	; 0x1e
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	0f 92       	push	r0
    1136:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <prvUnlockQueue+0x76>
    113a:	88 85       	ldd	r24, Y+8	; 0x08
    113c:	88 23       	and	r24, r24
    113e:	61 f0       	breq	.+24     	; 0x1158 <prvUnlockQueue+0x7a>
    1140:	be 01       	movw	r22, r28
    1142:	68 5f       	subi	r22, 0xF8	; 248
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	80 e8       	ldi	r24, 0x80	; 128
    1148:	0e 94 26 02 	call	0x44c	; 0x44c <xTaskRemoveFromEventList>
    114c:	81 11       	cpse	r24, r1
    114e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <vTaskMissedYield>
    1152:	11 50       	subi	r17, 0x01	; 1
    1154:	11 16       	cp	r1, r17
    1156:	8c f3       	brlt	.-30     	; 0x113a <prvUnlockQueue+0x5c>
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	8d 8f       	std	Y+29, r24	; 0x1d
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	08 95       	ret

Disassembly of section .text.xQueueGenericReset:

00000da0 <xQueueGenericReset>:
 da0:	0f 93       	push	r16
 da2:	1f 93       	push	r17
 da4:	cf 93       	push	r28
 da6:	df 93       	push	r29
 da8:	fc 01       	movw	r30, r24
 daa:	36 2f       	mov	r19, r22
 dac:	89 2b       	or	r24, r25
 dae:	09 f4       	brne	.+2      	; 0xdb2 <xQueueGenericReset+0x12>
 db0:	4a c0       	rjmp	.+148    	; 0xe46 <xQueueGenericReset+0xa6>
 db2:	23 8d       	ldd	r18, Z+27	; 0x1b
 db4:	22 23       	and	r18, r18
 db6:	09 f4       	brne	.+2      	; 0xdba <xQueueGenericReset+0x1a>
 db8:	48 c0       	rjmp	.+144    	; 0xe4a <xQueueGenericReset+0xaa>
 dba:	02 2f       	mov	r16, r18
 dbc:	10 e0       	ldi	r17, 0x00	; 0
 dbe:	8f ef       	ldi	r24, 0xFF	; 255
 dc0:	9f ef       	ldi	r25, 0xFF	; 255
 dc2:	b8 01       	movw	r22, r16
 dc4:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__udivmodhi4>
 dc8:	44 8d       	ldd	r20, Z+28	; 0x1c
 dca:	84 2f       	mov	r24, r20
 dcc:	90 e0       	ldi	r25, 0x00	; 0
 dce:	68 17       	cp	r22, r24
 dd0:	79 07       	cpc	r23, r25
 dd2:	08 f4       	brcc	.+2      	; 0xdd6 <xQueueGenericReset+0x36>
 dd4:	3c c0       	rjmp	.+120    	; 0xe4e <xQueueGenericReset+0xae>
 dd6:	ef 01       	movw	r28, r30
 dd8:	0f b6       	in	r0, 0x3f	; 63
 dda:	f8 94       	cli
 ddc:	0f 92       	push	r0
 dde:	60 81       	ld	r22, Z
 de0:	71 81       	ldd	r23, Z+1	; 0x01
 de2:	fb 01       	movw	r30, r22
 de4:	24 9f       	mul	r18, r20
 de6:	e0 0d       	add	r30, r0
 de8:	f1 1d       	adc	r31, r1
 dea:	11 24       	eor	r1, r1
 dec:	fd 83       	std	Y+5, r31	; 0x05
 dee:	ec 83       	std	Y+4, r30	; 0x04
 df0:	1a 8e       	std	Y+26, r1	; 0x1a
 df2:	7b 83       	std	Y+3, r23	; 0x03
 df4:	6a 83       	std	Y+2, r22	; 0x02
 df6:	01 50       	subi	r16, 0x01	; 1
 df8:	11 09       	sbc	r17, r1
 dfa:	80 9f       	mul	r24, r16
 dfc:	a0 01       	movw	r20, r0
 dfe:	81 9f       	mul	r24, r17
 e00:	50 0d       	add	r21, r0
 e02:	90 9f       	mul	r25, r16
 e04:	50 0d       	add	r21, r0
 e06:	11 24       	eor	r1, r1
 e08:	cb 01       	movw	r24, r22
 e0a:	84 0f       	add	r24, r20
 e0c:	95 1f       	adc	r25, r21
 e0e:	9f 83       	std	Y+7, r25	; 0x07
 e10:	8e 83       	std	Y+6, r24	; 0x06
 e12:	8f ef       	ldi	r24, 0xFF	; 255
 e14:	8d 8f       	std	Y+29, r24	; 0x1d
 e16:	8e 8f       	std	Y+30, r24	; 0x1e
 e18:	31 11       	cpse	r19, r1
 e1a:	09 c0       	rjmp	.+18     	; 0xe2e <xQueueGenericReset+0x8e>
 e1c:	88 85       	ldd	r24, Y+8	; 0x08
 e1e:	88 23       	and	r24, r24
 e20:	71 f0       	breq	.+28     	; 0xe3e <xQueueGenericReset+0x9e>
 e22:	28 96       	adiw	r28, 0x08	; 8
 e24:	be 01       	movw	r22, r28
 e26:	80 e8       	ldi	r24, 0x80	; 128
 e28:	0e 94 26 02 	call	0x44c	; 0x44c <xTaskRemoveFromEventList>
 e2c:	08 c0       	rjmp	.+16     	; 0xe3e <xQueueGenericReset+0x9e>
 e2e:	ce 01       	movw	r24, r28
 e30:	08 96       	adiw	r24, 0x08	; 8
 e32:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <vListInitialise>
 e36:	ce 01       	movw	r24, r28
 e38:	41 96       	adiw	r24, 0x11	; 17
 e3a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <vListInitialise>
 e3e:	0f 90       	pop	r0
 e40:	0f be       	out	0x3f, r0	; 63
 e42:	81 e0       	ldi	r24, 0x01	; 1
 e44:	05 c0       	rjmp	.+10     	; 0xe50 <xQueueGenericReset+0xb0>
 e46:	80 e0       	ldi	r24, 0x00	; 0
 e48:	03 c0       	rjmp	.+6      	; 0xe50 <xQueueGenericReset+0xb0>
 e4a:	80 e0       	ldi	r24, 0x00	; 0
 e4c:	01 c0       	rjmp	.+2      	; 0xe50 <xQueueGenericReset+0xb0>
 e4e:	80 e0       	ldi	r24, 0x00	; 0
 e50:	df 91       	pop	r29
 e52:	cf 91       	pop	r28
 e54:	1f 91       	pop	r17
 e56:	0f 91       	pop	r16
 e58:	08 95       	ret

Disassembly of section .text.prvInitialiseNewQueue:

000018f8 <prvInitialiseNewQueue>:
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	e8 01       	movw	r28, r16
    1902:	61 11       	cpse	r22, r1
    1904:	03 c0       	rjmp	.+6      	; 0x190c <prvInitialiseNewQueue+0x14>
    1906:	19 83       	std	Y+1, r17	; 0x01
    1908:	08 83       	st	Y, r16
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <prvInitialiseNewQueue+0x18>
    190c:	59 83       	std	Y+1, r21	; 0x01
    190e:	48 83       	st	Y, r20
    1910:	8b 8f       	std	Y+27, r24	; 0x1b
    1912:	6c 8f       	std	Y+28, r22	; 0x1c
    1914:	61 e0       	ldi	r22, 0x01	; 1
    1916:	ce 01       	movw	r24, r28
    1918:	0e 94 d0 06 	call	0xda0	; 0xda0 <xQueueGenericReset>
    191c:	18 a2       	std	Y+32, r1	; 0x20
    191e:	1f 8e       	std	Y+31, r1	; 0x1f
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	08 95       	ret

Disassembly of section .text.xQueueGenericCreate:

000011ec <xQueueGenericCreate>:
    11ec:	df 92       	push	r13
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	38 2f       	mov	r19, r24
    11fc:	e6 2f       	mov	r30, r22
    11fe:	88 23       	and	r24, r24
    1200:	29 f1       	breq	.+74     	; 0x124c <xQueueGenericCreate+0x60>
    1202:	68 2f       	mov	r22, r24
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	9f ef       	ldi	r25, 0xFF	; 255
    120a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__udivmodhi4>
    120e:	8e 2f       	mov	r24, r30
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	68 17       	cp	r22, r24
    1214:	79 07       	cpc	r23, r25
    1216:	e8 f0       	brcs	.+58     	; 0x1252 <xQueueGenericCreate+0x66>
    1218:	3e 9f       	mul	r19, r30
    121a:	c0 01       	movw	r24, r0
    121c:	11 24       	eor	r1, r1
    121e:	8f 3d       	cpi	r24, 0xDF	; 223
    1220:	2f ef       	ldi	r18, 0xFF	; 255
    1222:	92 07       	cpc	r25, r18
    1224:	c8 f4       	brcc	.+50     	; 0x1258 <xQueueGenericCreate+0x6c>
    1226:	d4 2e       	mov	r13, r20
    1228:	de 2f       	mov	r29, r30
    122a:	c3 2f       	mov	r28, r19
    122c:	81 96       	adiw	r24, 0x21	; 33
    122e:	0e 94 b1 09 	call	0x1362	; 0x1362 <pvPortMalloc>
    1232:	7c 01       	movw	r14, r24
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	91 f0       	breq	.+36     	; 0x125c <xQueueGenericCreate+0x70>
    1238:	8c 01       	movw	r16, r24
    123a:	2d 2d       	mov	r18, r13
    123c:	ac 01       	movw	r20, r24
    123e:	4f 5d       	subi	r20, 0xDF	; 223
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	6d 2f       	mov	r22, r29
    1244:	8c 2f       	mov	r24, r28
    1246:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <prvInitialiseNewQueue>
    124a:	08 c0       	rjmp	.+16     	; 0x125c <xQueueGenericCreate+0x70>
    124c:	e1 2c       	mov	r14, r1
    124e:	f1 2c       	mov	r15, r1
    1250:	05 c0       	rjmp	.+10     	; 0x125c <xQueueGenericCreate+0x70>
    1252:	e1 2c       	mov	r14, r1
    1254:	f1 2c       	mov	r15, r1
    1256:	02 c0       	rjmp	.+4      	; 0x125c <xQueueGenericCreate+0x70>
    1258:	e1 2c       	mov	r14, r1
    125a:	f1 2c       	mov	r15, r1
    125c:	c7 01       	movw	r24, r14
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	08 95       	ret

Disassembly of section .text.xQueueGenericSend:

000005d0 <xQueueGenericSend>:
 5d0:	6f 92       	push	r6
 5d2:	7f 92       	push	r7
 5d4:	8f 92       	push	r8
 5d6:	ef 92       	push	r14
 5d8:	ff 92       	push	r15
 5da:	0f 93       	push	r16
 5dc:	1f 93       	push	r17
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	00 d0       	rcall	.+0      	; 0x5e4 <xQueueGenericSend+0x14>
 5e4:	00 d0       	rcall	.+0      	; 0x5e6 <xQueueGenericSend+0x16>
 5e6:	0f 92       	push	r0
 5e8:	cd b7       	in	r28, 0x3d	; 61
 5ea:	de b7       	in	r29, 0x3e	; 62
 5ec:	7c 01       	movw	r14, r24
 5ee:	3a 01       	movw	r6, r20
 5f0:	86 2e       	mov	r8, r22
 5f2:	3d 83       	std	Y+5, r19	; 0x05
 5f4:	2c 83       	std	Y+4, r18	; 0x04
 5f6:	10 e0       	ldi	r17, 0x00	; 0
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	f8 94       	cli
 5fc:	0f 92       	push	r0
 5fe:	f7 01       	movw	r30, r14
 600:	92 8d       	ldd	r25, Z+26	; 0x1a
 602:	83 8d       	ldd	r24, Z+27	; 0x1b
 604:	98 17       	cp	r25, r24
 606:	10 f0       	brcs	.+4      	; 0x60c <xQueueGenericSend+0x3c>
 608:	02 30       	cpi	r16, 0x02	; 2
 60a:	29 f5       	brne	.+74     	; 0x656 <xQueueGenericSend+0x86>
 60c:	f7 01       	movw	r30, r14
 60e:	12 8d       	ldd	r17, Z+26	; 0x1a
 610:	20 2f       	mov	r18, r16
 612:	68 2d       	mov	r22, r8
 614:	a3 01       	movw	r20, r6
 616:	c7 01       	movw	r24, r14
 618:	0e 94 26 08 	call	0x104c	; 0x104c <prvCopyDataToQueue>
 61c:	f7 01       	movw	r30, r14
 61e:	87 8d       	ldd	r24, Z+31	; 0x1f
 620:	90 a1       	ldd	r25, Z+32	; 0x20
 622:	89 2b       	or	r24, r25
 624:	49 f0       	breq	.+18     	; 0x638 <xQueueGenericSend+0x68>
 626:	02 30       	cpi	r16, 0x02	; 2
 628:	11 f4       	brne	.+4      	; 0x62e <xQueueGenericSend+0x5e>
 62a:	11 11       	cpse	r17, r1
 62c:	10 c0       	rjmp	.+32     	; 0x64e <xQueueGenericSend+0x7e>
 62e:	b7 01       	movw	r22, r14
 630:	80 e8       	ldi	r24, 0x80	; 128
 632:	0e 94 da 07 	call	0xfb4	; 0xfb4 <prvNotifyQueueSetContainer>
 636:	0b c0       	rjmp	.+22     	; 0x64e <xQueueGenericSend+0x7e>
 638:	f7 01       	movw	r30, r14
 63a:	81 89       	ldd	r24, Z+17	; 0x11
 63c:	88 23       	and	r24, r24
 63e:	39 f0       	breq	.+14     	; 0x64e <xQueueGenericSend+0x7e>
 640:	f1 e1       	ldi	r31, 0x11	; 17
 642:	ef 0e       	add	r14, r31
 644:	f1 1c       	adc	r15, r1
 646:	b7 01       	movw	r22, r14
 648:	80 e8       	ldi	r24, 0x80	; 128
 64a:	0e 94 26 02 	call	0x44c	; 0x44c <xTaskRemoveFromEventList>
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	4d c0       	rjmp	.+154    	; 0x6f0 <xQueueGenericSend+0x120>
 656:	8c 81       	ldd	r24, Y+4	; 0x04
 658:	9d 81       	ldd	r25, Y+5	; 0x05
 65a:	89 2b       	or	r24, r25
 65c:	21 f4       	brne	.+8      	; 0x666 <xQueueGenericSend+0x96>
 65e:	0f 90       	pop	r0
 660:	0f be       	out	0x3f, r0	; 63
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	45 c0       	rjmp	.+138    	; 0x6f0 <xQueueGenericSend+0x120>
 666:	11 11       	cpse	r17, r1
 668:	05 c0       	rjmp	.+10     	; 0x674 <xQueueGenericSend+0xa4>
 66a:	ce 01       	movw	r24, r28
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <vTaskInternalSetTimeOutState>
 672:	11 e0       	ldi	r17, 0x01	; 1
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <vTaskSuspendAll>
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	f8 94       	cli
 680:	0f 92       	push	r0
 682:	f7 01       	movw	r30, r14
 684:	85 8d       	ldd	r24, Z+29	; 0x1d
 686:	8f 3f       	cpi	r24, 0xFF	; 255
 688:	09 f4       	brne	.+2      	; 0x68c <xQueueGenericSend+0xbc>
 68a:	15 8e       	std	Z+29, r1	; 0x1d
 68c:	f7 01       	movw	r30, r14
 68e:	86 8d       	ldd	r24, Z+30	; 0x1e
 690:	8f 3f       	cpi	r24, 0xFF	; 255
 692:	09 f4       	brne	.+2      	; 0x696 <xQueueGenericSend+0xc6>
 694:	16 8e       	std	Z+30, r1	; 0x1e
 696:	0f 90       	pop	r0
 698:	0f be       	out	0x3f, r0	; 63
 69a:	be 01       	movw	r22, r28
 69c:	6c 5f       	subi	r22, 0xFC	; 252
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	ce 01       	movw	r24, r28
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	0e 94 37 09 	call	0x126e	; 0x126e <xTaskCheckForTimeOut>
 6a8:	81 11       	cpse	r24, r1
 6aa:	1c c0       	rjmp	.+56     	; 0x6e4 <xQueueGenericSend+0x114>
 6ac:	b7 01       	movw	r22, r14
 6ae:	80 e8       	ldi	r24, 0x80	; 128
 6b0:	0e 94 29 0c 	call	0x1852	; 0x1852 <prvIsQueueFull>
 6b4:	88 23       	and	r24, r24
 6b6:	81 f0       	breq	.+32     	; 0x6d8 <xQueueGenericSend+0x108>
 6b8:	6c 81       	ldd	r22, Y+4	; 0x04
 6ba:	7d 81       	ldd	r23, Y+5	; 0x05
 6bc:	c7 01       	movw	r24, r14
 6be:	08 96       	adiw	r24, 0x08	; 8
 6c0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <vTaskPlaceOnEventList>
 6c4:	c7 01       	movw	r24, r14
 6c6:	0e 94 6f 08 	call	0x10de	; 0x10de <prvUnlockQueue>
 6ca:	0e 94 59 01 	call	0x2b2	; 0x2b2 <xTaskResumeAll>
 6ce:	81 11       	cpse	r24, r1
 6d0:	93 cf       	rjmp	.-218    	; 0x5f8 <xQueueGenericSend+0x28>
 6d2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <vPortYield>
 6d6:	90 cf       	rjmp	.-224    	; 0x5f8 <xQueueGenericSend+0x28>
 6d8:	c7 01       	movw	r24, r14
 6da:	0e 94 6f 08 	call	0x10de	; 0x10de <prvUnlockQueue>
 6de:	0e 94 59 01 	call	0x2b2	; 0x2b2 <xTaskResumeAll>
 6e2:	8a cf       	rjmp	.-236    	; 0x5f8 <xQueueGenericSend+0x28>
 6e4:	c7 01       	movw	r24, r14
 6e6:	0e 94 6f 08 	call	0x10de	; 0x10de <prvUnlockQueue>
 6ea:	0e 94 59 01 	call	0x2b2	; 0x2b2 <xTaskResumeAll>
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	0f 90       	pop	r0
 6f6:	0f 90       	pop	r0
 6f8:	0f 90       	pop	r0
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	ff 90       	pop	r15
 704:	ef 90       	pop	r14
 706:	8f 90       	pop	r8
 708:	7f 90       	pop	r7
 70a:	6f 90       	pop	r6
 70c:	08 95       	ret

Disassembly of section .text.xQueueReceive:

0000070e <xQueueReceive>:
 70e:	cf 92       	push	r12
 710:	df 92       	push	r13
 712:	ef 92       	push	r14
 714:	ff 92       	push	r15
 716:	0f 93       	push	r16
 718:	1f 93       	push	r17
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	00 d0       	rcall	.+0      	; 0x720 <xQueueReceive+0x12>
 720:	00 d0       	rcall	.+0      	; 0x722 <xQueueReceive+0x14>
 722:	0f 92       	push	r0
 724:	cd b7       	in	r28, 0x3d	; 61
 726:	de b7       	in	r29, 0x3e	; 62
 728:	8c 01       	movw	r16, r24
 72a:	6b 01       	movw	r12, r22
 72c:	5d 83       	std	Y+5, r21	; 0x05
 72e:	4c 83       	std	Y+4, r20	; 0x04
 730:	e1 2c       	mov	r14, r1
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	f8 94       	cli
 736:	0f 92       	push	r0
 738:	f8 01       	movw	r30, r16
 73a:	f2 8c       	ldd	r15, Z+26	; 0x1a
 73c:	ff 20       	and	r15, r15
 73e:	a1 f0       	breq	.+40     	; 0x768 <xQueueReceive+0x5a>
 740:	b6 01       	movw	r22, r12
 742:	c8 01       	movw	r24, r16
 744:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <prvCopyDataFromQueue>
 748:	fa 94       	dec	r15
 74a:	f8 01       	movw	r30, r16
 74c:	f2 8e       	std	Z+26, r15	; 0x1a
 74e:	80 85       	ldd	r24, Z+8	; 0x08
 750:	88 23       	and	r24, r24
 752:	31 f0       	breq	.+12     	; 0x760 <xQueueReceive+0x52>
 754:	08 5f       	subi	r16, 0xF8	; 248
 756:	1f 4f       	sbci	r17, 0xFF	; 255
 758:	b8 01       	movw	r22, r16
 75a:	80 e8       	ldi	r24, 0x80	; 128
 75c:	0e 94 26 02 	call	0x44c	; 0x44c <xTaskRemoveFromEventList>
 760:	0f 90       	pop	r0
 762:	0f be       	out	0x3f, r0	; 63
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	55 c0       	rjmp	.+170    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 768:	8c 81       	ldd	r24, Y+4	; 0x04
 76a:	9d 81       	ldd	r25, Y+5	; 0x05
 76c:	89 2b       	or	r24, r25
 76e:	21 f4       	brne	.+8      	; 0x778 <xQueueReceive+0x6a>
 770:	0f 90       	pop	r0
 772:	0f be       	out	0x3f, r0	; 63
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	4d c0       	rjmp	.+154    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 778:	e1 10       	cpse	r14, r1
 77a:	06 c0       	rjmp	.+12     	; 0x788 <xQueueReceive+0x7a>
 77c:	ce 01       	movw	r24, r28
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <vTaskInternalSetTimeOutState>
 784:	ee 24       	eor	r14, r14
 786:	e3 94       	inc	r14
 788:	0f 90       	pop	r0
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <vTaskSuspendAll>
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	f8 94       	cli
 794:	0f 92       	push	r0
 796:	f8 01       	movw	r30, r16
 798:	85 8d       	ldd	r24, Z+29	; 0x1d
 79a:	8f 3f       	cpi	r24, 0xFF	; 255
 79c:	09 f4       	brne	.+2      	; 0x7a0 <xQueueReceive+0x92>
 79e:	15 8e       	std	Z+29, r1	; 0x1d
 7a0:	f8 01       	movw	r30, r16
 7a2:	86 8d       	ldd	r24, Z+30	; 0x1e
 7a4:	8f 3f       	cpi	r24, 0xFF	; 255
 7a6:	09 f4       	brne	.+2      	; 0x7aa <xQueueReceive+0x9c>
 7a8:	16 8e       	std	Z+30, r1	; 0x1e
 7aa:	0f 90       	pop	r0
 7ac:	0f be       	out	0x3f, r0	; 63
 7ae:	be 01       	movw	r22, r28
 7b0:	6c 5f       	subi	r22, 0xFC	; 252
 7b2:	7f 4f       	sbci	r23, 0xFF	; 255
 7b4:	ce 01       	movw	r24, r28
 7b6:	01 96       	adiw	r24, 0x01	; 1
 7b8:	0e 94 37 09 	call	0x126e	; 0x126e <xTaskCheckForTimeOut>
 7bc:	81 11       	cpse	r24, r1
 7be:	1c c0       	rjmp	.+56     	; 0x7f8 <xQueueReceive+0xea>
 7c0:	b8 01       	movw	r22, r16
 7c2:	80 e8       	ldi	r24, 0x80	; 128
 7c4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <prvIsQueueEmpty>
 7c8:	88 23       	and	r24, r24
 7ca:	81 f0       	breq	.+32     	; 0x7ec <xQueueReceive+0xde>
 7cc:	6c 81       	ldd	r22, Y+4	; 0x04
 7ce:	7d 81       	ldd	r23, Y+5	; 0x05
 7d0:	c8 01       	movw	r24, r16
 7d2:	41 96       	adiw	r24, 0x11	; 17
 7d4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <vTaskPlaceOnEventList>
 7d8:	c8 01       	movw	r24, r16
 7da:	0e 94 6f 08 	call	0x10de	; 0x10de <prvUnlockQueue>
 7de:	0e 94 59 01 	call	0x2b2	; 0x2b2 <xTaskResumeAll>
 7e2:	81 11       	cpse	r24, r1
 7e4:	a6 cf       	rjmp	.-180    	; 0x732 <xQueueReceive+0x24>
 7e6:	0e 94 2d 07 	call	0xe5a	; 0xe5a <vPortYield>
 7ea:	a3 cf       	rjmp	.-186    	; 0x732 <xQueueReceive+0x24>
 7ec:	c8 01       	movw	r24, r16
 7ee:	0e 94 6f 08 	call	0x10de	; 0x10de <prvUnlockQueue>
 7f2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <xTaskResumeAll>
 7f6:	9d cf       	rjmp	.-198    	; 0x732 <xQueueReceive+0x24>
 7f8:	c8 01       	movw	r24, r16
 7fa:	0e 94 6f 08 	call	0x10de	; 0x10de <prvUnlockQueue>
 7fe:	0e 94 59 01 	call	0x2b2	; 0x2b2 <xTaskResumeAll>
 802:	b8 01       	movw	r22, r16
 804:	80 e8       	ldi	r24, 0x80	; 128
 806:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <prvIsQueueEmpty>
 80a:	88 23       	and	r24, r24
 80c:	09 f4       	brne	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80e:	91 cf       	rjmp	.-222    	; 0x732 <xQueueReceive+0x24>
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	0f 90       	pop	r0
 818:	0f 90       	pop	r0
 81a:	0f 90       	pop	r0
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	1f 91       	pop	r17
 822:	0f 91       	pop	r16
 824:	ff 90       	pop	r15
 826:	ef 90       	pop	r14
 828:	df 90       	pop	r13
 82a:	cf 90       	pop	r12
 82c:	08 95       	ret

Disassembly of section .text.xQueueCreateSet:

00001ac4 <xQueueCreateSet>:

    QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
    {
        QueueSetHandle_t pxQueue;

        pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	62 e0       	ldi	r22, 0x02	; 2
    1ac8:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xQueueGenericCreate>

        return pxQueue;
    }
    1acc:	08 95       	ret

Disassembly of section .text.xQueueAddToSet:

0000195c <xQueueAddToSet>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	0f 92       	push	r0
    1962:	fc 01       	movw	r30, r24
    1964:	27 8d       	ldd	r18, Z+31	; 0x1f
    1966:	30 a1       	ldd	r19, Z+32	; 0x20
    1968:	23 2b       	or	r18, r19
    196a:	39 f4       	brne	.+14     	; 0x197a <xQueueAddToSet+0x1e>
    196c:	22 8d       	ldd	r18, Z+26	; 0x1a
    196e:	21 11       	cpse	r18, r1
    1970:	06 c0       	rjmp	.+12     	; 0x197e <xQueueAddToSet+0x22>
    1972:	70 a3       	std	Z+32, r23	; 0x20
    1974:	67 8f       	std	Z+31, r22	; 0x1f
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	03 c0       	rjmp	.+6      	; 0x1980 <xQueueAddToSet+0x24>
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <xQueueAddToSet+0x24>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	0f 90       	pop	r0
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	08 95       	ret

Disassembly of section .text.xQueueSelectFromSet:

00001986 <xQueueSelectFromSet>:
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	00 d0       	rcall	.+0      	; 0x198c <xQueueSelectFromSet+0x6>
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	ab 01       	movw	r20, r22
    1992:	1a 82       	std	Y+2, r1	; 0x02
    1994:	19 82       	std	Y+1, r1	; 0x01
    1996:	be 01       	movw	r22, r28
    1998:	6f 5f       	subi	r22, 0xFF	; 255
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	0e 94 87 03 	call	0x70e	; 0x70e <xQueueReceive>
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	9a 81       	ldd	r25, Y+2	; 0x02
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

Disassembly of section .text.prvResetNextTaskUnblockTime:

0000188a <prvResetNextTaskUnblockTime>:
        xReturn = xTickCount;
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    188a:	e0 91 a1 06 	lds	r30, 0x06A1	; 0x8006a1 <pxDelayedTaskList>
    188e:	f0 91 a2 06 	lds	r31, 0x06A2	; 0x8006a2 <pxDelayedTaskList+0x1>
    1892:	80 81       	ld	r24, Z
    1894:	81 11       	cpse	r24, r1
    1896:	07 c0       	rjmp	.+14     	; 0x18a6 <prvResetNextTaskUnblockTime+0x1c>
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	9f ef       	ldi	r25, 0xFF	; 255
    189c:	90 93 9a 06 	sts	0x069A, r25	; 0x80069a <xNextTaskUnblockTime+0x1>
    18a0:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <xNextTaskUnblockTime>
    18a4:	08 95       	ret
    18a6:	e0 91 a1 06 	lds	r30, 0x06A1	; 0x8006a1 <pxDelayedTaskList>
    18aa:	f0 91 a2 06 	lds	r31, 0x06A2	; 0x8006a2 <pxDelayedTaskList+0x1>
    18ae:	05 80       	ldd	r0, Z+5	; 0x05
    18b0:	f6 81       	ldd	r31, Z+6	; 0x06
    18b2:	e0 2d       	mov	r30, r0
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	90 93 9a 06 	sts	0x069A, r25	; 0x80069a <xNextTaskUnblockTime+0x1>
    18bc:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <xNextTaskUnblockTime>
    18c0:	08 95       	ret

Disassembly of section .text.prvDeleteTCB:

00001a3c <prvDeleteTCB>:
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	ec 01       	movw	r28, r24
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <vPortFree>
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <vPortFree>
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	08 95       	ret

Disassembly of section .text.prvInitialiseNewTask:

00000a1e <prvInitialiseNewTask>:
 a1e:	6f 92       	push	r6
 a20:	7f 92       	push	r7
 a22:	8f 92       	push	r8
 a24:	9f 92       	push	r9
 a26:	af 92       	push	r10
 a28:	bf 92       	push	r11
 a2a:	cf 92       	push	r12
 a2c:	df 92       	push	r13
 a2e:	ef 92       	push	r14
 a30:	ff 92       	push	r15
 a32:	0f 93       	push	r16
 a34:	1f 93       	push	r17
 a36:	cf 93       	push	r28
 a38:	df 93       	push	r29
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
 a3e:	3c 01       	movw	r6, r24
 a40:	a6 2f       	mov	r26, r22
 a42:	ca 01       	movw	r24, r20
 a44:	f4 01       	movw	r30, r8
 a46:	47 89       	ldd	r20, Z+23	; 0x17
 a48:	50 8d       	ldd	r21, Z+24	; 0x18
 a4a:	01 50       	subi	r16, 0x01	; 1
 a4c:	11 09       	sbc	r17, r1
 a4e:	04 0f       	add	r16, r20
 a50:	15 1f       	adc	r17, r21
 a52:	00 97       	sbiw	r24, 0x00	; 0
 a54:	a1 05       	cpc	r26, r1
 a56:	d1 f4       	brne	.+52     	; 0xa8c <prvInitialiseNewTask+0x6e>
 a58:	1e c0       	rjmp	.+60     	; 0xa96 <prvInitialiseNewTask+0x78>
 a5a:	27 2f       	mov	r18, r23
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	ac 01       	movw	r20, r24
 a60:	6a 2f       	mov	r22, r26
 a62:	42 0f       	add	r20, r18
 a64:	53 1f       	adc	r21, r19
 a66:	61 1d       	adc	r22, r1
 a68:	37 fd       	sbrc	r19, 7
 a6a:	6a 95       	dec	r22
 a6c:	fa 01       	movw	r30, r20
 a6e:	b4 91       	lpm	r27, Z
 a70:	67 fd       	sbrc	r22, 7
 a72:	b0 81       	ld	r27, Z
 a74:	f4 01       	movw	r30, r8
 a76:	e2 0f       	add	r30, r18
 a78:	f3 1f       	adc	r31, r19
 a7a:	b1 8f       	std	Z+25, r27	; 0x19
 a7c:	fa 01       	movw	r30, r20
 a7e:	24 91       	lpm	r18, Z
 a80:	67 fd       	sbrc	r22, 7
 a82:	20 81       	ld	r18, Z
 a84:	22 23       	and	r18, r18
 a86:	29 f0       	breq	.+10     	; 0xa92 <prvInitialiseNewTask+0x74>
 a88:	7f 5f       	subi	r23, 0xFF	; 255
 a8a:	01 c0       	rjmp	.+2      	; 0xa8e <prvInitialiseNewTask+0x70>
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	78 30       	cpi	r23, 0x08	; 8
 a90:	20 f3       	brcs	.-56     	; 0xa5a <prvInitialiseNewTask+0x3c>
 a92:	f4 01       	movw	r30, r8
 a94:	10 a2       	std	Z+32, r1	; 0x20
 a96:	f3 e0       	ldi	r31, 0x03	; 3
 a98:	fc 15       	cp	r31, r12
 a9a:	20 f4       	brcc	.+8      	; 0xaa4 <prvInitialiseNewTask+0x86>
 a9c:	0f 2e       	mov	r0, r31
 a9e:	f3 e0       	ldi	r31, 0x03	; 3
 aa0:	cf 2e       	mov	r12, r31
 aa2:	f0 2d       	mov	r31, r0
 aa4:	f4 01       	movw	r30, r8
 aa6:	c6 8a       	std	Z+22, r12	; 0x16
 aa8:	c4 01       	movw	r24, r8
 aaa:	02 96       	adiw	r24, 0x02	; 2
 aac:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <vListInitialiseItem>
 ab0:	c4 01       	movw	r24, r8
 ab2:	0c 96       	adiw	r24, 0x0c	; 12
 ab4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <vListInitialiseItem>
 ab8:	f4 01       	movw	r30, r8
 aba:	91 86       	std	Z+9, r9	; 0x09
 abc:	80 86       	std	Z+8, r8	; 0x08
 abe:	84 e0       	ldi	r24, 0x04	; 4
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	8c 19       	sub	r24, r12
 ac4:	91 09       	sbc	r25, r1
 ac6:	95 87       	std	Z+13, r25	; 0x0d
 ac8:	84 87       	std	Z+12, r24	; 0x0c
 aca:	93 8a       	std	Z+19, r9	; 0x13
 acc:	82 8a       	std	Z+18, r8	; 0x12
 ace:	a7 01       	movw	r20, r14
 ad0:	b3 01       	movw	r22, r6
 ad2:	c8 01       	movw	r24, r16
 ad4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <pxPortInitialiseStack>
 ad8:	f4 01       	movw	r30, r8
 ada:	91 83       	std	Z+1, r25	; 0x01
 adc:	80 83       	st	Z, r24
 ade:	a1 14       	cp	r10, r1
 ae0:	b1 04       	cpc	r11, r1
 ae2:	19 f0       	breq	.+6      	; 0xaea <prvInitialiseNewTask+0xcc>
 ae4:	f5 01       	movw	r30, r10
 ae6:	91 82       	std	Z+1, r9	; 0x01
 ae8:	80 82       	st	Z, r8
 aea:	df 91       	pop	r29
 aec:	cf 91       	pop	r28
 aee:	1f 91       	pop	r17
 af0:	0f 91       	pop	r16
 af2:	ff 90       	pop	r15
 af4:	ef 90       	pop	r14
 af6:	df 90       	pop	r13
 af8:	cf 90       	pop	r12
 afa:	bf 90       	pop	r11
 afc:	af 90       	pop	r10
 afe:	9f 90       	pop	r9
 b00:	8f 90       	pop	r8
 b02:	7f 90       	pop	r7
 b04:	6f 90       	pop	r6
 b06:	08 95       	ret

Disassembly of section .text.prvInitialiseTaskLists:

000013d6 <prvInitialiseTaskLists>:
    13d6:	cf 93       	push	r28
    13d8:	c0 e0       	ldi	r28, 0x00	; 0
    13da:	10 c0       	rjmp	.+32     	; 0x13fc <prvInitialiseTaskLists+0x26>
    13dc:	8c 2f       	mov	r24, r28
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9c 01       	movw	r18, r24
    13e2:	22 0f       	add	r18, r18
    13e4:	33 1f       	adc	r19, r19
    13e6:	22 0f       	add	r18, r18
    13e8:	33 1f       	adc	r19, r19
    13ea:	22 0f       	add	r18, r18
    13ec:	33 1f       	adc	r19, r19
    13ee:	82 0f       	add	r24, r18
    13f0:	93 1f       	adc	r25, r19
    13f2:	8e 5b       	subi	r24, 0xBE	; 190
    13f4:	99 4f       	sbci	r25, 0xF9	; 249
    13f6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <vListInitialise>
    13fa:	cf 5f       	subi	r28, 0xFF	; 255
    13fc:	c4 30       	cpi	r28, 0x04	; 4
    13fe:	70 f3       	brcs	.-36     	; 0x13dc <prvInitialiseTaskLists+0x6>
    1400:	8a e8       	ldi	r24, 0x8A	; 138
    1402:	96 e0       	ldi	r25, 0x06	; 6
    1404:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <vListInitialise>
    1408:	81 e8       	ldi	r24, 0x81	; 129
    140a:	96 e0       	ldi	r25, 0x06	; 6
    140c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <vListInitialise>
    1410:	88 e7       	ldi	r24, 0x78	; 120
    1412:	96 e0       	ldi	r25, 0x06	; 6
    1414:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <vListInitialise>
    1418:	8f e6       	ldi	r24, 0x6F	; 111
    141a:	96 e0       	ldi	r25, 0x06	; 6
    141c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <vListInitialise>
    1420:	86 e6       	ldi	r24, 0x66	; 102
    1422:	96 e0       	ldi	r25, 0x06	; 6
    1424:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <vListInitialise>
    1428:	8a e8       	ldi	r24, 0x8A	; 138
    142a:	96 e0       	ldi	r25, 0x06	; 6
    142c:	90 93 a2 06 	sts	0x06A2, r25	; 0x8006a2 <pxDelayedTaskList+0x1>
    1430:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <pxDelayedTaskList>
    1434:	81 e8       	ldi	r24, 0x81	; 129
    1436:	96 e0       	ldi	r25, 0x06	; 6
    1438:	90 93 a0 06 	sts	0x06A0, r25	; 0x8006a0 <pxOverflowDelayedTaskList+0x1>
    143c:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <pxOverflowDelayedTaskList>
    1440:	cf 91       	pop	r28
    1442:	08 95       	ret

Disassembly of section .text.prvAddNewTaskToReadyList:

00000930 <prvAddNewTaskToReadyList>:
 930:	cf 93       	push	r28
 932:	df 93       	push	r29
 934:	ec 01       	movw	r28, r24
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	f8 94       	cli
 93a:	0f 92       	push	r0
 93c:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <uxCurrentNumberOfTasks>
 940:	8f 5f       	subi	r24, 0xFF	; 255
 942:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <uxCurrentNumberOfTasks>
 946:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 94a:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 94e:	89 2b       	or	r24, r25
 950:	59 f4       	brne	.+22     	; 0x968 <prvAddNewTaskToReadyList+0x38>
 952:	d0 93 a4 06 	sts	0x06A4, r29	; 0x8006a4 <pxCurrentTCB+0x1>
 956:	c0 93 a3 06 	sts	0x06A3, r28	; 0x8006a3 <pxCurrentTCB>
 95a:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <uxCurrentNumberOfTasks>
 95e:	81 30       	cpi	r24, 0x01	; 1
 960:	99 f4       	brne	.+38     	; 0x988 <prvAddNewTaskToReadyList+0x58>
 962:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <prvInitialiseTaskLists>
 966:	10 c0       	rjmp	.+32     	; 0x988 <prvAddNewTaskToReadyList+0x58>
 968:	80 91 a9 06 	lds	r24, 0x06A9	; 0x8006a9 <xSchedulerRunning>
 96c:	81 11       	cpse	r24, r1
 96e:	0c c0       	rjmp	.+24     	; 0x988 <prvAddNewTaskToReadyList+0x58>
 970:	e0 91 a3 06 	lds	r30, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 974:	f0 91 a4 06 	lds	r31, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 978:	96 89       	ldd	r25, Z+22	; 0x16
 97a:	8e 89       	ldd	r24, Y+22	; 0x16
 97c:	89 17       	cp	r24, r25
 97e:	20 f0       	brcs	.+8      	; 0x988 <prvAddNewTaskToReadyList+0x58>
 980:	d0 93 a4 06 	sts	0x06A4, r29	; 0x8006a4 <pxCurrentTCB+0x1>
 984:	c0 93 a3 06 	sts	0x06A3, r28	; 0x8006a3 <pxCurrentTCB>
 988:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <uxTaskNumber>
 98c:	8f 5f       	subi	r24, 0xFF	; 255
 98e:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <uxTaskNumber>
 992:	8e 89       	ldd	r24, Y+22	; 0x16
 994:	90 91 aa 06 	lds	r25, 0x06AA	; 0x8006aa <uxTopReadyPriority>
 998:	98 17       	cp	r25, r24
 99a:	10 f4       	brcc	.+4      	; 0x9a0 <prvAddNewTaskToReadyList+0x70>
 99c:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <uxTopReadyPriority>
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	fc 01       	movw	r30, r24
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	ee 0f       	add	r30, r30
 9aa:	ff 1f       	adc	r31, r31
 9ac:	ee 0f       	add	r30, r30
 9ae:	ff 1f       	adc	r31, r31
 9b0:	8e 0f       	add	r24, r30
 9b2:	9f 1f       	adc	r25, r31
 9b4:	fc 01       	movw	r30, r24
 9b6:	ee 5b       	subi	r30, 0xBE	; 190
 9b8:	f9 4f       	sbci	r31, 0xF9	; 249
 9ba:	01 80       	ldd	r0, Z+1	; 0x01
 9bc:	f2 81       	ldd	r31, Z+2	; 0x02
 9be:	e0 2d       	mov	r30, r0
 9c0:	fd 83       	std	Y+5, r31	; 0x05
 9c2:	ec 83       	std	Y+4, r30	; 0x04
 9c4:	84 81       	ldd	r24, Z+4	; 0x04
 9c6:	95 81       	ldd	r25, Z+5	; 0x05
 9c8:	9f 83       	std	Y+7, r25	; 0x07
 9ca:	8e 83       	std	Y+6, r24	; 0x06
 9cc:	a4 81       	ldd	r26, Z+4	; 0x04
 9ce:	b5 81       	ldd	r27, Z+5	; 0x05
 9d0:	ce 01       	movw	r24, r28
 9d2:	02 96       	adiw	r24, 0x02	; 2
 9d4:	13 96       	adiw	r26, 0x03	; 3
 9d6:	9c 93       	st	X, r25
 9d8:	8e 93       	st	-X, r24
 9da:	12 97       	sbiw	r26, 0x02	; 2
 9dc:	95 83       	std	Z+5, r25	; 0x05
 9de:	84 83       	std	Z+4, r24	; 0x04
 9e0:	ee 89       	ldd	r30, Y+22	; 0x16
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	cf 01       	movw	r24, r30
 9e6:	88 0f       	add	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	88 0f       	add	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	88 0f       	add	r24, r24
 9f0:	99 1f       	adc	r25, r25
 9f2:	e8 0f       	add	r30, r24
 9f4:	f9 1f       	adc	r31, r25
 9f6:	ee 5b       	subi	r30, 0xBE	; 190
 9f8:	f9 4f       	sbci	r31, 0xF9	; 249
 9fa:	fb 87       	std	Y+11, r31	; 0x0b
 9fc:	ea 87       	std	Y+10, r30	; 0x0a
 9fe:	80 81       	ld	r24, Z
 a00:	8f 5f       	subi	r24, 0xFF	; 255
 a02:	80 83       	st	Z, r24
 a04:	0f 90       	pop	r0
 a06:	0f be       	out	0x3f, r0	; 63
 a08:	80 91 a9 06 	lds	r24, 0x06A9	; 0x8006a9 <xSchedulerRunning>
 a0c:	88 23       	and	r24, r24
 a0e:	21 f0       	breq	.+8      	; 0xa18 <prvAddNewTaskToReadyList+0xe8>
 a10:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 a14:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 a18:	df 91       	pop	r29
 a1a:	cf 91       	pop	r28
 a1c:	08 95       	ret

Disassembly of section .text.prvCheckTasksWaitingTermination:

000016e8 <prvCheckTasksWaitingTermination>:
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	1c c0       	rjmp	.+56     	; 0x1726 <prvCheckTasksWaitingTermination+0x3e>
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	0f 92       	push	r0
    16f4:	e0 91 74 06 	lds	r30, 0x0674	; 0x800674 <xTasksWaitingTermination+0x5>
    16f8:	f0 91 75 06 	lds	r31, 0x0675	; 0x800675 <xTasksWaitingTermination+0x6>
    16fc:	c6 81       	ldd	r28, Z+6	; 0x06
    16fe:	d7 81       	ldd	r29, Z+7	; 0x07
    1700:	ce 01       	movw	r24, r28
    1702:	02 96       	adiw	r24, 0x02	; 2
    1704:	0e 94 4d 0b 	call	0x169a	; 0x169a <uxListRemove>
    1708:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <uxCurrentNumberOfTasks>
    170c:	81 50       	subi	r24, 0x01	; 1
    170e:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <uxCurrentNumberOfTasks>
    1712:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <uxDeletedTasksWaitingCleanUp>
    1716:	81 50       	subi	r24, 0x01	; 1
    1718:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <uxDeletedTasksWaitingCleanUp>
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	ce 01       	movw	r24, r28
    1722:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <prvDeleteTCB>
    1726:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <uxDeletedTasksWaitingCleanUp>
    172a:	81 11       	cpse	r24, r1
    172c:	e0 cf       	rjmp	.-64     	; 0x16ee <prvCheckTasksWaitingTermination+0x6>
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	08 95       	ret

Disassembly of section .text.prvIdleTask:

00001ace <prvIdleTask>:
    1ace:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <prvCheckTasksWaitingTermination>
    1ad2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <vPortYield>
    1ad6:	fb cf       	rjmp	.-10     	; 0x1ace <prvIdleTask>

Disassembly of section .text.prvAddCurrentTaskToDelayedList:

0000082e <prvAddCurrentTaskToDelayedList>:
 82e:	ff 92       	push	r15
 830:	0f 93       	push	r16
 832:	1f 93       	push	r17
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	ec 01       	movw	r28, r24
 83a:	f6 2e       	mov	r15, r22
 83c:	00 91 9d 06 	lds	r16, 0x069D	; 0x80069d <xTickCount>
 840:	10 91 9e 06 	lds	r17, 0x069E	; 0x80069e <xTickCount+0x1>
 844:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 848:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 84c:	02 96       	adiw	r24, 0x02	; 2
 84e:	0e 94 4d 0b 	call	0x169a	; 0x169a <uxListRemove>
 852:	cf 3f       	cpi	r28, 0xFF	; 255
 854:	8f ef       	ldi	r24, 0xFF	; 255
 856:	d8 07       	cpc	r29, r24
 858:	b1 f5       	brne	.+108    	; 0x8c6 <__stack+0x67>
 85a:	ff 20       	and	r15, r15
 85c:	a1 f1       	breq	.+104    	; 0x8c6 <__stack+0x67>
 85e:	e6 e6       	ldi	r30, 0x66	; 102
 860:	f6 e0       	ldi	r31, 0x06	; 6
 862:	a1 81       	ldd	r26, Z+1	; 0x01
 864:	b2 81       	ldd	r27, Z+2	; 0x02
 866:	c0 91 a3 06 	lds	r28, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 86a:	d0 91 a4 06 	lds	r29, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 86e:	bd 83       	std	Y+5, r27	; 0x05
 870:	ac 83       	std	Y+4, r26	; 0x04
 872:	c0 91 a3 06 	lds	r28, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 876:	d0 91 a4 06 	lds	r29, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 87a:	14 96       	adiw	r26, 0x04	; 4
 87c:	8d 91       	ld	r24, X+
 87e:	9c 91       	ld	r25, X
 880:	15 97       	sbiw	r26, 0x05	; 5
 882:	9f 83       	std	Y+7, r25	; 0x07
 884:	8e 83       	std	Y+6, r24	; 0x06
 886:	14 96       	adiw	r26, 0x04	; 4
 888:	cd 91       	ld	r28, X+
 88a:	dc 91       	ld	r29, X
 88c:	15 97       	sbiw	r26, 0x05	; 5
 88e:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 892:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 896:	02 96       	adiw	r24, 0x02	; 2
 898:	9b 83       	std	Y+3, r25	; 0x03
 89a:	8a 83       	std	Y+2, r24	; 0x02
 89c:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 8a0:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 8a4:	02 96       	adiw	r24, 0x02	; 2
 8a6:	15 96       	adiw	r26, 0x05	; 5
 8a8:	9c 93       	st	X, r25
 8aa:	8e 93       	st	-X, r24
 8ac:	14 97       	sbiw	r26, 0x04	; 4
 8ae:	a0 91 a3 06 	lds	r26, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 8b2:	b0 91 a4 06 	lds	r27, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 8b6:	1b 96       	adiw	r26, 0x0b	; 11
 8b8:	fc 93       	st	X, r31
 8ba:	ee 93       	st	-X, r30
 8bc:	1a 97       	sbiw	r26, 0x0a	; 10
 8be:	80 81       	ld	r24, Z
 8c0:	8f 5f       	subi	r24, 0xFF	; 255
 8c2:	80 83       	st	Z, r24
 8c4:	2f c0       	rjmp	.+94     	; 0x924 <__stack+0xc5>
 8c6:	c0 0f       	add	r28, r16
 8c8:	d1 1f       	adc	r29, r17
 8ca:	e0 91 a3 06 	lds	r30, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 8ce:	f0 91 a4 06 	lds	r31, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 8d2:	d3 83       	std	Z+3, r29	; 0x03
 8d4:	c2 83       	std	Z+2, r28	; 0x02
 8d6:	c0 17       	cp	r28, r16
 8d8:	d1 07       	cpc	r29, r17
 8da:	68 f4       	brcc	.+26     	; 0x8f6 <__stack+0x97>
 8dc:	60 91 a3 06 	lds	r22, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 8e0:	70 91 a4 06 	lds	r23, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 8e4:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxOverflowDelayedTaskList>
 8e8:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxOverflowDelayedTaskList+0x1>
 8ec:	6e 5f       	subi	r22, 0xFE	; 254
 8ee:	7f 4f       	sbci	r23, 0xFF	; 255
 8f0:	0e 94 be 0a 	call	0x157c	; 0x157c <vListInsert>
 8f4:	17 c0       	rjmp	.+46     	; 0x924 <__stack+0xc5>
 8f6:	60 91 a3 06 	lds	r22, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 8fa:	70 91 a4 06 	lds	r23, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 8fe:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <pxDelayedTaskList>
 902:	90 91 a2 06 	lds	r25, 0x06A2	; 0x8006a2 <pxDelayedTaskList+0x1>
 906:	6e 5f       	subi	r22, 0xFE	; 254
 908:	7f 4f       	sbci	r23, 0xFF	; 255
 90a:	0e 94 be 0a 	call	0x157c	; 0x157c <vListInsert>
 90e:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <xNextTaskUnblockTime>
 912:	90 91 9a 06 	lds	r25, 0x069A	; 0x80069a <xNextTaskUnblockTime+0x1>
 916:	c8 17       	cp	r28, r24
 918:	d9 07       	cpc	r29, r25
 91a:	20 f4       	brcc	.+8      	; 0x924 <__stack+0xc5>
 91c:	d0 93 9a 06 	sts	0x069A, r29	; 0x80069a <xNextTaskUnblockTime+0x1>
 920:	c0 93 99 06 	sts	0x0699, r28	; 0x800699 <xNextTaskUnblockTime>
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	ff 90       	pop	r15
 92e:	08 95       	ret

Disassembly of section .text.xTaskCreate:

00000bea <xTaskCreate>:
 bea:	4f 92       	push	r4
 bec:	5f 92       	push	r5
 bee:	6f 92       	push	r6
 bf0:	7f 92       	push	r7
 bf2:	8f 92       	push	r8
 bf4:	9f 92       	push	r9
 bf6:	af 92       	push	r10
 bf8:	bf 92       	push	r11
 bfa:	cf 92       	push	r12
 bfc:	df 92       	push	r13
 bfe:	ef 92       	push	r14
 c00:	ff 92       	push	r15
 c02:	0f 93       	push	r16
 c04:	1f 93       	push	r17
 c06:	cf 93       	push	r28
 c08:	df 93       	push	r29
 c0a:	00 d0       	rcall	.+0      	; 0xc0c <xTaskCreate+0x22>
 c0c:	00 d0       	rcall	.+0      	; 0xc0e <xTaskCreate+0x24>
 c0e:	0f 92       	push	r0
 c10:	cd b7       	in	r28, 0x3d	; 61
 c12:	de b7       	in	r29, 0x3e	; 62
 c14:	3c 01       	movw	r6, r24
 c16:	49 83       	std	Y+1, r20	; 0x01
 c18:	5a 83       	std	Y+2, r21	; 0x02
 c1a:	6b 83       	std	Y+3, r22	; 0x03
 c1c:	49 01       	movw	r8, r18
 c1e:	28 01       	movw	r4, r16
 c20:	c9 01       	movw	r24, r18
 c22:	0e 94 b1 09 	call	0x1362	; 0x1362 <pvPortMalloc>
 c26:	8c 01       	movw	r16, r24
 c28:	89 2b       	or	r24, r25
 c2a:	b9 f0       	breq	.+46     	; 0xc5a <xTaskCreate+0x70>
 c2c:	86 e2       	ldi	r24, 0x26	; 38
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	0e 94 b1 09 	call	0x1362	; 0x1362 <pvPortMalloc>
 c34:	9d 83       	std	Y+5, r25	; 0x05
 c36:	8c 83       	std	Y+4, r24	; 0x04
 c38:	89 2b       	or	r24, r25
 c3a:	59 f0       	breq	.+22     	; 0xc52 <xTaskCreate+0x68>
 c3c:	86 e2       	ldi	r24, 0x26	; 38
 c3e:	ec 81       	ldd	r30, Y+4	; 0x04
 c40:	fd 81       	ldd	r31, Y+5	; 0x05
 c42:	11 92       	st	Z+, r1
 c44:	8a 95       	dec	r24
 c46:	e9 f7       	brne	.-6      	; 0xc42 <xTaskCreate+0x58>
 c48:	ec 81       	ldd	r30, Y+4	; 0x04
 c4a:	fd 81       	ldd	r31, Y+5	; 0x05
 c4c:	10 8f       	std	Z+24, r17	; 0x18
 c4e:	07 8b       	std	Z+23, r16	; 0x17
 c50:	06 c0       	rjmp	.+12     	; 0xc5e <xTaskCreate+0x74>
 c52:	c8 01       	movw	r24, r16
 c54:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <vPortFree>
 c58:	02 c0       	rjmp	.+4      	; 0xc5e <xTaskCreate+0x74>
 c5a:	1d 82       	std	Y+5, r1	; 0x05
 c5c:	1c 82       	std	Y+4, r1	; 0x04
 c5e:	8c 81       	ldd	r24, Y+4	; 0x04
 c60:	9d 81       	ldd	r25, Y+5	; 0x05
 c62:	89 2b       	or	r24, r25
 c64:	d1 f0       	breq	.+52     	; 0xc9a <xTaskCreate+0xb0>
 c66:	84 01       	movw	r16, r8
 c68:	20 e0       	ldi	r18, 0x00	; 0
 c6a:	30 e0       	ldi	r19, 0x00	; 0
 c6c:	1f 92       	push	r1
 c6e:	1f 92       	push	r1
 c70:	1f 92       	push	r1
 c72:	8c 80       	ldd	r8, Y+4	; 0x04
 c74:	9d 80       	ldd	r9, Y+5	; 0x05
 c76:	56 01       	movw	r10, r12
 c78:	ce 2c       	mov	r12, r14
 c7a:	72 01       	movw	r14, r4
 c7c:	49 81       	ldd	r20, Y+1	; 0x01
 c7e:	5a 81       	ldd	r21, Y+2	; 0x02
 c80:	6b 81       	ldd	r22, Y+3	; 0x03
 c82:	c3 01       	movw	r24, r6
 c84:	0e 94 0f 05 	call	0xa1e	; 0xa1e <prvInitialiseNewTask>
 c88:	8c 81       	ldd	r24, Y+4	; 0x04
 c8a:	9d 81       	ldd	r25, Y+5	; 0x05
 c8c:	0e 94 98 04 	call	0x930	; 0x930 <prvAddNewTaskToReadyList>
 c90:	0f 90       	pop	r0
 c92:	0f 90       	pop	r0
 c94:	0f 90       	pop	r0
 c96:	81 e0       	ldi	r24, 0x01	; 1
 c98:	01 c0       	rjmp	.+2      	; 0xc9c <xTaskCreate+0xb2>
 c9a:	8f ef       	ldi	r24, 0xFF	; 255
 c9c:	0f 90       	pop	r0
 c9e:	0f 90       	pop	r0
 ca0:	0f 90       	pop	r0
 ca2:	0f 90       	pop	r0
 ca4:	0f 90       	pop	r0
 ca6:	df 91       	pop	r29
 ca8:	cf 91       	pop	r28
 caa:	1f 91       	pop	r17
 cac:	0f 91       	pop	r16
 cae:	ff 90       	pop	r15
 cb0:	ef 90       	pop	r14
 cb2:	df 90       	pop	r13
 cb4:	cf 90       	pop	r12
 cb6:	bf 90       	pop	r11
 cb8:	af 90       	pop	r10
 cba:	9f 90       	pop	r9
 cbc:	8f 90       	pop	r8
 cbe:	7f 90       	pop	r7
 cc0:	6f 90       	pop	r6
 cc2:	5f 90       	pop	r5
 cc4:	4f 90       	pop	r4
 cc6:	08 95       	ret

Disassembly of section .text.vTaskStartScheduler:

0000163c <vTaskStartScheduler>:
    163c:	cf 92       	push	r12
    163e:	df 92       	push	r13
    1640:	ef 92       	push	r14
    1642:	0f 93       	push	r16
    1644:	1f 93       	push	r17
    1646:	0f 2e       	mov	r0, r31
    1648:	f7 e9       	ldi	r31, 0x97	; 151
    164a:	cf 2e       	mov	r12, r31
    164c:	f6 e0       	ldi	r31, 0x06	; 6
    164e:	df 2e       	mov	r13, r31
    1650:	f0 2d       	mov	r31, r0
    1652:	e1 2c       	mov	r14, r1
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	10 e0       	ldi	r17, 0x00	; 0
    1658:	25 e5       	ldi	r18, 0x55	; 85
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	4d ec       	ldi	r20, 0xCD	; 205
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	87 e6       	ldi	r24, 0x67	; 103
    1664:	9d e0       	ldi	r25, 0x0D	; 13
    1666:	0e 94 f5 05 	call	0xbea	; 0xbea <xTaskCreate>
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	81 f4       	brne	.+32     	; 0x168e <vTaskStartScheduler+0x52>
    166e:	f8 94       	cli
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	9f ef       	ldi	r25, 0xFF	; 255
    1674:	90 93 9a 06 	sts	0x069A, r25	; 0x80069a <xNextTaskUnblockTime+0x1>
    1678:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <xNextTaskUnblockTime>
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 93 a9 06 	sts	0x06A9, r24	; 0x8006a9 <xSchedulerRunning>
    1682:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <xTickCount+0x1>
    1686:	10 92 9d 06 	sts	0x069D, r1	; 0x80069d <xTickCount>
    168a:	0e 94 ef 0a 	call	0x15de	; 0x15de <xPortStartScheduler>
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ef 90       	pop	r14
    1694:	df 90       	pop	r13
    1696:	cf 90       	pop	r12
    1698:	08 95       	ret

Disassembly of section .text.vTaskSuspendAll:

00001ab8 <vTaskSuspendAll>:
    1ab8:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <uxSchedulerSuspended>
    1abc:	8f 5f       	subi	r24, 0xFF	; 255
    1abe:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <uxSchedulerSuspended>
    1ac2:	08 95       	ret

Disassembly of section .text.xTaskGetTickCount:

00001a82 <xTaskGetTickCount>:
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	0f 92       	push	r0
    1a88:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <xTickCount>
    1a8c:	90 91 9e 06 	lds	r25, 0x069E	; 0x80069e <xTickCount+0x1>
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	08 95       	ret

Disassembly of section .text.uxTaskGetNumberOfTasks:

00001ae8 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
    1ae8:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <uxCurrentNumberOfTasks>
}
    1aec:	08 95       	ret

Disassembly of section .text.xTaskIncrementTick:

000000d4 <xTaskIncrementTick>:
        xReturn = xTickCount;
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <uxSchedulerSuspended>
  e0:	81 11       	cpse	r24, r1
  e2:	d8 c0       	rjmp	.+432    	; 0x294 <xTaskIncrementTick+0x1c0>
  e4:	c0 91 9d 06 	lds	r28, 0x069D	; 0x80069d <xTickCount>
  e8:	d0 91 9e 06 	lds	r29, 0x069E	; 0x80069e <xTickCount+0x1>
  ec:	8e 01       	movw	r16, r28
  ee:	0f 5f       	subi	r16, 0xFF	; 255
  f0:	1f 4f       	sbci	r17, 0xFF	; 255
  f2:	10 93 9e 06 	sts	0x069E, r17	; 0x80069e <xTickCount+0x1>
  f6:	00 93 9d 06 	sts	0x069D, r16	; 0x80069d <xTickCount>
  fa:	01 15       	cp	r16, r1
  fc:	11 05       	cpc	r17, r1
  fe:	b9 f4       	brne	.+46     	; 0x12e <xTaskIncrementTick+0x5a>
 100:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <pxDelayedTaskList>
 104:	90 91 a2 06 	lds	r25, 0x06A2	; 0x8006a2 <pxDelayedTaskList+0x1>
 108:	20 91 9f 06 	lds	r18, 0x069F	; 0x80069f <pxOverflowDelayedTaskList>
 10c:	30 91 a0 06 	lds	r19, 0x06A0	; 0x8006a0 <pxOverflowDelayedTaskList+0x1>
 110:	30 93 a2 06 	sts	0x06A2, r19	; 0x8006a2 <pxDelayedTaskList+0x1>
 114:	20 93 a1 06 	sts	0x06A1, r18	; 0x8006a1 <pxDelayedTaskList>
 118:	90 93 a0 06 	sts	0x06A0, r25	; 0x8006a0 <pxOverflowDelayedTaskList+0x1>
 11c:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <pxOverflowDelayedTaskList>
 120:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <xNumOfOverflows>
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <xNumOfOverflows>
 12a:	0e 94 45 0c 	call	0x188a	; 0x188a <prvResetNextTaskUnblockTime>
 12e:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <xNextTaskUnblockTime>
 132:	90 91 9a 06 	lds	r25, 0x069A	; 0x80069a <xNextTaskUnblockTime+0x1>
 136:	08 17       	cp	r16, r24
 138:	19 07       	cpc	r17, r25
 13a:	08 f4       	brcc	.+2      	; 0x13e <xTaskIncrementTick+0x6a>
 13c:	b4 c0       	rjmp	.+360    	; 0x2a6 <xTaskIncrementTick+0x1d2>
 13e:	e0 91 a1 06 	lds	r30, 0x06A1	; 0x8006a1 <pxDelayedTaskList>
 142:	f0 91 a2 06 	lds	r31, 0x06A2	; 0x8006a2 <pxDelayedTaskList+0x1>
 146:	80 81       	ld	r24, Z
 148:	81 11       	cpse	r24, r1
 14a:	07 c0       	rjmp	.+14     	; 0x15a <xTaskIncrementTick+0x86>
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	9f ef       	ldi	r25, 0xFF	; 255
 150:	90 93 9a 06 	sts	0x069A, r25	; 0x80069a <xNextTaskUnblockTime+0x1>
 154:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <xNextTaskUnblockTime>
 158:	a6 c0       	rjmp	.+332    	; 0x2a6 <xTaskIncrementTick+0x1d2>
 15a:	e0 91 a1 06 	lds	r30, 0x06A1	; 0x8006a1 <pxDelayedTaskList>
 15e:	f0 91 a2 06 	lds	r31, 0x06A2	; 0x8006a2 <pxDelayedTaskList+0x1>
 162:	05 80       	ldd	r0, Z+5	; 0x05
 164:	f6 81       	ldd	r31, Z+6	; 0x06
 166:	e0 2d       	mov	r30, r0
 168:	06 80       	ldd	r0, Z+6	; 0x06
 16a:	f7 81       	ldd	r31, Z+7	; 0x07
 16c:	e0 2d       	mov	r30, r0
 16e:	82 81       	ldd	r24, Z+2	; 0x02
 170:	93 81       	ldd	r25, Z+3	; 0x03
 172:	08 17       	cp	r16, r24
 174:	19 07       	cpc	r17, r25
 176:	28 f4       	brcc	.+10     	; 0x182 <xTaskIncrementTick+0xae>
 178:	90 93 9a 06 	sts	0x069A, r25	; 0x80069a <xNextTaskUnblockTime+0x1>
 17c:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <xNextTaskUnblockTime>
 180:	92 c0       	rjmp	.+292    	; 0x2a6 <xTaskIncrementTick+0x1d2>
 182:	a2 85       	ldd	r26, Z+10	; 0x0a
 184:	b3 85       	ldd	r27, Z+11	; 0x0b
 186:	84 81       	ldd	r24, Z+4	; 0x04
 188:	95 81       	ldd	r25, Z+5	; 0x05
 18a:	26 81       	ldd	r18, Z+6	; 0x06
 18c:	37 81       	ldd	r19, Z+7	; 0x07
 18e:	ec 01       	movw	r28, r24
 190:	3d 83       	std	Y+5, r19	; 0x05
 192:	2c 83       	std	Y+4, r18	; 0x04
 194:	86 81       	ldd	r24, Z+6	; 0x06
 196:	97 81       	ldd	r25, Z+7	; 0x07
 198:	24 81       	ldd	r18, Z+4	; 0x04
 19a:	35 81       	ldd	r19, Z+5	; 0x05
 19c:	ec 01       	movw	r28, r24
 19e:	3b 83       	std	Y+3, r19	; 0x03
 1a0:	2a 83       	std	Y+2, r18	; 0x02
 1a2:	11 96       	adiw	r26, 0x01	; 1
 1a4:	8d 91       	ld	r24, X+
 1a6:	9c 91       	ld	r25, X
 1a8:	12 97       	sbiw	r26, 0x02	; 2
 1aa:	9f 01       	movw	r18, r30
 1ac:	2e 5f       	subi	r18, 0xFE	; 254
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
 1b0:	82 17       	cp	r24, r18
 1b2:	93 07       	cpc	r25, r19
 1b4:	31 f4       	brne	.+12     	; 0x1c2 <xTaskIncrementTick+0xee>
 1b6:	86 81       	ldd	r24, Z+6	; 0x06
 1b8:	97 81       	ldd	r25, Z+7	; 0x07
 1ba:	12 96       	adiw	r26, 0x02	; 2
 1bc:	9c 93       	st	X, r25
 1be:	8e 93       	st	-X, r24
 1c0:	11 97       	sbiw	r26, 0x01	; 1
 1c2:	13 86       	std	Z+11, r1	; 0x0b
 1c4:	12 86       	std	Z+10, r1	; 0x0a
 1c6:	8c 91       	ld	r24, X
 1c8:	81 50       	subi	r24, 0x01	; 1
 1ca:	8c 93       	st	X, r24
 1cc:	a4 89       	ldd	r26, Z+20	; 0x14
 1ce:	b5 89       	ldd	r27, Z+21	; 0x15
 1d0:	10 97       	sbiw	r26, 0x00	; 0
 1d2:	11 f1       	breq	.+68     	; 0x218 <xTaskIncrementTick+0x144>
 1d4:	86 85       	ldd	r24, Z+14	; 0x0e
 1d6:	97 85       	ldd	r25, Z+15	; 0x0f
 1d8:	40 89       	ldd	r20, Z+16	; 0x10
 1da:	51 89       	ldd	r21, Z+17	; 0x11
 1dc:	ec 01       	movw	r28, r24
 1de:	5d 83       	std	Y+5, r21	; 0x05
 1e0:	4c 83       	std	Y+4, r20	; 0x04
 1e2:	80 89       	ldd	r24, Z+16	; 0x10
 1e4:	91 89       	ldd	r25, Z+17	; 0x11
 1e6:	46 85       	ldd	r20, Z+14	; 0x0e
 1e8:	57 85       	ldd	r21, Z+15	; 0x0f
 1ea:	ec 01       	movw	r28, r24
 1ec:	5b 83       	std	Y+3, r21	; 0x03
 1ee:	4a 83       	std	Y+2, r20	; 0x02
 1f0:	11 96       	adiw	r26, 0x01	; 1
 1f2:	4d 91       	ld	r20, X+
 1f4:	5c 91       	ld	r21, X
 1f6:	12 97       	sbiw	r26, 0x02	; 2
 1f8:	cf 01       	movw	r24, r30
 1fa:	0c 96       	adiw	r24, 0x0c	; 12
 1fc:	48 17       	cp	r20, r24
 1fe:	59 07       	cpc	r21, r25
 200:	31 f4       	brne	.+12     	; 0x20e <xTaskIncrementTick+0x13a>
 202:	80 89       	ldd	r24, Z+16	; 0x10
 204:	91 89       	ldd	r25, Z+17	; 0x11
 206:	12 96       	adiw	r26, 0x02	; 2
 208:	9c 93       	st	X, r25
 20a:	8e 93       	st	-X, r24
 20c:	11 97       	sbiw	r26, 0x01	; 1
 20e:	15 8a       	std	Z+21, r1	; 0x15
 210:	14 8a       	std	Z+20, r1	; 0x14
 212:	8c 91       	ld	r24, X
 214:	81 50       	subi	r24, 0x01	; 1
 216:	8c 93       	st	X, r24
 218:	86 89       	ldd	r24, Z+22	; 0x16
 21a:	90 91 aa 06 	lds	r25, 0x06AA	; 0x8006aa <uxTopReadyPriority>
 21e:	98 17       	cp	r25, r24
 220:	10 f4       	brcc	.+4      	; 0x226 <xTaskIncrementTick+0x152>
 222:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <uxTopReadyPriority>
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	dc 01       	movw	r26, r24
 22a:	aa 0f       	add	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	aa 0f       	add	r26, r26
 230:	bb 1f       	adc	r27, r27
 232:	aa 0f       	add	r26, r26
 234:	bb 1f       	adc	r27, r27
 236:	8a 0f       	add	r24, r26
 238:	9b 1f       	adc	r25, r27
 23a:	dc 01       	movw	r26, r24
 23c:	ae 5b       	subi	r26, 0xBE	; 190
 23e:	b9 4f       	sbci	r27, 0xF9	; 249
 240:	11 96       	adiw	r26, 0x01	; 1
 242:	0d 90       	ld	r0, X+
 244:	bc 91       	ld	r27, X
 246:	a0 2d       	mov	r26, r0
 248:	b5 83       	std	Z+5, r27	; 0x05
 24a:	a4 83       	std	Z+4, r26	; 0x04
 24c:	14 96       	adiw	r26, 0x04	; 4
 24e:	8d 91       	ld	r24, X+
 250:	9c 91       	ld	r25, X
 252:	15 97       	sbiw	r26, 0x05	; 5
 254:	97 83       	std	Z+7, r25	; 0x07
 256:	86 83       	std	Z+6, r24	; 0x06
 258:	14 96       	adiw	r26, 0x04	; 4
 25a:	8d 91       	ld	r24, X+
 25c:	9c 91       	ld	r25, X
 25e:	15 97       	sbiw	r26, 0x05	; 5
 260:	ec 01       	movw	r28, r24
 262:	3b 83       	std	Y+3, r19	; 0x03
 264:	2a 83       	std	Y+2, r18	; 0x02
 266:	15 96       	adiw	r26, 0x05	; 5
 268:	3c 93       	st	X, r19
 26a:	2e 93       	st	-X, r18
 26c:	14 97       	sbiw	r26, 0x04	; 4
 26e:	a6 89       	ldd	r26, Z+22	; 0x16
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	cd 01       	movw	r24, r26
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	a8 0f       	add	r26, r24
 282:	b9 1f       	adc	r27, r25
 284:	ae 5b       	subi	r26, 0xBE	; 190
 286:	b9 4f       	sbci	r27, 0xF9	; 249
 288:	b3 87       	std	Z+11, r27	; 0x0b
 28a:	a2 87       	std	Z+10, r26	; 0x0a
 28c:	8c 91       	ld	r24, X
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	8c 93       	st	X, r24
 292:	55 cf       	rjmp	.-342    	; 0x13e <xTaskIncrementTick+0x6a>
 294:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <xPendedTicks>
 298:	90 91 9c 06 	lds	r25, 0x069C	; 0x80069c <xPendedTicks+0x1>
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <xPendedTicks+0x1>
 2a2:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <xPendedTicks>
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	08 95       	ret

Disassembly of section .text.xTaskResumeAll:

000002b2 <xTaskResumeAll>:
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	0f 92       	push	r0
 2bc:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <uxSchedulerSuspended>
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <uxSchedulerSuspended>
 2c6:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <uxSchedulerSuspended>
 2ca:	81 11       	cpse	r24, r1
 2cc:	b9 c0       	rjmp	.+370    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 2ce:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <uxCurrentNumberOfTasks>
 2d2:	81 11       	cpse	r24, r1
 2d4:	96 c0       	rjmp	.+300    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 2d6:	b4 c0       	rjmp	.+360    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 2d8:	e0 91 7d 06 	lds	r30, 0x067D	; 0x80067d <xPendingReadyList+0x5>
 2dc:	f0 91 7e 06 	lds	r31, 0x067E	; 0x80067e <xPendingReadyList+0x6>
 2e0:	06 80       	ldd	r0, Z+6	; 0x06
 2e2:	f7 81       	ldd	r31, Z+7	; 0x07
 2e4:	e0 2d       	mov	r30, r0
 2e6:	a4 89       	ldd	r26, Z+20	; 0x14
 2e8:	b5 89       	ldd	r27, Z+21	; 0x15
 2ea:	c6 85       	ldd	r28, Z+14	; 0x0e
 2ec:	d7 85       	ldd	r29, Z+15	; 0x0f
 2ee:	80 89       	ldd	r24, Z+16	; 0x10
 2f0:	91 89       	ldd	r25, Z+17	; 0x11
 2f2:	9d 83       	std	Y+5, r25	; 0x05
 2f4:	8c 83       	std	Y+4, r24	; 0x04
 2f6:	c0 89       	ldd	r28, Z+16	; 0x10
 2f8:	d1 89       	ldd	r29, Z+17	; 0x11
 2fa:	86 85       	ldd	r24, Z+14	; 0x0e
 2fc:	97 85       	ldd	r25, Z+15	; 0x0f
 2fe:	9b 83       	std	Y+3, r25	; 0x03
 300:	8a 83       	std	Y+2, r24	; 0x02
 302:	11 96       	adiw	r26, 0x01	; 1
 304:	2d 91       	ld	r18, X+
 306:	3c 91       	ld	r19, X
 308:	12 97       	sbiw	r26, 0x02	; 2
 30a:	cf 01       	movw	r24, r30
 30c:	0c 96       	adiw	r24, 0x0c	; 12
 30e:	28 17       	cp	r18, r24
 310:	39 07       	cpc	r19, r25
 312:	31 f4       	brne	.+12     	; 0x320 <xTaskResumeAll+0x6e>
 314:	80 89       	ldd	r24, Z+16	; 0x10
 316:	91 89       	ldd	r25, Z+17	; 0x11
 318:	12 96       	adiw	r26, 0x02	; 2
 31a:	9c 93       	st	X, r25
 31c:	8e 93       	st	-X, r24
 31e:	11 97       	sbiw	r26, 0x01	; 1
 320:	15 8a       	std	Z+21, r1	; 0x15
 322:	14 8a       	std	Z+20, r1	; 0x14
 324:	8c 91       	ld	r24, X
 326:	81 50       	subi	r24, 0x01	; 1
 328:	8c 93       	st	X, r24
 32a:	a2 85       	ldd	r26, Z+10	; 0x0a
 32c:	b3 85       	ldd	r27, Z+11	; 0x0b
 32e:	c4 81       	ldd	r28, Z+4	; 0x04
 330:	d5 81       	ldd	r29, Z+5	; 0x05
 332:	86 81       	ldd	r24, Z+6	; 0x06
 334:	97 81       	ldd	r25, Z+7	; 0x07
 336:	9d 83       	std	Y+5, r25	; 0x05
 338:	8c 83       	std	Y+4, r24	; 0x04
 33a:	c6 81       	ldd	r28, Z+6	; 0x06
 33c:	d7 81       	ldd	r29, Z+7	; 0x07
 33e:	84 81       	ldd	r24, Z+4	; 0x04
 340:	95 81       	ldd	r25, Z+5	; 0x05
 342:	9b 83       	std	Y+3, r25	; 0x03
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	11 96       	adiw	r26, 0x01	; 1
 348:	8d 91       	ld	r24, X+
 34a:	9c 91       	ld	r25, X
 34c:	12 97       	sbiw	r26, 0x02	; 2
 34e:	9f 01       	movw	r18, r30
 350:	2e 5f       	subi	r18, 0xFE	; 254
 352:	3f 4f       	sbci	r19, 0xFF	; 255
 354:	82 17       	cp	r24, r18
 356:	93 07       	cpc	r25, r19
 358:	31 f4       	brne	.+12     	; 0x366 <xTaskResumeAll+0xb4>
 35a:	86 81       	ldd	r24, Z+6	; 0x06
 35c:	97 81       	ldd	r25, Z+7	; 0x07
 35e:	12 96       	adiw	r26, 0x02	; 2
 360:	9c 93       	st	X, r25
 362:	8e 93       	st	-X, r24
 364:	11 97       	sbiw	r26, 0x01	; 1
 366:	13 86       	std	Z+11, r1	; 0x0b
 368:	12 86       	std	Z+10, r1	; 0x0a
 36a:	8c 91       	ld	r24, X
 36c:	81 50       	subi	r24, 0x01	; 1
 36e:	8c 93       	st	X, r24
 370:	86 89       	ldd	r24, Z+22	; 0x16
 372:	90 91 aa 06 	lds	r25, 0x06AA	; 0x8006aa <uxTopReadyPriority>
 376:	98 17       	cp	r25, r24
 378:	10 f4       	brcc	.+4      	; 0x37e <xTaskResumeAll+0xcc>
 37a:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <uxTopReadyPriority>
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	dc 01       	movw	r26, r24
 382:	aa 0f       	add	r26, r26
 384:	bb 1f       	adc	r27, r27
 386:	aa 0f       	add	r26, r26
 388:	bb 1f       	adc	r27, r27
 38a:	aa 0f       	add	r26, r26
 38c:	bb 1f       	adc	r27, r27
 38e:	8a 0f       	add	r24, r26
 390:	9b 1f       	adc	r25, r27
 392:	dc 01       	movw	r26, r24
 394:	ae 5b       	subi	r26, 0xBE	; 190
 396:	b9 4f       	sbci	r27, 0xF9	; 249
 398:	11 96       	adiw	r26, 0x01	; 1
 39a:	0d 90       	ld	r0, X+
 39c:	bc 91       	ld	r27, X
 39e:	a0 2d       	mov	r26, r0
 3a0:	b5 83       	std	Z+5, r27	; 0x05
 3a2:	a4 83       	std	Z+4, r26	; 0x04
 3a4:	14 96       	adiw	r26, 0x04	; 4
 3a6:	8d 91       	ld	r24, X+
 3a8:	9c 91       	ld	r25, X
 3aa:	15 97       	sbiw	r26, 0x05	; 5
 3ac:	97 83       	std	Z+7, r25	; 0x07
 3ae:	86 83       	std	Z+6, r24	; 0x06
 3b0:	14 96       	adiw	r26, 0x04	; 4
 3b2:	cd 91       	ld	r28, X+
 3b4:	dc 91       	ld	r29, X
 3b6:	15 97       	sbiw	r26, 0x05	; 5
 3b8:	3b 83       	std	Y+3, r19	; 0x03
 3ba:	2a 83       	std	Y+2, r18	; 0x02
 3bc:	15 96       	adiw	r26, 0x05	; 5
 3be:	3c 93       	st	X, r19
 3c0:	2e 93       	st	-X, r18
 3c2:	14 97       	sbiw	r26, 0x04	; 4
 3c4:	a6 89       	ldd	r26, Z+22	; 0x16
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	cd 01       	movw	r24, r26
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	a8 0f       	add	r26, r24
 3d8:	b9 1f       	adc	r27, r25
 3da:	ae 5b       	subi	r26, 0xBE	; 190
 3dc:	b9 4f       	sbci	r27, 0xF9	; 249
 3de:	b3 87       	std	Z+11, r27	; 0x0b
 3e0:	a2 87       	std	Z+10, r26	; 0x0a
 3e2:	8c 91       	ld	r24, X
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	8c 93       	st	X, r24
 3e8:	96 89       	ldd	r25, Z+22	; 0x16
 3ea:	a0 91 a3 06 	lds	r26, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 3ee:	b0 91 a4 06 	lds	r27, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 3f2:	56 96       	adiw	r26, 0x16	; 22
 3f4:	8c 91       	ld	r24, X
 3f6:	98 17       	cp	r25, r24
 3f8:	30 f0       	brcs	.+12     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <xYieldPending>
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	e0 e0       	ldi	r30, 0x00	; 0
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <xPendingReadyList>
 40a:	81 11       	cpse	r24, r1
 40c:	65 cf       	rjmp	.-310    	; 0x2d8 <xTaskResumeAll+0x26>
 40e:	ef 2b       	or	r30, r31
 410:	11 f0       	breq	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	0e 94 45 0c 	call	0x188a	; 0x188a <prvResetNextTaskUnblockTime>
 416:	c0 91 9b 06 	lds	r28, 0x069B	; 0x80069b <xPendedTicks>
 41a:	d0 91 9c 06 	lds	r29, 0x069C	; 0x80069c <xPendedTicks+0x1>
 41e:	20 97       	sbiw	r28, 0x00	; 0
 420:	69 f0       	breq	.+26     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 422:	0e 94 6a 00 	call	0xd4	; 0xd4 <xTaskIncrementTick>
 426:	88 23       	and	r24, r24
 428:	19 f0       	breq	.+6      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <xYieldPending>
 430:	21 97       	sbiw	r28, 0x01	; 1
 432:	b9 f7       	brne	.-18     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 434:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <xPendedTicks+0x1>
 438:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <xPendedTicks>
 43c:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <xYieldPending>
 440:	0f 90       	pop	r0
 442:	0f be       	out	0x3f, r0	; 63
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

Disassembly of section .text.xTaskDelayUntil:

00001168 <xTaskDelayUntil>:
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	8c 01       	movw	r16, r24
    1172:	eb 01       	movw	r28, r22
    1174:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <vTaskSuspendAll>
    1178:	40 91 9d 06 	lds	r20, 0x069D	; 0x80069d <xTickCount>
    117c:	50 91 9e 06 	lds	r21, 0x069E	; 0x80069e <xTickCount+0x1>
    1180:	f8 01       	movw	r30, r16
    1182:	20 81       	ld	r18, Z
    1184:	31 81       	ldd	r19, Z+1	; 0x01
    1186:	c9 01       	movw	r24, r18
    1188:	8c 0f       	add	r24, r28
    118a:	9d 1f       	adc	r25, r29
    118c:	42 17       	cp	r20, r18
    118e:	53 07       	cpc	r21, r19
    1190:	40 f4       	brcc	.+16     	; 0x11a2 <xTaskDelayUntil+0x3a>
    1192:	82 17       	cp	r24, r18
    1194:	93 07       	cpc	r25, r19
    1196:	68 f4       	brcc	.+26     	; 0x11b2 <xTaskDelayUntil+0x4a>
    1198:	48 17       	cp	r20, r24
    119a:	59 07       	cpc	r21, r25
    119c:	60 f0       	brcs	.+24     	; 0x11b6 <xTaskDelayUntil+0x4e>
    119e:	c0 e0       	ldi	r28, 0x00	; 0
    11a0:	0f c0       	rjmp	.+30     	; 0x11c0 <xTaskDelayUntil+0x58>
    11a2:	82 17       	cp	r24, r18
    11a4:	93 07       	cpc	r25, r19
    11a6:	48 f0       	brcs	.+18     	; 0x11ba <xTaskDelayUntil+0x52>
    11a8:	48 17       	cp	r20, r24
    11aa:	59 07       	cpc	r21, r25
    11ac:	40 f0       	brcs	.+16     	; 0x11be <xTaskDelayUntil+0x56>
    11ae:	c0 e0       	ldi	r28, 0x00	; 0
    11b0:	07 c0       	rjmp	.+14     	; 0x11c0 <xTaskDelayUntil+0x58>
    11b2:	c0 e0       	ldi	r28, 0x00	; 0
    11b4:	05 c0       	rjmp	.+10     	; 0x11c0 <xTaskDelayUntil+0x58>
    11b6:	c1 e0       	ldi	r28, 0x01	; 1
    11b8:	03 c0       	rjmp	.+6      	; 0x11c0 <xTaskDelayUntil+0x58>
    11ba:	c1 e0       	ldi	r28, 0x01	; 1
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <xTaskDelayUntil+0x58>
    11be:	c1 e0       	ldi	r28, 0x01	; 1
    11c0:	f8 01       	movw	r30, r16
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	80 83       	st	Z, r24
    11c6:	cc 23       	and	r28, r28
    11c8:	29 f0       	breq	.+10     	; 0x11d4 <xTaskDelayUntil+0x6c>
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	84 1b       	sub	r24, r20
    11ce:	95 0b       	sbc	r25, r21
    11d0:	0e 94 17 04 	call	0x82e	; 0x82e <prvAddCurrentTaskToDelayedList>
    11d4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <xTaskResumeAll>
    11d8:	81 11       	cpse	r24, r1
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <xTaskDelayUntil+0x78>
    11dc:	0e 94 2d 07 	call	0xe5a	; 0xe5a <vPortYield>
    11e0:	8c 2f       	mov	r24, r28
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	08 95       	ret

Disassembly of section .text.vTaskSwitchContext:

00000f0c <vTaskSwitchContext>:
 f0c:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <uxSchedulerSuspended>
 f10:	88 23       	and	r24, r24
 f12:	21 f0       	breq	.+8      	; 0xf1c <vTaskSwitchContext+0x10>
 f14:	81 e0       	ldi	r24, 0x01	; 1
 f16:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <xYieldPending>
 f1a:	08 95       	ret
 f1c:	10 92 a8 06 	sts	0x06A8, r1	; 0x8006a8 <xYieldPending>
 f20:	20 91 aa 06 	lds	r18, 0x06AA	; 0x8006aa <uxTopReadyPriority>
 f24:	01 c0       	rjmp	.+2      	; 0xf28 <vTaskSwitchContext+0x1c>
 f26:	21 50       	subi	r18, 0x01	; 1
 f28:	82 2f       	mov	r24, r18
 f2a:	90 e0       	ldi	r25, 0x00	; 0
 f2c:	fc 01       	movw	r30, r24
 f2e:	ee 0f       	add	r30, r30
 f30:	ff 1f       	adc	r31, r31
 f32:	ee 0f       	add	r30, r30
 f34:	ff 1f       	adc	r31, r31
 f36:	ee 0f       	add	r30, r30
 f38:	ff 1f       	adc	r31, r31
 f3a:	e8 0f       	add	r30, r24
 f3c:	f9 1f       	adc	r31, r25
 f3e:	ee 5b       	subi	r30, 0xBE	; 190
 f40:	f9 4f       	sbci	r31, 0xF9	; 249
 f42:	30 81       	ld	r19, Z
 f44:	33 23       	and	r19, r19
 f46:	79 f3       	breq	.-34     	; 0xf26 <vTaskSwitchContext+0x1a>
 f48:	ac 01       	movw	r20, r24
 f4a:	44 0f       	add	r20, r20
 f4c:	55 1f       	adc	r21, r21
 f4e:	44 0f       	add	r20, r20
 f50:	55 1f       	adc	r21, r21
 f52:	44 0f       	add	r20, r20
 f54:	55 1f       	adc	r21, r21
 f56:	48 0f       	add	r20, r24
 f58:	59 1f       	adc	r21, r25
 f5a:	df 01       	movw	r26, r30
 f5c:	01 80       	ldd	r0, Z+1	; 0x01
 f5e:	f2 81       	ldd	r31, Z+2	; 0x02
 f60:	e0 2d       	mov	r30, r0
 f62:	02 80       	ldd	r0, Z+2	; 0x02
 f64:	f3 81       	ldd	r31, Z+3	; 0x03
 f66:	e0 2d       	mov	r30, r0
 f68:	12 96       	adiw	r26, 0x02	; 2
 f6a:	fc 93       	st	X, r31
 f6c:	ee 93       	st	-X, r30
 f6e:	11 97       	sbiw	r26, 0x01	; 1
 f70:	4b 5b       	subi	r20, 0xBB	; 187
 f72:	59 4f       	sbci	r21, 0xF9	; 249
 f74:	e4 17       	cp	r30, r20
 f76:	f5 07       	cpc	r31, r21
 f78:	29 f4       	brne	.+10     	; 0xf84 <vTaskSwitchContext+0x78>
 f7a:	42 81       	ldd	r20, Z+2	; 0x02
 f7c:	53 81       	ldd	r21, Z+3	; 0x03
 f7e:	fd 01       	movw	r30, r26
 f80:	52 83       	std	Z+2, r21	; 0x02
 f82:	41 83       	std	Z+1, r20	; 0x01
 f84:	fc 01       	movw	r30, r24
 f86:	ee 0f       	add	r30, r30
 f88:	ff 1f       	adc	r31, r31
 f8a:	ee 0f       	add	r30, r30
 f8c:	ff 1f       	adc	r31, r31
 f8e:	ee 0f       	add	r30, r30
 f90:	ff 1f       	adc	r31, r31
 f92:	8e 0f       	add	r24, r30
 f94:	9f 1f       	adc	r25, r31
 f96:	fc 01       	movw	r30, r24
 f98:	ee 5b       	subi	r30, 0xBE	; 190
 f9a:	f9 4f       	sbci	r31, 0xF9	; 249
 f9c:	01 80       	ldd	r0, Z+1	; 0x01
 f9e:	f2 81       	ldd	r31, Z+2	; 0x02
 fa0:	e0 2d       	mov	r30, r0
 fa2:	86 81       	ldd	r24, Z+6	; 0x06
 fa4:	97 81       	ldd	r25, Z+7	; 0x07
 fa6:	90 93 a4 06 	sts	0x06A4, r25	; 0x8006a4 <pxCurrentTCB+0x1>
 faa:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <pxCurrentTCB>
 fae:	20 93 aa 06 	sts	0x06AA, r18	; 0x8006aa <uxTopReadyPriority>
 fb2:	08 95       	ret

Disassembly of section .text.vTaskPlaceOnEventList:

000019fc <vTaskPlaceOnEventList>:
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	eb 01       	movw	r28, r22
    1a02:	60 91 a3 06 	lds	r22, 0x06A3	; 0x8006a3 <pxCurrentTCB>
    1a06:	70 91 a4 06 	lds	r23, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
    1a0a:	64 5f       	subi	r22, 0xF4	; 244
    1a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0e:	0e 94 be 0a 	call	0x157c	; 0x157c <vListInsert>
    1a12:	61 e0       	ldi	r22, 0x01	; 1
    1a14:	ce 01       	movw	r24, r28
    1a16:	0e 94 17 04 	call	0x82e	; 0x82e <prvAddCurrentTaskToDelayedList>
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	08 95       	ret

Disassembly of section .text.xTaskRemoveFromEventList:

0000044c <xTaskRemoveFromEventList>:
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	a8 2f       	mov	r26, r24
 452:	cb 01       	movw	r24, r22
 454:	05 96       	adiw	r24, 0x05	; 5
 456:	a1 1d       	adc	r26, r1
 458:	fc 01       	movw	r30, r24
 45a:	5a 2f       	mov	r21, r26
 45c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__xload_2>
 460:	db 01       	movw	r26, r22
 462:	16 96       	adiw	r26, 0x06	; 6
 464:	ed 91       	ld	r30, X+
 466:	fc 91       	ld	r31, X
 468:	17 97       	sbiw	r26, 0x07	; 7
 46a:	a4 89       	ldd	r26, Z+20	; 0x14
 46c:	b5 89       	ldd	r27, Z+21	; 0x15
 46e:	c6 85       	ldd	r28, Z+14	; 0x0e
 470:	d7 85       	ldd	r29, Z+15	; 0x0f
 472:	80 89       	ldd	r24, Z+16	; 0x10
 474:	91 89       	ldd	r25, Z+17	; 0x11
 476:	9d 83       	std	Y+5, r25	; 0x05
 478:	8c 83       	std	Y+4, r24	; 0x04
 47a:	c0 89       	ldd	r28, Z+16	; 0x10
 47c:	d1 89       	ldd	r29, Z+17	; 0x11
 47e:	86 85       	ldd	r24, Z+14	; 0x0e
 480:	97 85       	ldd	r25, Z+15	; 0x0f
 482:	9b 83       	std	Y+3, r25	; 0x03
 484:	8a 83       	std	Y+2, r24	; 0x02
 486:	11 96       	adiw	r26, 0x01	; 1
 488:	8d 91       	ld	r24, X+
 48a:	9c 91       	ld	r25, X
 48c:	12 97       	sbiw	r26, 0x02	; 2
 48e:	9f 01       	movw	r18, r30
 490:	24 5f       	subi	r18, 0xF4	; 244
 492:	3f 4f       	sbci	r19, 0xFF	; 255
 494:	82 17       	cp	r24, r18
 496:	93 07       	cpc	r25, r19
 498:	31 f4       	brne	.+12     	; 0x4a6 <xTaskRemoveFromEventList+0x5a>
 49a:	80 89       	ldd	r24, Z+16	; 0x10
 49c:	91 89       	ldd	r25, Z+17	; 0x11
 49e:	12 96       	adiw	r26, 0x02	; 2
 4a0:	9c 93       	st	X, r25
 4a2:	8e 93       	st	-X, r24
 4a4:	11 97       	sbiw	r26, 0x01	; 1
 4a6:	15 8a       	std	Z+21, r1	; 0x15
 4a8:	14 8a       	std	Z+20, r1	; 0x14
 4aa:	8c 91       	ld	r24, X
 4ac:	81 50       	subi	r24, 0x01	; 1
 4ae:	8c 93       	st	X, r24
 4b0:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <uxSchedulerSuspended>
 4b4:	81 11       	cpse	r24, r1
 4b6:	60 c0       	rjmp	.+192    	; 0x578 <xTaskRemoveFromEventList+0x12c>
 4b8:	a2 85       	ldd	r26, Z+10	; 0x0a
 4ba:	b3 85       	ldd	r27, Z+11	; 0x0b
 4bc:	c4 81       	ldd	r28, Z+4	; 0x04
 4be:	d5 81       	ldd	r29, Z+5	; 0x05
 4c0:	86 81       	ldd	r24, Z+6	; 0x06
 4c2:	97 81       	ldd	r25, Z+7	; 0x07
 4c4:	9d 83       	std	Y+5, r25	; 0x05
 4c6:	8c 83       	std	Y+4, r24	; 0x04
 4c8:	c6 81       	ldd	r28, Z+6	; 0x06
 4ca:	d7 81       	ldd	r29, Z+7	; 0x07
 4cc:	84 81       	ldd	r24, Z+4	; 0x04
 4ce:	95 81       	ldd	r25, Z+5	; 0x05
 4d0:	9b 83       	std	Y+3, r25	; 0x03
 4d2:	8a 83       	std	Y+2, r24	; 0x02
 4d4:	11 96       	adiw	r26, 0x01	; 1
 4d6:	8d 91       	ld	r24, X+
 4d8:	9c 91       	ld	r25, X
 4da:	12 97       	sbiw	r26, 0x02	; 2
 4dc:	9f 01       	movw	r18, r30
 4de:	2e 5f       	subi	r18, 0xFE	; 254
 4e0:	3f 4f       	sbci	r19, 0xFF	; 255
 4e2:	82 17       	cp	r24, r18
 4e4:	93 07       	cpc	r25, r19
 4e6:	31 f4       	brne	.+12     	; 0x4f4 <xTaskRemoveFromEventList+0xa8>
 4e8:	86 81       	ldd	r24, Z+6	; 0x06
 4ea:	97 81       	ldd	r25, Z+7	; 0x07
 4ec:	12 96       	adiw	r26, 0x02	; 2
 4ee:	9c 93       	st	X, r25
 4f0:	8e 93       	st	-X, r24
 4f2:	11 97       	sbiw	r26, 0x01	; 1
 4f4:	13 86       	std	Z+11, r1	; 0x0b
 4f6:	12 86       	std	Z+10, r1	; 0x0a
 4f8:	8c 91       	ld	r24, X
 4fa:	81 50       	subi	r24, 0x01	; 1
 4fc:	8c 93       	st	X, r24
 4fe:	86 89       	ldd	r24, Z+22	; 0x16
 500:	90 91 aa 06 	lds	r25, 0x06AA	; 0x8006aa <uxTopReadyPriority>
 504:	98 17       	cp	r25, r24
 506:	10 f4       	brcc	.+4      	; 0x50c <xTaskRemoveFromEventList+0xc0>
 508:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <uxTopReadyPriority>
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	dc 01       	movw	r26, r24
 510:	aa 0f       	add	r26, r26
 512:	bb 1f       	adc	r27, r27
 514:	aa 0f       	add	r26, r26
 516:	bb 1f       	adc	r27, r27
 518:	aa 0f       	add	r26, r26
 51a:	bb 1f       	adc	r27, r27
 51c:	8a 0f       	add	r24, r26
 51e:	9b 1f       	adc	r25, r27
 520:	dc 01       	movw	r26, r24
 522:	ae 5b       	subi	r26, 0xBE	; 190
 524:	b9 4f       	sbci	r27, 0xF9	; 249
 526:	11 96       	adiw	r26, 0x01	; 1
 528:	0d 90       	ld	r0, X+
 52a:	bc 91       	ld	r27, X
 52c:	a0 2d       	mov	r26, r0
 52e:	b5 83       	std	Z+5, r27	; 0x05
 530:	a4 83       	std	Z+4, r26	; 0x04
 532:	14 96       	adiw	r26, 0x04	; 4
 534:	8d 91       	ld	r24, X+
 536:	9c 91       	ld	r25, X
 538:	15 97       	sbiw	r26, 0x05	; 5
 53a:	97 83       	std	Z+7, r25	; 0x07
 53c:	86 83       	std	Z+6, r24	; 0x06
 53e:	14 96       	adiw	r26, 0x04	; 4
 540:	cd 91       	ld	r28, X+
 542:	dc 91       	ld	r29, X
 544:	15 97       	sbiw	r26, 0x05	; 5
 546:	3b 83       	std	Y+3, r19	; 0x03
 548:	2a 83       	std	Y+2, r18	; 0x02
 54a:	15 96       	adiw	r26, 0x05	; 5
 54c:	3c 93       	st	X, r19
 54e:	2e 93       	st	-X, r18
 550:	14 97       	sbiw	r26, 0x04	; 4
 552:	a6 89       	ldd	r26, Z+22	; 0x16
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	cd 01       	movw	r24, r26
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	a8 0f       	add	r26, r24
 566:	b9 1f       	adc	r27, r25
 568:	ae 5b       	subi	r26, 0xBE	; 190
 56a:	b9 4f       	sbci	r27, 0xF9	; 249
 56c:	b3 87       	std	Z+11, r27	; 0x0b
 56e:	a2 87       	std	Z+10, r26	; 0x0a
 570:	8c 91       	ld	r24, X
 572:	8f 5f       	subi	r24, 0xFF	; 255
 574:	8c 93       	st	X, r24
 576:	1c c0       	rjmp	.+56     	; 0x5b0 <xTaskRemoveFromEventList+0x164>
 578:	48 e7       	ldi	r20, 0x78	; 120
 57a:	56 e0       	ldi	r21, 0x06	; 6
 57c:	da 01       	movw	r26, r20
 57e:	11 96       	adiw	r26, 0x01	; 1
 580:	cd 91       	ld	r28, X+
 582:	dc 91       	ld	r29, X
 584:	12 97       	sbiw	r26, 0x02	; 2
 586:	d7 87       	std	Z+15, r29	; 0x0f
 588:	c6 87       	std	Z+14, r28	; 0x0e
 58a:	8c 81       	ldd	r24, Y+4	; 0x04
 58c:	9d 81       	ldd	r25, Y+5	; 0x05
 58e:	91 8b       	std	Z+17, r25	; 0x11
 590:	80 8b       	std	Z+16, r24	; 0x10
 592:	8c 81       	ldd	r24, Y+4	; 0x04
 594:	9d 81       	ldd	r25, Y+5	; 0x05
 596:	dc 01       	movw	r26, r24
 598:	13 96       	adiw	r26, 0x03	; 3
 59a:	3c 93       	st	X, r19
 59c:	2e 93       	st	-X, r18
 59e:	12 97       	sbiw	r26, 0x02	; 2
 5a0:	3d 83       	std	Y+5, r19	; 0x05
 5a2:	2c 83       	std	Y+4, r18	; 0x04
 5a4:	55 8b       	std	Z+21, r21	; 0x15
 5a6:	44 8b       	std	Z+20, r20	; 0x14
 5a8:	da 01       	movw	r26, r20
 5aa:	8c 91       	ld	r24, X
 5ac:	8f 5f       	subi	r24, 0xFF	; 255
 5ae:	8c 93       	st	X, r24
 5b0:	96 89       	ldd	r25, Z+22	; 0x16
 5b2:	e0 91 a3 06 	lds	r30, 0x06A3	; 0x8006a3 <pxCurrentTCB>
 5b6:	f0 91 a4 06 	lds	r31, 0x06A4	; 0x8006a4 <pxCurrentTCB+0x1>
 5ba:	86 89       	ldd	r24, Z+22	; 0x16
 5bc:	89 17       	cp	r24, r25
 5be:	20 f4       	brcc	.+8      	; 0x5c8 <xTaskRemoveFromEventList+0x17c>
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <xYieldPending>
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <xTaskRemoveFromEventList+0x17e>
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	08 95       	ret

Disassembly of section .text.vTaskInternalSetTimeOutState:

00001a56 <vTaskInternalSetTimeOutState>:
    1a56:	20 91 a7 06 	lds	r18, 0x06A7	; 0x8006a7 <xNumOfOverflows>
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	20 83       	st	Z, r18
    1a5e:	20 91 9d 06 	lds	r18, 0x069D	; 0x80069d <xTickCount>
    1a62:	30 91 9e 06 	lds	r19, 0x069E	; 0x80069e <xTickCount+0x1>
    1a66:	32 83       	std	Z+2, r19	; 0x02
    1a68:	21 83       	std	Z+1, r18	; 0x01
    1a6a:	08 95       	ret

Disassembly of section .text.xTaskCheckForTimeOut:

0000126e <xTaskCheckForTimeOut>:
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	0f 92       	push	r0
    127a:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <xTickCount>
    127e:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <xTickCount+0x1>
    1282:	dc 01       	movw	r26, r24
    1284:	11 96       	adiw	r26, 0x01	; 1
    1286:	4d 91       	ld	r20, X+
    1288:	5c 91       	ld	r21, X
    128a:	12 97       	sbiw	r26, 0x02	; 2
    128c:	df 01       	movw	r26, r30
    128e:	a4 1b       	sub	r26, r20
    1290:	b5 0b       	sbc	r27, r21
    1292:	eb 01       	movw	r28, r22
    1294:	28 81       	ld	r18, Y
    1296:	39 81       	ldd	r19, Y+1	; 0x01
    1298:	2f 3f       	cpi	r18, 0xFF	; 255
    129a:	df ef       	ldi	r29, 0xFF	; 255
    129c:	3d 07       	cpc	r19, r29
    129e:	f9 f0       	breq	.+62     	; 0x12de <xTaskCheckForTimeOut+0x70>
    12a0:	ec 01       	movw	r28, r24
    12a2:	18 81       	ld	r17, Y
    12a4:	c0 91 a7 06 	lds	r28, 0x06A7	; 0x8006a7 <xNumOfOverflows>
    12a8:	1c 17       	cp	r17, r28
    12aa:	41 f0       	breq	.+16     	; 0x12bc <xTaskCheckForTimeOut+0x4e>
    12ac:	e4 17       	cp	r30, r20
    12ae:	f5 07       	cpc	r31, r21
    12b0:	28 f0       	brcs	.+10     	; 0x12bc <xTaskCheckForTimeOut+0x4e>
    12b2:	fb 01       	movw	r30, r22
    12b4:	11 82       	std	Z+1, r1	; 0x01
    12b6:	10 82       	st	Z, r1
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	12 c0       	rjmp	.+36     	; 0x12e0 <xTaskCheckForTimeOut+0x72>
    12bc:	a2 17       	cp	r26, r18
    12be:	b3 07       	cpc	r27, r19
    12c0:	48 f4       	brcc	.+18     	; 0x12d4 <xTaskCheckForTimeOut+0x66>
    12c2:	fb 01       	movw	r30, r22
    12c4:	2a 1b       	sub	r18, r26
    12c6:	3b 0b       	sbc	r19, r27
    12c8:	31 83       	std	Z+1, r19	; 0x01
    12ca:	20 83       	st	Z, r18
    12cc:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <vTaskInternalSetTimeOutState>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	06 c0       	rjmp	.+12     	; 0x12e0 <xTaskCheckForTimeOut+0x72>
    12d4:	db 01       	movw	r26, r22
    12d6:	1d 92       	st	X+, r1
    12d8:	1c 92       	st	X, r1
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <xTaskCheckForTimeOut+0x72>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	0f 90       	pop	r0
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	08 95       	ret

Disassembly of section .text.vTaskMissedYield:

00001ae0 <vTaskMissedYield>:
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <xYieldPending>
    1ae6:	08 95       	ret

Disassembly of section .text.libgcc.div:

000019ae <__udivmodhi4>:
    19ae:	aa 1b       	sub	r26, r26
    19b0:	bb 1b       	sub	r27, r27
    19b2:	51 e1       	ldi	r21, 0x11	; 17
    19b4:	07 c0       	rjmp	.+14     	; 0x19c4 <__udivmodhi4_ep>

000019b6 <__udivmodhi4_loop>:
    19b6:	aa 1f       	adc	r26, r26
    19b8:	bb 1f       	adc	r27, r27
    19ba:	a6 17       	cp	r26, r22
    19bc:	b7 07       	cpc	r27, r23
    19be:	10 f0       	brcs	.+4      	; 0x19c4 <__udivmodhi4_ep>
    19c0:	a6 1b       	sub	r26, r22
    19c2:	b7 0b       	sbc	r27, r23

000019c4 <__udivmodhi4_ep>:
    19c4:	88 1f       	adc	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	5a 95       	dec	r21
    19ca:	a9 f7       	brne	.-22     	; 0x19b6 <__udivmodhi4_loop>
    19cc:	80 95       	com	r24
    19ce:	90 95       	com	r25
    19d0:	bc 01       	movw	r22, r24
    19d2:	cd 01       	movw	r24, r26
    19d4:	08 95       	ret

Disassembly of section .text.libgcc:

00001aa8 <__xload_2>:
    1aa8:	57 fd       	sbrc	r21, 7
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <__xload_2+0xa>
    1aac:	65 91       	lpm	r22, Z+
    1aae:	75 91       	lpm	r23, Z+
    1ab0:	08 95       	ret
    1ab2:	61 91       	ld	r22, Z+
    1ab4:	71 91       	ld	r23, Z+
    1ab6:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00001af8 <_fini>:
    1af8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00001afa <__funcs_on_exit>:
    1afa:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00001afc <__simulator_exit>:
    1afc:	08 95       	ret

Disassembly of section .text.exit:

00001a6c <exit>:
    1a6c:	ec 01       	movw	r28, r24
    1a6e:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__funcs_on_exit>
    1a72:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_fini>
    1a76:	ce 01       	movw	r24, r28
    1a78:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__simulator_exit>
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_Exit>

Disassembly of section .text.memcpy:

0000192a <memcpy>:
    192a:	cf 92       	push	r12
    192c:	df 92       	push	r13
    192e:	ef 92       	push	r14
    1930:	6a 01       	movw	r12, r20
    1932:	e6 2e       	mov	r14, r22
    1934:	dc 01       	movw	r26, r24
    1936:	28 0f       	add	r18, r24
    1938:	39 1f       	adc	r19, r25
    193a:	a2 17       	cp	r26, r18
    193c:	b3 07       	cpc	r27, r19
    193e:	51 f0       	breq	.+20     	; 0x1954 <memcpy+0x2a>
    1940:	f6 01       	movw	r30, r12
    1942:	44 91       	lpm	r20, Z
    1944:	e7 fc       	sbrc	r14, 7
    1946:	40 81       	ld	r20, Z
    1948:	4d 93       	st	X+, r20
    194a:	4f ef       	ldi	r20, 0xFF	; 255
    194c:	c4 1a       	sub	r12, r20
    194e:	d4 0a       	sbc	r13, r20
    1950:	e4 0a       	sbc	r14, r20
    1952:	f3 cf       	rjmp	.-26     	; 0x193a <memcpy+0x10>
    1954:	ef 90       	pop	r14
    1956:	df 90       	pop	r13
    1958:	cf 90       	pop	r12
    195a:	08 95       	ret

Disassembly of section .text._Exit:

00001af2 <_Exit>:
    1af2:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
