
Lec8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  00000188  2**0
                  ALLOC
  2 .bss          00000002  00800060  00800060  0000142e  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  0000145d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a12  00000000  00000000  00001773  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e8b  00000000  00000000  00006185  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d7f  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000910  00000000  00000000  00008d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fd  00000000  00000000  000096a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002fc4  00000000  00000000  00009b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000cb61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000134a  0000134a  0000141e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000ce3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.EXTI0_init 0000001a  000012ce  000012ce  000013a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.pvPortMalloc 00000074  00000e50  00000e50  00000f24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.vPortFree 00000002  00001352  00001352  00001426  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.pucAlignedHeap.2094 00000002  0080068f  0080068f  0000142e  2**0
                  ALLOC
 19 .bss.xNextFreeByte 00000002  00800691  00800691  0000142e  2**0
                  ALLOC
 20 .bss.ucHeap   000005dc  00800062  00800062  0000142e  2**0
                  ALLOC
 21 .text.HLCD_vsendData 00000068  00000f32  00000f32  00001006  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.HLCD_vsendCommand 00000068  00000f9a  00000f9a  0000106e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.HLCD_vInit 00000076  00000dda  00000dda  00000eae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.vListInitialise 0000001c  00001296  00001296  0000136a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.vListInitialiseItem 00000008  00001336  00001336  0000140a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.vListInsert 00000062  00001002  00001002  000010d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.uxListRemove 0000004e  00001176  00001176  0000124a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.task1   0000001c  000012b2  000012b2  00001386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.main    0000004e  000011c4  000011c4  00001298  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_1 00000056  00001120  00001120  000011f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.prvSetupTimerInterrupt 00000012  00001318  00001318  000013ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.pxPortInitialiseStack 000000d8  00000af0  00000af0  00000bc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.xPortStartScheduler 0000005e  00001064  00001064  00001138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.vPortYield 000000b2  00000c80  00000c80  00000d54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.vPortYieldFromTick 000000b8  00000bc8  00000bc8  00000c9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_7 00000006  0000133e  0000133e  00001412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.prvResetNextTaskUnblockTime 00000038  0000125e  0000125e  00001332  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.prvDeleteTCB 0000001a  000012e8  000012e8  000013bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.prvInitialiseNewTask 000000ea  00000928  00000928  000009fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.prvInitialiseTaskLists 0000006e  00000ec4  00000ec4  00000f98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.prvAddNewTaskToReadyList 000000fa  0000082e  0000082e  00000902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.prvCheckTasksWaitingTermination 0000004c  00001212  00001212  000012e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.prvIdleTask 00000006  00001344  00001344  00001418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.prvAddCurrentTaskToDelayedList 00000102  0000072c  0000072c  00000800  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.xTaskCreate 000000de  00000a12  00000a12  00000ae6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .progmemx.data 00000006  000000ae  000000ae  00000182  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 47 .text.vTaskStartScheduler 0000005e  000010c2  000010c2  00001196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.vTaskSuspendAll 0000000c  0000132a  0000132a  000013fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.xTaskIncrementTick 00000234  000000b4  000000b4  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.xTaskResumeAll 000001aa  000002e8  000002e8  000003bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.vTaskSwitchContext 000000a8  00000d32  00000d32  00000e06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.ulTaskGenericNotifyTake 00000106  00000626  00000626  000006fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.vTaskGenericNotifyGiveFromISR 00000194  00000492  00000492  00000566  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .bss.uxSchedulerSuspended 00000001  008006a1  008006a1  0000142e  2**0
                  ALLOC
 55 .bss.xIdleTaskHandle 00000002  00800693  00800693  0000142e  2**0
                  ALLOC
 56 .bss.xNextTaskUnblockTime 00000002  00800695  00800695  0000142e  2**0
                  ALLOC
 57 .bss.uxTaskNumber 00000001  008006a2  008006a2  0000142e  2**0
                  ALLOC
 58 .bss.xNumOfOverflows 00000001  008006a3  008006a3  0000142e  2**0
                  ALLOC
 59 .bss.xYieldPending 00000001  008006a4  008006a4  0000142e  2**0
                  ALLOC
 60 .bss.xPendedTicks 00000002  00800697  00800697  0000142e  2**0
                  ALLOC
 61 .bss.xSchedulerRunning 00000001  008006a5  008006a5  0000142e  2**0
                  ALLOC
 62 .bss.uxTopReadyPriority 00000001  008006a6  008006a6  0000142e  2**0
                  ALLOC
 63 .bss.xTickCount 00000002  00800699  00800699  0000142e  2**0
                  ALLOC
 64 .bss.uxCurrentNumberOfTasks 00000001  008006a7  008006a7  0000142e  2**0
                  ALLOC
 65 .bss.xSuspendedTaskList 00000009  00800662  00800662  0000142e  2**0
                  ALLOC
 66 .bss.uxDeletedTasksWaitingCleanUp 00000001  008006a8  008006a8  0000142e  2**0
                  ALLOC
 67 .bss.xTasksWaitingTermination 00000009  0080066b  0080066b  0000142e  2**0
                  ALLOC
 68 .bss.xPendingReadyList 00000009  00800674  00800674  0000142e  2**0
                  ALLOC
 69 .bss.pxOverflowDelayedTaskList 00000002  0080069b  0080069b  0000142e  2**0
                  ALLOC
 70 .bss.pxDelayedTaskList 00000002  0080069d  0080069d  0000142e  2**0
                  ALLOC
 71 .bss.xDelayedTaskList2 00000009  0080067d  0080067d  0000142e  2**0
                  ALLOC
 72 .bss.xDelayedTaskList1 00000009  00800686  00800686  0000142e  2**0
                  ALLOC
 73 .bss.pxReadyTasksLists 00000024  0080063e  0080063e  0000142e  2**0
                  ALLOC
 74 .bss.pxCurrentTCB 00000002  0080069f  0080069f  0000142e  2**0
                  ALLOC
 75 .text.__dummy_fini 00000002  00001354  00001354  00001428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__dummy_funcs_on_exit 00000002  00001356  00001356  0000142a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__dummy_simulator_exit 00000002  00001358  00001358  0000142c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.exit    00000016  00001302  00001302  000013d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text._Exit   00000004  0000134e  0000134e  00001422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_1>
   8:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
   c:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  10:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  14:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  18:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  1c:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_7>
  20:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  24:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  28:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  2c:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  30:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  34:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  38:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  3c:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  40:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  44:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  48:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  4c:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>
  50:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	06 a9       	ldd	r16, Z+54	; 0x36
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <main>
  a6:	0c 94 81 09 	jmp	0x1302	; 0x1302 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

0000134a <__bad_interrupt>:
    134a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.EXTI0_init:

000012ce <EXTI0_init>:
    // anyLogical 
    SET_BIT(EXTI_MCUCR,0);
    CLEAR_BIT(EXTI_MCUCR,1);
#elif MODE == FALLING_EDGE
    // Falling Edge
    SET_BIT(EXTI_MCUCR,1);
    12ce:	85 b7       	in	r24, 0x35	; 53
    12d0:	82 60       	ori	r24, 0x02	; 2
    12d2:	85 bf       	out	0x35, r24	; 53
    CLEAR_BIT(EXTI_MCUCR,0);
    12d4:	85 b7       	in	r24, 0x35	; 53
    12d6:	8e 7f       	andi	r24, 0xFE	; 254
    12d8:	85 bf       	out	0x35, r24	; 53
#elif MODE == RISING_EDGE
    // Rising Edge
    SET_BIT(EXTI_MCUCR,0);
    SET_BIT(EXTI_MCUCR,1);
#endif
SET_BIT(SREG,7);
    12da:	8f b7       	in	r24, 0x3f	; 63
    12dc:	80 68       	ori	r24, 0x80	; 128
    12de:	8f bf       	out	0x3f, r24	; 63
SET_BIT(EXTI_GICR,6);
    12e0:	8b b7       	in	r24, 0x3b	; 59
    12e2:	80 64       	ori	r24, 0x40	; 64
    12e4:	8b bf       	out	0x3b, r24	; 59
    12e6:	08 95       	ret

Disassembly of section .text.pvPortMalloc:

00000e50 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 e50:	cf 93       	push	r28
 e52:	df 93       	push	r29
 e54:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 e56:	0e 94 95 09 	call	0x132a	; 0x132a <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 e5a:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <pucAlignedHeap.2094>
 e5e:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <pucAlignedHeap.2094+0x1>
 e62:	89 2b       	or	r24, r25
 e64:	31 f4       	brne	.+12     	; 0xe72 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 e66:	82 e6       	ldi	r24, 0x62	; 98
 e68:	90 e0       	ldi	r25, 0x00	; 0
 e6a:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <pucAlignedHeap.2094+0x1>
 e6e:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <pucAlignedHeap.2094>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 e72:	20 97       	sbiw	r28, 0x00	; 0
 e74:	c9 f0       	breq	.+50     	; 0xea8 <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 e76:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <xNextFreeByte>
 e7a:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <xNextFreeByte+0x1>
 e7e:	9e 01       	movw	r18, r28
 e80:	28 0f       	add	r18, r24
 e82:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 e84:	2b 3d       	cpi	r18, 0xDB	; 219
 e86:	45 e0       	ldi	r20, 0x05	; 5
 e88:	34 07       	cpc	r19, r20
 e8a:	88 f4       	brcc	.+34     	; 0xeae <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 e8c:	82 17       	cp	r24, r18
 e8e:	93 07       	cpc	r25, r19
 e90:	88 f4       	brcc	.+34     	; 0xeb4 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 e92:	c0 91 8f 06 	lds	r28, 0x068F	; 0x80068f <pucAlignedHeap.2094>
 e96:	d0 91 90 06 	lds	r29, 0x0690	; 0x800690 <pucAlignedHeap.2094+0x1>
 e9a:	c8 0f       	add	r28, r24
 e9c:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
 e9e:	30 93 92 06 	sts	0x0692, r19	; 0x800692 <xNextFreeByte+0x1>
 ea2:	20 93 91 06 	sts	0x0691, r18	; 0x800691 <xNextFreeByte>
 ea6:	08 c0       	rjmp	.+16     	; 0xeb8 <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
 ea8:	c0 e0       	ldi	r28, 0x00	; 0
 eaa:	d0 e0       	ldi	r29, 0x00	; 0
 eac:	05 c0       	rjmp	.+10     	; 0xeb8 <pvPortMalloc+0x68>
 eae:	c0 e0       	ldi	r28, 0x00	; 0
 eb0:	d0 e0       	ldi	r29, 0x00	; 0
 eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <pvPortMalloc+0x68>
 eb4:	c0 e0       	ldi	r28, 0x00	; 0
 eb6:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 eb8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
 ebc:	ce 01       	movw	r24, r28
 ebe:	df 91       	pop	r29
 ec0:	cf 91       	pop	r28
 ec2:	08 95       	ret

Disassembly of section .text.vPortFree:

00001352 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    1352:	08 95       	ret

Disassembly of section .text.HLCD_vsendData:

00000f32 <HLCD_vsendData>:
	else
	{
		HLCD_vsendData('0');
	}
	
}
 f32:	9b b3       	in	r25, 0x1b	; 27
 f34:	9f 70       	andi	r25, 0x0F	; 15
 f36:	28 2f       	mov	r18, r24
 f38:	20 7f       	andi	r18, 0xF0	; 240
 f3a:	92 2b       	or	r25, r18
 f3c:	9b bb       	out	0x1b, r25	; 27
 f3e:	98 b3       	in	r25, 0x18	; 24
 f40:	92 60       	ori	r25, 0x02	; 2
 f42:	98 bb       	out	0x18, r25	; 24
 f44:	98 b3       	in	r25, 0x18	; 24
 f46:	9b 7f       	andi	r25, 0xFB	; 251
 f48:	98 bb       	out	0x18, r25	; 24
 f4a:	98 b3       	in	r25, 0x18	; 24
 f4c:	98 60       	ori	r25, 0x08	; 8
 f4e:	98 bb       	out	0x18, r25	; 24
 f50:	ef e9       	ldi	r30, 0x9F	; 159
 f52:	ff e0       	ldi	r31, 0x0F	; 15
 f54:	31 97       	sbiw	r30, 0x01	; 1
 f56:	f1 f7       	brne	.-4      	; 0xf54 <HLCD_vsendData+0x22>
 f58:	00 c0       	rjmp	.+0      	; 0xf5a <HLCD_vsendData+0x28>
 f5a:	00 00       	nop
 f5c:	98 b3       	in	r25, 0x18	; 24
 f5e:	97 7f       	andi	r25, 0xF7	; 247
 f60:	98 bb       	out	0x18, r25	; 24
 f62:	2b b3       	in	r18, 0x1b	; 27
 f64:	f0 e1       	ldi	r31, 0x10	; 16
 f66:	8f 9f       	mul	r24, r31
 f68:	c0 01       	movw	r24, r0
 f6a:	11 24       	eor	r1, r1
 f6c:	92 2f       	mov	r25, r18
 f6e:	9f 70       	andi	r25, 0x0F	; 15
 f70:	89 2b       	or	r24, r25
 f72:	8b bb       	out	0x1b, r24	; 27
 f74:	88 b3       	in	r24, 0x18	; 24
 f76:	82 60       	ori	r24, 0x02	; 2
 f78:	88 bb       	out	0x18, r24	; 24
 f7a:	88 b3       	in	r24, 0x18	; 24
 f7c:	8b 7f       	andi	r24, 0xFB	; 251
 f7e:	88 bb       	out	0x18, r24	; 24
 f80:	88 b3       	in	r24, 0x18	; 24
 f82:	88 60       	ori	r24, 0x08	; 8
 f84:	88 bb       	out	0x18, r24	; 24
 f86:	8f e9       	ldi	r24, 0x9F	; 159
 f88:	9f e0       	ldi	r25, 0x0F	; 15
 f8a:	01 97       	sbiw	r24, 0x01	; 1
 f8c:	f1 f7       	brne	.-4      	; 0xf8a <HLCD_vsendData+0x58>
 f8e:	00 c0       	rjmp	.+0      	; 0xf90 <HLCD_vsendData+0x5e>
 f90:	00 00       	nop
 f92:	88 b3       	in	r24, 0x18	; 24
 f94:	87 7f       	andi	r24, 0xF7	; 247
 f96:	88 bb       	out	0x18, r24	; 24
 f98:	08 95       	ret

Disassembly of section .text.HLCD_vsendCommand:

00000f9a <HLCD_vsendCommand>:

void HLCD_vsendCommand(u8 LCD_COMMAND){
	
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (LCD_COMMAND & 0xF0);
     f9a:	9b b3       	in	r25, 0x1b	; 27
     f9c:	9f 70       	andi	r25, 0x0F	; 15
     f9e:	28 2f       	mov	r18, r24
     fa0:	20 7f       	andi	r18, 0xF0	; 240
     fa2:	92 2b       	or	r25, r18
     fa4:	9b bb       	out	0x1b, r25	; 27
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_BS);
     fa6:	98 b3       	in	r25, 0x18	; 24
     fa8:	9d 7f       	andi	r25, 0xFD	; 253
     faa:	98 bb       	out	0x18, r25	; 24
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RW);
     fac:	98 b3       	in	r25, 0x18	; 24
     fae:	9b 7f       	andi	r25, 0xFB	; 251
     fb0:	98 bb       	out	0x18, r25	; 24
	
	SET_BIT(LCD_CONTROL_PORT, LCD_E);
     fb2:	98 b3       	in	r25, 0x18	; 24
     fb4:	98 60       	ori	r25, 0x08	; 8
     fb6:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fb8:	ef e9       	ldi	r30, 0x9F	; 159
     fba:	ff e0       	ldi	r31, 0x0F	; 15
     fbc:	31 97       	sbiw	r30, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <HLCD_vsendCommand+0x22>
     fc0:	00 c0       	rjmp	.+0      	; 0xfc2 <HLCD_vsendCommand+0x28>
     fc2:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_E);
     fc4:	98 b3       	in	r25, 0x18	; 24
     fc6:	97 7f       	andi	r25, 0xF7	; 247
     fc8:	98 bb       	out	0x18, r25	; 24
	
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((LCD_COMMAND & 0x0F)<<4);
     fca:	2b b3       	in	r18, 0x1b	; 27
     fcc:	f0 e1       	ldi	r31, 0x10	; 16
     fce:	8f 9f       	mul	r24, r31
     fd0:	c0 01       	movw	r24, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	92 2f       	mov	r25, r18
     fd6:	9f 70       	andi	r25, 0x0F	; 15
     fd8:	89 2b       	or	r24, r25
     fda:	8b bb       	out	0x1b, r24	; 27
// 	LCD_DATA_PORT &= 0x0F;
// 	LCD_DATA_PORT |= (LCD_COMMAND && 0x0F) << 4;
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_BS);
     fdc:	88 b3       	in	r24, 0x18	; 24
     fde:	8d 7f       	andi	r24, 0xFD	; 253
     fe0:	88 bb       	out	0x18, r24	; 24
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RW);
     fe2:	88 b3       	in	r24, 0x18	; 24
     fe4:	8b 7f       	andi	r24, 0xFB	; 251
     fe6:	88 bb       	out	0x18, r24	; 24
	
	SET_BIT(LCD_CONTROL_PORT, LCD_E);
     fe8:	88 b3       	in	r24, 0x18	; 24
     fea:	88 60       	ori	r24, 0x08	; 8
     fec:	88 bb       	out	0x18, r24	; 24
     fee:	8f e9       	ldi	r24, 0x9F	; 159
     ff0:	9f e0       	ldi	r25, 0x0F	; 15
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <HLCD_vsendCommand+0x58>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <HLCD_vsendCommand+0x5e>
     ff8:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_E);
     ffa:	88 b3       	in	r24, 0x18	; 24
     ffc:	87 7f       	andi	r24, 0xF7	; 247
     ffe:	88 bb       	out	0x18, r24	; 24
    1000:	08 95       	ret

Disassembly of section .text.HLCD_vInit:

00000dda <HLCD_vInit>:
	else
	{
		HLCD_vsendData('0');
	}
	
}
 dda:	8f e0       	ldi	r24, 0x0F	; 15
 ddc:	87 bb       	out	0x17, r24	; 23
 dde:	80 ef       	ldi	r24, 0xF0	; 240
 de0:	8a bb       	out	0x1a, r24	; 26
 de2:	2f ef       	ldi	r18, 0xFF	; 255
 de4:	83 ef       	ldi	r24, 0xF3	; 243
 de6:	91 e0       	ldi	r25, 0x01	; 1
 de8:	21 50       	subi	r18, 0x01	; 1
 dea:	80 40       	sbci	r24, 0x00	; 0
 dec:	90 40       	sbci	r25, 0x00	; 0
 dee:	e1 f7       	brne	.-8      	; 0xde8 <HLCD_vInit+0xe>
 df0:	00 c0       	rjmp	.+0      	; 0xdf2 <HLCD_vInit+0x18>
 df2:	00 00       	nop
 df4:	88 e2       	ldi	r24, 0x28	; 40
 df6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <HLCD_vsendCommand>
 dfa:	25 ed       	ldi	r18, 0xD5	; 213
 dfc:	2a 95       	dec	r18
 dfe:	f1 f7       	brne	.-4      	; 0xdfc <HLCD_vInit+0x22>
 e00:	00 00       	nop
 e02:	82 e0       	ldi	r24, 0x02	; 2
 e04:	0e 94 cd 07 	call	0xf9a	; 0xf9a <HLCD_vsendCommand>
 e08:	8f e3       	ldi	r24, 0x3F	; 63
 e0a:	9f e1       	ldi	r25, 0x1F	; 31
 e0c:	01 97       	sbiw	r24, 0x01	; 1
 e0e:	f1 f7       	brne	.-4      	; 0xe0c <HLCD_vInit+0x32>
 e10:	00 c0       	rjmp	.+0      	; 0xe12 <HLCD_vInit+0x38>
 e12:	00 00       	nop
 e14:	86 e0       	ldi	r24, 0x06	; 6
 e16:	0e 94 cd 07 	call	0xf9a	; 0xf9a <HLCD_vsendCommand>
 e1a:	95 ed       	ldi	r25, 0xD5	; 213
 e1c:	9a 95       	dec	r25
 e1e:	f1 f7       	brne	.-4      	; 0xe1c <HLCD_vInit+0x42>
 e20:	00 00       	nop
 e22:	8f e0       	ldi	r24, 0x0F	; 15
 e24:	0e 94 cd 07 	call	0xf9a	; 0xf9a <HLCD_vsendCommand>
 e28:	84 e1       	ldi	r24, 0x14	; 20
 e2a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <HLCD_vsendCommand>
 e2e:	25 ed       	ldi	r18, 0xD5	; 213
 e30:	2a 95       	dec	r18
 e32:	f1 f7       	brne	.-4      	; 0xe30 <HLCD_vInit+0x56>
 e34:	00 00       	nop
 e36:	81 e0       	ldi	r24, 0x01	; 1
 e38:	0e 94 cd 07 	call	0xf9a	; 0xf9a <HLCD_vsendCommand>
 e3c:	8f ef       	ldi	r24, 0xFF	; 255
 e3e:	93 ec       	ldi	r25, 0xC3	; 195
 e40:	29 e0       	ldi	r18, 0x09	; 9
 e42:	81 50       	subi	r24, 0x01	; 1
 e44:	90 40       	sbci	r25, 0x00	; 0
 e46:	20 40       	sbci	r18, 0x00	; 0
 e48:	e1 f7       	brne	.-8      	; 0xe42 <HLCD_vInit+0x68>
 e4a:	00 c0       	rjmp	.+0      	; 0xe4c <HLCD_vInit+0x72>
 e4c:	00 00       	nop
 e4e:	08 95       	ret

Disassembly of section .text.vListInitialise:

00001296 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1296:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1298:	03 96       	adiw	r24, 0x03	; 3
    129a:	92 83       	std	Z+2, r25	; 0x02
    129c:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    129e:	2f ef       	ldi	r18, 0xFF	; 255
    12a0:	3f ef       	ldi	r19, 0xFF	; 255
    12a2:	34 83       	std	Z+4, r19	; 0x04
    12a4:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    12a6:	96 83       	std	Z+6, r25	; 0x06
    12a8:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    12aa:	90 87       	std	Z+8, r25	; 0x08
    12ac:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    12ae:	10 82       	st	Z, r1
    12b0:	08 95       	ret

Disassembly of section .text.vListInitialiseItem:

00001336 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1336:	fc 01       	movw	r30, r24
    1338:	11 86       	std	Z+9, r1	; 0x09
    133a:	10 86       	std	Z+8, r1	; 0x08
    133c:	08 95       	ret

Disassembly of section .text.vListInsert:

00001002 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1008:	48 81       	ld	r20, Y
    100a:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    100c:	4f 3f       	cpi	r20, 0xFF	; 255
    100e:	2f ef       	ldi	r18, 0xFF	; 255
    1010:	52 07       	cpc	r21, r18
    1012:	21 f4       	brne	.+8      	; 0x101c <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1014:	fc 01       	movw	r30, r24
    1016:	a7 81       	ldd	r26, Z+7	; 0x07
    1018:	b0 85       	ldd	r27, Z+8	; 0x08
    101a:	0d c0       	rjmp	.+26     	; 0x1036 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    101c:	dc 01       	movw	r26, r24
    101e:	13 96       	adiw	r26, 0x03	; 3
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <vListInsert+0x22>
    1022:	df 01       	movw	r26, r30
    1024:	12 96       	adiw	r26, 0x02	; 2
    1026:	ed 91       	ld	r30, X+
    1028:	fc 91       	ld	r31, X
    102a:	13 97       	sbiw	r26, 0x03	; 3
    102c:	20 81       	ld	r18, Z
    102e:	31 81       	ldd	r19, Z+1	; 0x01
    1030:	42 17       	cp	r20, r18
    1032:	53 07       	cpc	r21, r19
    1034:	b0 f7       	brcc	.-20     	; 0x1022 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1036:	12 96       	adiw	r26, 0x02	; 2
    1038:	ed 91       	ld	r30, X+
    103a:	fc 91       	ld	r31, X
    103c:	13 97       	sbiw	r26, 0x03	; 3
    103e:	fb 83       	std	Y+3, r31	; 0x03
    1040:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1042:	d5 83       	std	Z+5, r29	; 0x05
    1044:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    1046:	bd 83       	std	Y+5, r27	; 0x05
    1048:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    104a:	13 96       	adiw	r26, 0x03	; 3
    104c:	dc 93       	st	X, r29
    104e:	ce 93       	st	-X, r28
    1050:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1052:	99 87       	std	Y+9, r25	; 0x09
    1054:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    1056:	fc 01       	movw	r30, r24
    1058:	20 81       	ld	r18, Z
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	20 83       	st	Z, r18
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

Disassembly of section .text.uxListRemove:

00001176 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    117c:	a0 85       	ldd	r26, Z+8	; 0x08
    117e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1180:	c2 81       	ldd	r28, Z+2	; 0x02
    1182:	d3 81       	ldd	r29, Z+3	; 0x03
    1184:	84 81       	ldd	r24, Z+4	; 0x04
    1186:	95 81       	ldd	r25, Z+5	; 0x05
    1188:	9d 83       	std	Y+5, r25	; 0x05
    118a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    118c:	c4 81       	ldd	r28, Z+4	; 0x04
    118e:	d5 81       	ldd	r29, Z+5	; 0x05
    1190:	82 81       	ldd	r24, Z+2	; 0x02
    1192:	93 81       	ldd	r25, Z+3	; 0x03
    1194:	9b 83       	std	Y+3, r25	; 0x03
    1196:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1198:	11 96       	adiw	r26, 0x01	; 1
    119a:	8d 91       	ld	r24, X+
    119c:	9c 91       	ld	r25, X
    119e:	12 97       	sbiw	r26, 0x02	; 2
    11a0:	e8 17       	cp	r30, r24
    11a2:	f9 07       	cpc	r31, r25
    11a4:	31 f4       	brne	.+12     	; 0x11b2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    11a6:	84 81       	ldd	r24, Z+4	; 0x04
    11a8:	95 81       	ldd	r25, Z+5	; 0x05
    11aa:	12 96       	adiw	r26, 0x02	; 2
    11ac:	9c 93       	st	X, r25
    11ae:	8e 93       	st	-X, r24
    11b0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    11b2:	11 86       	std	Z+9, r1	; 0x09
    11b4:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    11b6:	8c 91       	ld	r24, X
    11b8:	81 50       	subi	r24, 0x01	; 1
    11ba:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    11bc:	8c 91       	ld	r24, X
}
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

Disassembly of section .text.task1:

000012b2 <task1>:
}

void task1(void *ptr){
	
	while(1){
		if (ulTaskNotifyTake(pdTRUE, 0) != 0 )
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	0e 94 13 03 	call	0x626	; 0x626 <ulTaskGenericNotifyTake>
    12be:	67 2b       	or	r22, r23
    12c0:	68 2b       	or	r22, r24
    12c2:	69 2b       	or	r22, r25
    12c4:	b1 f3       	breq	.-20     	; 0x12b2 <task1>
		{
			HLCD_vsendData('H');
    12c6:	88 e4       	ldi	r24, 0x48	; 72
    12c8:	0e 94 99 07 	call	0xf32	; 0xf32 <HLCD_vsendData>
    12cc:	f2 cf       	rjmp	.-28     	; 0x12b2 <task1>

Disassembly of section .text.main:

000011c4 <main>:

TaskHandle_t task_h ; 

void task1(void *ptr);
int main(void)
{
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
	HLCD_vInit();
    11ce:	0e 94 ed 06 	call	0xdda	; 0xdda <HLCD_vInit>
	EXTI0_init();
    11d2:	0e 94 67 09 	call	0x12ce	; 0x12ce <EXTI0_init>
	xTaskCreate(task1,NULL,80,NULL,2,&task_h);
    11d6:	0f 2e       	mov	r0, r31
    11d8:	f0 e6       	ldi	r31, 0x60	; 96
    11da:	cf 2e       	mov	r12, r31
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	df 2e       	mov	r13, r31
    11e0:	f0 2d       	mov	r31, r0
    11e2:	68 94       	set
    11e4:	ee 24       	eor	r14, r14
    11e6:	e1 f8       	bld	r14, 1
    11e8:	00 e0       	ldi	r16, 0x00	; 0
    11ea:	10 e0       	ldi	r17, 0x00	; 0
    11ec:	20 e5       	ldi	r18, 0x50	; 80
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	89 e5       	ldi	r24, 0x59	; 89
    11f8:	99 e0       	ldi	r25, 0x09	; 9
    11fa:	0e 94 09 05 	call	0xa12	; 0xa12 <xTaskCreate>
	vTaskStartScheduler();
    11fe:	0e 94 61 08 	call	0x10c2	; 0x10c2 <vTaskStartScheduler>
}
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ef 90       	pop	r14
    120c:	df 90       	pop	r13
    120e:	cf 90       	pop	r12
    1210:	08 95       	ret

Disassembly of section .text.__vector_1:

00001120 <__vector_1>:
	}
}


void __vector_1(void) __attribute__((signal)) ; 
void __vector_1(void){
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	2f 93       	push	r18
    112c:	3f 93       	push	r19
    112e:	4f 93       	push	r20
    1130:	5f 93       	push	r21
    1132:	6f 93       	push	r22
    1134:	7f 93       	push	r23
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25
    113a:	af 93       	push	r26
    113c:	bf 93       	push	r27
    113e:	ef 93       	push	r30
    1140:	ff 93       	push	r31
	vTaskNotifyGiveFromISR(task_h, pdFALSE);
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    114c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1150:	0e 94 49 02 	call	0x492	; 0x492 <vTaskGenericNotifyGiveFromISR>
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

Disassembly of section .text.prvSetupTimerInterrupt:

00001318 <prvSetupTimerInterrupt>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
    1318:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
    131a:	89 ef       	ldi	r24, 0xF9	; 249
    131c:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    131e:	8b e0       	ldi	r24, 0x0B	; 11
    1320:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    1322:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1324:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
    1326:	89 bf       	out	0x39, r24	; 57
    1328:	08 95       	ret

Disassembly of section .text.pxPortInitialiseStack:

00000af0 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 af0:	31 e1       	ldi	r19, 0x11	; 17
 af2:	fc 01       	movw	r30, r24
 af4:	30 83       	st	Z, r19
 af6:	31 97       	sbiw	r30, 0x01	; 1
 af8:	22 e2       	ldi	r18, 0x22	; 34
 afa:	20 83       	st	Z, r18
 afc:	31 97       	sbiw	r30, 0x01	; 1
 afe:	a3 e3       	ldi	r26, 0x33	; 51
 b00:	a0 83       	st	Z, r26
 b02:	31 97       	sbiw	r30, 0x01	; 1
 b04:	60 83       	st	Z, r22
 b06:	31 97       	sbiw	r30, 0x01	; 1
 b08:	70 83       	st	Z, r23
 b0a:	31 97       	sbiw	r30, 0x01	; 1
 b0c:	10 82       	st	Z, r1
 b0e:	31 97       	sbiw	r30, 0x01	; 1
 b10:	60 e8       	ldi	r22, 0x80	; 128
 b12:	60 83       	st	Z, r22
 b14:	31 97       	sbiw	r30, 0x01	; 1
 b16:	10 82       	st	Z, r1
 b18:	31 97       	sbiw	r30, 0x01	; 1
 b1a:	62 e0       	ldi	r22, 0x02	; 2
 b1c:	60 83       	st	Z, r22
 b1e:	31 97       	sbiw	r30, 0x01	; 1
 b20:	63 e0       	ldi	r22, 0x03	; 3
 b22:	60 83       	st	Z, r22
 b24:	31 97       	sbiw	r30, 0x01	; 1
 b26:	64 e0       	ldi	r22, 0x04	; 4
 b28:	60 83       	st	Z, r22
 b2a:	31 97       	sbiw	r30, 0x01	; 1
 b2c:	65 e0       	ldi	r22, 0x05	; 5
 b2e:	60 83       	st	Z, r22
 b30:	31 97       	sbiw	r30, 0x01	; 1
 b32:	66 e0       	ldi	r22, 0x06	; 6
 b34:	60 83       	st	Z, r22
 b36:	31 97       	sbiw	r30, 0x01	; 1
 b38:	67 e0       	ldi	r22, 0x07	; 7
 b3a:	60 83       	st	Z, r22
 b3c:	31 97       	sbiw	r30, 0x01	; 1
 b3e:	68 e0       	ldi	r22, 0x08	; 8
 b40:	60 83       	st	Z, r22
 b42:	31 97       	sbiw	r30, 0x01	; 1
 b44:	69 e0       	ldi	r22, 0x09	; 9
 b46:	60 83       	st	Z, r22
 b48:	31 97       	sbiw	r30, 0x01	; 1
 b4a:	60 e1       	ldi	r22, 0x10	; 16
 b4c:	60 83       	st	Z, r22
 b4e:	31 97       	sbiw	r30, 0x01	; 1
 b50:	30 83       	st	Z, r19
 b52:	31 97       	sbiw	r30, 0x01	; 1
 b54:	32 e1       	ldi	r19, 0x12	; 18
 b56:	30 83       	st	Z, r19
 b58:	31 97       	sbiw	r30, 0x01	; 1
 b5a:	33 e1       	ldi	r19, 0x13	; 19
 b5c:	30 83       	st	Z, r19
 b5e:	31 97       	sbiw	r30, 0x01	; 1
 b60:	34 e1       	ldi	r19, 0x14	; 20
 b62:	30 83       	st	Z, r19
 b64:	31 97       	sbiw	r30, 0x01	; 1
 b66:	35 e1       	ldi	r19, 0x15	; 21
 b68:	30 83       	st	Z, r19
 b6a:	31 97       	sbiw	r30, 0x01	; 1
 b6c:	36 e1       	ldi	r19, 0x16	; 22
 b6e:	30 83       	st	Z, r19
 b70:	31 97       	sbiw	r30, 0x01	; 1
 b72:	37 e1       	ldi	r19, 0x17	; 23
 b74:	30 83       	st	Z, r19
 b76:	31 97       	sbiw	r30, 0x01	; 1
 b78:	38 e1       	ldi	r19, 0x18	; 24
 b7a:	30 83       	st	Z, r19
 b7c:	31 97       	sbiw	r30, 0x01	; 1
 b7e:	39 e1       	ldi	r19, 0x19	; 25
 b80:	30 83       	st	Z, r19
 b82:	31 97       	sbiw	r30, 0x01	; 1
 b84:	30 e2       	ldi	r19, 0x20	; 32
 b86:	30 83       	st	Z, r19
 b88:	31 97       	sbiw	r30, 0x01	; 1
 b8a:	31 e2       	ldi	r19, 0x21	; 33
 b8c:	30 83       	st	Z, r19
 b8e:	31 97       	sbiw	r30, 0x01	; 1
 b90:	20 83       	st	Z, r18
 b92:	31 97       	sbiw	r30, 0x01	; 1
 b94:	23 e2       	ldi	r18, 0x23	; 35
 b96:	20 83       	st	Z, r18
 b98:	31 97       	sbiw	r30, 0x01	; 1
 b9a:	40 83       	st	Z, r20
 b9c:	31 97       	sbiw	r30, 0x01	; 1
 b9e:	50 83       	st	Z, r21
 ba0:	31 97       	sbiw	r30, 0x01	; 1
 ba2:	26 e2       	ldi	r18, 0x26	; 38
 ba4:	20 83       	st	Z, r18
 ba6:	31 97       	sbiw	r30, 0x01	; 1
 ba8:	27 e2       	ldi	r18, 0x27	; 39
 baa:	20 83       	st	Z, r18
 bac:	31 97       	sbiw	r30, 0x01	; 1
 bae:	28 e2       	ldi	r18, 0x28	; 40
 bb0:	20 83       	st	Z, r18
 bb2:	31 97       	sbiw	r30, 0x01	; 1
 bb4:	29 e2       	ldi	r18, 0x29	; 41
 bb6:	20 83       	st	Z, r18
 bb8:	31 97       	sbiw	r30, 0x01	; 1
 bba:	20 e3       	ldi	r18, 0x30	; 48
 bbc:	20 83       	st	Z, r18
 bbe:	31 97       	sbiw	r30, 0x01	; 1
 bc0:	21 e3       	ldi	r18, 0x31	; 49
 bc2:	20 83       	st	Z, r18
 bc4:	86 97       	sbiw	r24, 0x26	; 38
 bc6:	08 95       	ret

Disassembly of section .text.xPortStartScheduler:

00001064 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    1064:	0e 94 8c 09 	call	0x1318	; 0x1318 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    1068:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
    106c:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
    1070:	cd 91       	ld	r28, X+
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	dd 91       	ld	r29, X+
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	cf 90       	pop	r12
    10a0:	bf 90       	pop	r11
    10a2:	af 90       	pop	r10
    10a4:	9f 90       	pop	r9
    10a6:	8f 90       	pop	r8
    10a8:	7f 90       	pop	r7
    10aa:	6f 90       	pop	r6
    10ac:	5f 90       	pop	r5
    10ae:	4f 90       	pop	r4
    10b0:	3f 90       	pop	r3
    10b2:	2f 90       	pop	r2
    10b4:	1f 90       	pop	r1
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    10bc:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	08 95       	ret

Disassembly of section .text.vPortYield:

00000c80 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 c80:	0f 92       	push	r0
 c82:	0f b6       	in	r0, 0x3f	; 63
 c84:	f8 94       	cli
 c86:	0f 92       	push	r0
 c88:	1f 92       	push	r1
 c8a:	11 24       	eor	r1, r1
 c8c:	2f 92       	push	r2
 c8e:	3f 92       	push	r3
 c90:	4f 92       	push	r4
 c92:	5f 92       	push	r5
 c94:	6f 92       	push	r6
 c96:	7f 92       	push	r7
 c98:	8f 92       	push	r8
 c9a:	9f 92       	push	r9
 c9c:	af 92       	push	r10
 c9e:	bf 92       	push	r11
 ca0:	cf 92       	push	r12
 ca2:	df 92       	push	r13
 ca4:	ef 92       	push	r14
 ca6:	ff 92       	push	r15
 ca8:	0f 93       	push	r16
 caa:	1f 93       	push	r17
 cac:	2f 93       	push	r18
 cae:	3f 93       	push	r19
 cb0:	4f 93       	push	r20
 cb2:	5f 93       	push	r21
 cb4:	6f 93       	push	r22
 cb6:	7f 93       	push	r23
 cb8:	8f 93       	push	r24
 cba:	9f 93       	push	r25
 cbc:	af 93       	push	r26
 cbe:	bf 93       	push	r27
 cc0:	cf 93       	push	r28
 cc2:	df 93       	push	r29
 cc4:	ef 93       	push	r30
 cc6:	ff 93       	push	r31
 cc8:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 ccc:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 cd0:	0d b6       	in	r0, 0x3d	; 61
 cd2:	0d 92       	st	X+, r0
 cd4:	0e b6       	in	r0, 0x3e	; 62
 cd6:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 cd8:	0e 94 99 06 	call	0xd32	; 0xd32 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 cdc:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 ce0:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 ce4:	cd 91       	ld	r28, X+
 ce6:	cd bf       	out	0x3d, r28	; 61
 ce8:	dd 91       	ld	r29, X+
 cea:	de bf       	out	0x3e, r29	; 62
 cec:	ff 91       	pop	r31
 cee:	ef 91       	pop	r30
 cf0:	df 91       	pop	r29
 cf2:	cf 91       	pop	r28
 cf4:	bf 91       	pop	r27
 cf6:	af 91       	pop	r26
 cf8:	9f 91       	pop	r25
 cfa:	8f 91       	pop	r24
 cfc:	7f 91       	pop	r23
 cfe:	6f 91       	pop	r22
 d00:	5f 91       	pop	r21
 d02:	4f 91       	pop	r20
 d04:	3f 91       	pop	r19
 d06:	2f 91       	pop	r18
 d08:	1f 91       	pop	r17
 d0a:	0f 91       	pop	r16
 d0c:	ff 90       	pop	r15
 d0e:	ef 90       	pop	r14
 d10:	df 90       	pop	r13
 d12:	cf 90       	pop	r12
 d14:	bf 90       	pop	r11
 d16:	af 90       	pop	r10
 d18:	9f 90       	pop	r9
 d1a:	8f 90       	pop	r8
 d1c:	7f 90       	pop	r7
 d1e:	6f 90       	pop	r6
 d20:	5f 90       	pop	r5
 d22:	4f 90       	pop	r4
 d24:	3f 90       	pop	r3
 d26:	2f 90       	pop	r2
 d28:	1f 90       	pop	r1
 d2a:	0f 90       	pop	r0
 d2c:	0f be       	out	0x3f, r0	; 63
 d2e:	0f 90       	pop	r0

	asm volatile ( "ret" );
 d30:	08 95       	ret

Disassembly of section .text.vPortYieldFromTick:

00000bc8 <vPortYieldFromTick>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 bc8:	0f 92       	push	r0
 bca:	0f b6       	in	r0, 0x3f	; 63
 bcc:	f8 94       	cli
 bce:	0f 92       	push	r0
 bd0:	1f 92       	push	r1
 bd2:	11 24       	eor	r1, r1
 bd4:	2f 92       	push	r2
 bd6:	3f 92       	push	r3
 bd8:	4f 92       	push	r4
 bda:	5f 92       	push	r5
 bdc:	6f 92       	push	r6
 bde:	7f 92       	push	r7
 be0:	8f 92       	push	r8
 be2:	9f 92       	push	r9
 be4:	af 92       	push	r10
 be6:	bf 92       	push	r11
 be8:	cf 92       	push	r12
 bea:	df 92       	push	r13
 bec:	ef 92       	push	r14
 bee:	ff 92       	push	r15
 bf0:	0f 93       	push	r16
 bf2:	1f 93       	push	r17
 bf4:	2f 93       	push	r18
 bf6:	3f 93       	push	r19
 bf8:	4f 93       	push	r20
 bfa:	5f 93       	push	r21
 bfc:	6f 93       	push	r22
 bfe:	7f 93       	push	r23
 c00:	8f 93       	push	r24
 c02:	9f 93       	push	r25
 c04:	af 93       	push	r26
 c06:	bf 93       	push	r27
 c08:	cf 93       	push	r28
 c0a:	df 93       	push	r29
 c0c:	ef 93       	push	r30
 c0e:	ff 93       	push	r31
 c10:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 c14:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 c18:	0d b6       	in	r0, 0x3d	; 61
 c1a:	0d 92       	st	X+, r0
 c1c:	0e b6       	in	r0, 0x3e	; 62
 c1e:	0d 92       	st	X+, r0
 c20:	0e 94 5a 00 	call	0xb4	; 0xb4 <xTaskIncrementTick>
 c24:	81 11       	cpse	r24, r1
 c26:	0e 94 99 06 	call	0xd32	; 0xd32 <vTaskSwitchContext>
 c2a:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 c2e:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 c32:	cd 91       	ld	r28, X+
 c34:	cd bf       	out	0x3d, r28	; 61
 c36:	dd 91       	ld	r29, X+
 c38:	de bf       	out	0x3e, r29	; 62
 c3a:	ff 91       	pop	r31
 c3c:	ef 91       	pop	r30
 c3e:	df 91       	pop	r29
 c40:	cf 91       	pop	r28
 c42:	bf 91       	pop	r27
 c44:	af 91       	pop	r26
 c46:	9f 91       	pop	r25
 c48:	8f 91       	pop	r24
 c4a:	7f 91       	pop	r23
 c4c:	6f 91       	pop	r22
 c4e:	5f 91       	pop	r21
 c50:	4f 91       	pop	r20
 c52:	3f 91       	pop	r19
 c54:	2f 91       	pop	r18
 c56:	1f 91       	pop	r17
 c58:	0f 91       	pop	r16
 c5a:	ff 90       	pop	r15
 c5c:	ef 90       	pop	r14
 c5e:	df 90       	pop	r13
 c60:	cf 90       	pop	r12
 c62:	bf 90       	pop	r11
 c64:	af 90       	pop	r10
 c66:	9f 90       	pop	r9
 c68:	8f 90       	pop	r8
 c6a:	7f 90       	pop	r7
 c6c:	6f 90       	pop	r6
 c6e:	5f 90       	pop	r5
 c70:	4f 90       	pop	r4
 c72:	3f 90       	pop	r3
 c74:	2f 90       	pop	r2
 c76:	1f 90       	pop	r1
 c78:	0f 90       	pop	r0
 c7a:	0f be       	out	0x3f, r0	; 63
 c7c:	0f 90       	pop	r0
 c7e:	08 95       	ret

Disassembly of section .text.__vector_7:

0000133e <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    133e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1342:	18 95       	reti

Disassembly of section .text.prvResetNextTaskUnblockTime:

0000125e <prvResetNextTaskUnblockTime>:
    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
    125e:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <pxDelayedTaskList>
    1262:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
    1266:	80 81       	ld	r24, Z
    1268:	81 11       	cpse	r24, r1
    126a:	07 c0       	rjmp	.+14     	; 0x127a <prvResetNextTaskUnblockTime+0x1c>
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	9f ef       	ldi	r25, 0xFF	; 255
    1270:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <xNextTaskUnblockTime+0x1>
    1274:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <xNextTaskUnblockTime>
    1278:	08 95       	ret
    127a:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <pxDelayedTaskList>
    127e:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
    1282:	05 80       	ldd	r0, Z+5	; 0x05
    1284:	f6 81       	ldd	r31, Z+6	; 0x06
    1286:	e0 2d       	mov	r30, r0
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <xNextTaskUnblockTime+0x1>
    1290:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <xNextTaskUnblockTime>
    1294:	08 95       	ret

Disassembly of section .text.prvDeleteTCB:

000012e8 <prvDeleteTCB>:
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	ec 01       	movw	r28, r24
    12ee:	8f 89       	ldd	r24, Y+23	; 0x17
    12f0:	98 8d       	ldd	r25, Y+24	; 0x18
    12f2:	0e 94 a9 09 	call	0x1352	; 0x1352 <vPortFree>
    12f6:	ce 01       	movw	r24, r28
    12f8:	0e 94 a9 09 	call	0x1352	; 0x1352 <vPortFree>
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	08 95       	ret

Disassembly of section .text.prvInitialiseNewTask:

00000928 <prvInitialiseNewTask>:
 928:	6f 92       	push	r6
 92a:	7f 92       	push	r7
 92c:	8f 92       	push	r8
 92e:	9f 92       	push	r9
 930:	af 92       	push	r10
 932:	bf 92       	push	r11
 934:	cf 92       	push	r12
 936:	df 92       	push	r13
 938:	ef 92       	push	r14
 93a:	ff 92       	push	r15
 93c:	0f 93       	push	r16
 93e:	1f 93       	push	r17
 940:	cf 93       	push	r28
 942:	df 93       	push	r29
 944:	cd b7       	in	r28, 0x3d	; 61
 946:	de b7       	in	r29, 0x3e	; 62
 948:	3c 01       	movw	r6, r24
 94a:	a6 2f       	mov	r26, r22
 94c:	ca 01       	movw	r24, r20
 94e:	f4 01       	movw	r30, r8
 950:	47 89       	ldd	r20, Z+23	; 0x17
 952:	50 8d       	ldd	r21, Z+24	; 0x18
 954:	01 50       	subi	r16, 0x01	; 1
 956:	11 09       	sbc	r17, r1
 958:	04 0f       	add	r16, r20
 95a:	15 1f       	adc	r17, r21
 95c:	00 97       	sbiw	r24, 0x00	; 0
 95e:	a1 05       	cpc	r26, r1
 960:	d1 f4       	brne	.+52     	; 0x996 <prvInitialiseNewTask+0x6e>
 962:	1e c0       	rjmp	.+60     	; 0x9a0 <prvInitialiseNewTask+0x78>
 964:	27 2f       	mov	r18, r23
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	ac 01       	movw	r20, r24
 96a:	6a 2f       	mov	r22, r26
 96c:	42 0f       	add	r20, r18
 96e:	53 1f       	adc	r21, r19
 970:	61 1d       	adc	r22, r1
 972:	37 fd       	sbrc	r19, 7
 974:	6a 95       	dec	r22
 976:	fa 01       	movw	r30, r20
 978:	b4 91       	lpm	r27, Z
 97a:	67 fd       	sbrc	r22, 7
 97c:	b0 81       	ld	r27, Z
 97e:	f4 01       	movw	r30, r8
 980:	e2 0f       	add	r30, r18
 982:	f3 1f       	adc	r31, r19
 984:	b1 8f       	std	Z+25, r27	; 0x19
 986:	fa 01       	movw	r30, r20
 988:	24 91       	lpm	r18, Z
 98a:	67 fd       	sbrc	r22, 7
 98c:	20 81       	ld	r18, Z
 98e:	22 23       	and	r18, r18
 990:	29 f0       	breq	.+10     	; 0x99c <prvInitialiseNewTask+0x74>
 992:	7f 5f       	subi	r23, 0xFF	; 255
 994:	01 c0       	rjmp	.+2      	; 0x998 <prvInitialiseNewTask+0x70>
 996:	70 e0       	ldi	r23, 0x00	; 0
 998:	78 30       	cpi	r23, 0x08	; 8
 99a:	20 f3       	brcs	.-56     	; 0x964 <prvInitialiseNewTask+0x3c>
 99c:	f4 01       	movw	r30, r8
 99e:	10 a2       	std	Z+32, r1	; 0x20
 9a0:	f3 e0       	ldi	r31, 0x03	; 3
 9a2:	fc 15       	cp	r31, r12
 9a4:	20 f4       	brcc	.+8      	; 0x9ae <prvInitialiseNewTask+0x86>
 9a6:	0f 2e       	mov	r0, r31
 9a8:	f3 e0       	ldi	r31, 0x03	; 3
 9aa:	cf 2e       	mov	r12, r31
 9ac:	f0 2d       	mov	r31, r0
 9ae:	f4 01       	movw	r30, r8
 9b0:	c6 8a       	std	Z+22, r12	; 0x16
 9b2:	c4 01       	movw	r24, r8
 9b4:	02 96       	adiw	r24, 0x02	; 2
 9b6:	0e 94 9b 09 	call	0x1336	; 0x1336 <vListInitialiseItem>
 9ba:	c4 01       	movw	r24, r8
 9bc:	0c 96       	adiw	r24, 0x0c	; 12
 9be:	0e 94 9b 09 	call	0x1336	; 0x1336 <vListInitialiseItem>
 9c2:	f4 01       	movw	r30, r8
 9c4:	91 86       	std	Z+9, r9	; 0x09
 9c6:	80 86       	std	Z+8, r8	; 0x08
 9c8:	84 e0       	ldi	r24, 0x04	; 4
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	8c 19       	sub	r24, r12
 9ce:	91 09       	sbc	r25, r1
 9d0:	95 87       	std	Z+13, r25	; 0x0d
 9d2:	84 87       	std	Z+12, r24	; 0x0c
 9d4:	93 8a       	std	Z+19, r9	; 0x13
 9d6:	82 8a       	std	Z+18, r8	; 0x12
 9d8:	a7 01       	movw	r20, r14
 9da:	b3 01       	movw	r22, r6
 9dc:	c8 01       	movw	r24, r16
 9de:	0e 94 78 05 	call	0xaf0	; 0xaf0 <pxPortInitialiseStack>
 9e2:	f4 01       	movw	r30, r8
 9e4:	91 83       	std	Z+1, r25	; 0x01
 9e6:	80 83       	st	Z, r24
 9e8:	a1 14       	cp	r10, r1
 9ea:	b1 04       	cpc	r11, r1
 9ec:	19 f0       	breq	.+6      	; 0x9f4 <prvInitialiseNewTask+0xcc>
 9ee:	f5 01       	movw	r30, r10
 9f0:	91 82       	std	Z+1, r9	; 0x01
 9f2:	80 82       	st	Z, r8
 9f4:	df 91       	pop	r29
 9f6:	cf 91       	pop	r28
 9f8:	1f 91       	pop	r17
 9fa:	0f 91       	pop	r16
 9fc:	ff 90       	pop	r15
 9fe:	ef 90       	pop	r14
 a00:	df 90       	pop	r13
 a02:	cf 90       	pop	r12
 a04:	bf 90       	pop	r11
 a06:	af 90       	pop	r10
 a08:	9f 90       	pop	r9
 a0a:	8f 90       	pop	r8
 a0c:	7f 90       	pop	r7
 a0e:	6f 90       	pop	r6
 a10:	08 95       	ret

Disassembly of section .text.prvInitialiseTaskLists:

00000ec4 <prvInitialiseTaskLists>:
 ec4:	cf 93       	push	r28
 ec6:	c0 e0       	ldi	r28, 0x00	; 0
 ec8:	10 c0       	rjmp	.+32     	; 0xeea <prvInitialiseTaskLists+0x26>
 eca:	8c 2f       	mov	r24, r28
 ecc:	90 e0       	ldi	r25, 0x00	; 0
 ece:	9c 01       	movw	r18, r24
 ed0:	22 0f       	add	r18, r18
 ed2:	33 1f       	adc	r19, r19
 ed4:	22 0f       	add	r18, r18
 ed6:	33 1f       	adc	r19, r19
 ed8:	22 0f       	add	r18, r18
 eda:	33 1f       	adc	r19, r19
 edc:	82 0f       	add	r24, r18
 ede:	93 1f       	adc	r25, r19
 ee0:	82 5c       	subi	r24, 0xC2	; 194
 ee2:	99 4f       	sbci	r25, 0xF9	; 249
 ee4:	0e 94 4b 09 	call	0x1296	; 0x1296 <vListInitialise>
 ee8:	cf 5f       	subi	r28, 0xFF	; 255
 eea:	c4 30       	cpi	r28, 0x04	; 4
 eec:	70 f3       	brcs	.-36     	; 0xeca <prvInitialiseTaskLists+0x6>
 eee:	86 e8       	ldi	r24, 0x86	; 134
 ef0:	96 e0       	ldi	r25, 0x06	; 6
 ef2:	0e 94 4b 09 	call	0x1296	; 0x1296 <vListInitialise>
 ef6:	8d e7       	ldi	r24, 0x7D	; 125
 ef8:	96 e0       	ldi	r25, 0x06	; 6
 efa:	0e 94 4b 09 	call	0x1296	; 0x1296 <vListInitialise>
 efe:	84 e7       	ldi	r24, 0x74	; 116
 f00:	96 e0       	ldi	r25, 0x06	; 6
 f02:	0e 94 4b 09 	call	0x1296	; 0x1296 <vListInitialise>
 f06:	8b e6       	ldi	r24, 0x6B	; 107
 f08:	96 e0       	ldi	r25, 0x06	; 6
 f0a:	0e 94 4b 09 	call	0x1296	; 0x1296 <vListInitialise>
 f0e:	82 e6       	ldi	r24, 0x62	; 98
 f10:	96 e0       	ldi	r25, 0x06	; 6
 f12:	0e 94 4b 09 	call	0x1296	; 0x1296 <vListInitialise>
 f16:	86 e8       	ldi	r24, 0x86	; 134
 f18:	96 e0       	ldi	r25, 0x06	; 6
 f1a:	90 93 9e 06 	sts	0x069E, r25	; 0x80069e <pxDelayedTaskList+0x1>
 f1e:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <pxDelayedTaskList>
 f22:	8d e7       	ldi	r24, 0x7D	; 125
 f24:	96 e0       	ldi	r25, 0x06	; 6
 f26:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <pxOverflowDelayedTaskList+0x1>
 f2a:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <pxOverflowDelayedTaskList>
 f2e:	cf 91       	pop	r28
 f30:	08 95       	ret

Disassembly of section .text.prvAddNewTaskToReadyList:

0000082e <prvAddNewTaskToReadyList>:
 82e:	cf 93       	push	r28
 830:	df 93       	push	r29
 832:	ec 01       	movw	r28, r24
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	f8 94       	cli
 838:	0f 92       	push	r0
 83a:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
 83e:	8f 5f       	subi	r24, 0xFF	; 255
 840:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <uxCurrentNumberOfTasks>
 844:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 848:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 84c:	89 2b       	or	r24, r25
 84e:	59 f4       	brne	.+22     	; 0x866 <__stack+0x7>
 850:	d0 93 a0 06 	sts	0x06A0, r29	; 0x8006a0 <pxCurrentTCB+0x1>
 854:	c0 93 9f 06 	sts	0x069F, r28	; 0x80069f <pxCurrentTCB>
 858:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
 85c:	81 30       	cpi	r24, 0x01	; 1
 85e:	99 f4       	brne	.+38     	; 0x886 <__stack+0x27>
 860:	0e 94 62 07 	call	0xec4	; 0xec4 <prvInitialiseTaskLists>
 864:	10 c0       	rjmp	.+32     	; 0x886 <__stack+0x27>
 866:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <xSchedulerRunning>
 86a:	81 11       	cpse	r24, r1
 86c:	0c c0       	rjmp	.+24     	; 0x886 <__stack+0x27>
 86e:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 872:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 876:	96 89       	ldd	r25, Z+22	; 0x16
 878:	8e 89       	ldd	r24, Y+22	; 0x16
 87a:	89 17       	cp	r24, r25
 87c:	20 f0       	brcs	.+8      	; 0x886 <__stack+0x27>
 87e:	d0 93 a0 06 	sts	0x06A0, r29	; 0x8006a0 <pxCurrentTCB+0x1>
 882:	c0 93 9f 06 	sts	0x069F, r28	; 0x80069f <pxCurrentTCB>
 886:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <uxTaskNumber>
 88a:	8f 5f       	subi	r24, 0xFF	; 255
 88c:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <uxTaskNumber>
 890:	8e 89       	ldd	r24, Y+22	; 0x16
 892:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 896:	98 17       	cp	r25, r24
 898:	10 f4       	brcc	.+4      	; 0x89e <__stack+0x3f>
 89a:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <uxTopReadyPriority>
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	fc 01       	movw	r30, r24
 8a2:	ee 0f       	add	r30, r30
 8a4:	ff 1f       	adc	r31, r31
 8a6:	ee 0f       	add	r30, r30
 8a8:	ff 1f       	adc	r31, r31
 8aa:	ee 0f       	add	r30, r30
 8ac:	ff 1f       	adc	r31, r31
 8ae:	8e 0f       	add	r24, r30
 8b0:	9f 1f       	adc	r25, r31
 8b2:	fc 01       	movw	r30, r24
 8b4:	e2 5c       	subi	r30, 0xC2	; 194
 8b6:	f9 4f       	sbci	r31, 0xF9	; 249
 8b8:	01 80       	ldd	r0, Z+1	; 0x01
 8ba:	f2 81       	ldd	r31, Z+2	; 0x02
 8bc:	e0 2d       	mov	r30, r0
 8be:	fd 83       	std	Y+5, r31	; 0x05
 8c0:	ec 83       	std	Y+4, r30	; 0x04
 8c2:	84 81       	ldd	r24, Z+4	; 0x04
 8c4:	95 81       	ldd	r25, Z+5	; 0x05
 8c6:	9f 83       	std	Y+7, r25	; 0x07
 8c8:	8e 83       	std	Y+6, r24	; 0x06
 8ca:	a4 81       	ldd	r26, Z+4	; 0x04
 8cc:	b5 81       	ldd	r27, Z+5	; 0x05
 8ce:	ce 01       	movw	r24, r28
 8d0:	02 96       	adiw	r24, 0x02	; 2
 8d2:	13 96       	adiw	r26, 0x03	; 3
 8d4:	9c 93       	st	X, r25
 8d6:	8e 93       	st	-X, r24
 8d8:	12 97       	sbiw	r26, 0x02	; 2
 8da:	95 83       	std	Z+5, r25	; 0x05
 8dc:	84 83       	std	Z+4, r24	; 0x04
 8de:	ee 89       	ldd	r30, Y+22	; 0x16
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	cf 01       	movw	r24, r30
 8e4:	88 0f       	add	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	e8 0f       	add	r30, r24
 8f2:	f9 1f       	adc	r31, r25
 8f4:	e2 5c       	subi	r30, 0xC2	; 194
 8f6:	f9 4f       	sbci	r31, 0xF9	; 249
 8f8:	fb 87       	std	Y+11, r31	; 0x0b
 8fa:	ea 87       	std	Y+10, r30	; 0x0a
 8fc:	80 81       	ld	r24, Z
 8fe:	8f 5f       	subi	r24, 0xFF	; 255
 900:	80 83       	st	Z, r24
 902:	0f 90       	pop	r0
 904:	0f be       	out	0x3f, r0	; 63
 906:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <xSchedulerRunning>
 90a:	88 23       	and	r24, r24
 90c:	51 f0       	breq	.+20     	; 0x922 <__stack+0xc3>
 90e:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 912:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 916:	96 89       	ldd	r25, Z+22	; 0x16
 918:	8e 89       	ldd	r24, Y+22	; 0x16
 91a:	98 17       	cp	r25, r24
 91c:	10 f4       	brcc	.+4      	; 0x922 <__stack+0xc3>
 91e:	0e 94 40 06 	call	0xc80	; 0xc80 <vPortYield>
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	08 95       	ret

Disassembly of section .text.prvCheckTasksWaitingTermination:

00001212 <prvCheckTasksWaitingTermination>:
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	1c c0       	rjmp	.+56     	; 0x1250 <prvCheckTasksWaitingTermination+0x3e>
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	0f 92       	push	r0
    121e:	e0 91 70 06 	lds	r30, 0x0670	; 0x800670 <xTasksWaitingTermination+0x5>
    1222:	f0 91 71 06 	lds	r31, 0x0671	; 0x800671 <xTasksWaitingTermination+0x6>
    1226:	c6 81       	ldd	r28, Z+6	; 0x06
    1228:	d7 81       	ldd	r29, Z+7	; 0x07
    122a:	ce 01       	movw	r24, r28
    122c:	02 96       	adiw	r24, 0x02	; 2
    122e:	0e 94 bb 08 	call	0x1176	; 0x1176 <uxListRemove>
    1232:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
    1236:	81 50       	subi	r24, 0x01	; 1
    1238:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <uxCurrentNumberOfTasks>
    123c:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
    1240:	81 50       	subi	r24, 0x01	; 1
    1242:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	ce 01       	movw	r24, r28
    124c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <prvDeleteTCB>
    1250:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
    1254:	81 11       	cpse	r24, r1
    1256:	e0 cf       	rjmp	.-64     	; 0x1218 <prvCheckTasksWaitingTermination+0x6>
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

Disassembly of section .text.prvIdleTask:

00001344 <prvIdleTask>:

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
    1344:	0e 94 09 09 	call	0x1212	; 0x1212 <prvCheckTasksWaitingTermination>
    1348:	fd cf       	rjmp	.-6      	; 0x1344 <prvIdleTask>

Disassembly of section .text.prvAddCurrentTaskToDelayedList:

0000072c <prvAddCurrentTaskToDelayedList>:
    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
 72c:	ff 92       	push	r15
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	ec 01       	movw	r28, r24
 738:	f6 2e       	mov	r15, r22
 73a:	00 91 99 06 	lds	r16, 0x0699	; 0x800699 <xTickCount>
 73e:	10 91 9a 06 	lds	r17, 0x069A	; 0x80069a <xTickCount+0x1>
 742:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 746:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 74a:	02 96       	adiw	r24, 0x02	; 2
 74c:	0e 94 bb 08 	call	0x1176	; 0x1176 <uxListRemove>
 750:	cf 3f       	cpi	r28, 0xFF	; 255
 752:	8f ef       	ldi	r24, 0xFF	; 255
 754:	d8 07       	cpc	r29, r24
 756:	b1 f5       	brne	.+108    	; 0x7c4 <prvAddCurrentTaskToDelayedList+0x98>
 758:	ff 20       	and	r15, r15
 75a:	a1 f1       	breq	.+104    	; 0x7c4 <prvAddCurrentTaskToDelayedList+0x98>
 75c:	e2 e6       	ldi	r30, 0x62	; 98
 75e:	f6 e0       	ldi	r31, 0x06	; 6
 760:	a1 81       	ldd	r26, Z+1	; 0x01
 762:	b2 81       	ldd	r27, Z+2	; 0x02
 764:	c0 91 9f 06 	lds	r28, 0x069F	; 0x80069f <pxCurrentTCB>
 768:	d0 91 a0 06 	lds	r29, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 76c:	bd 83       	std	Y+5, r27	; 0x05
 76e:	ac 83       	std	Y+4, r26	; 0x04
 770:	c0 91 9f 06 	lds	r28, 0x069F	; 0x80069f <pxCurrentTCB>
 774:	d0 91 a0 06 	lds	r29, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 778:	14 96       	adiw	r26, 0x04	; 4
 77a:	8d 91       	ld	r24, X+
 77c:	9c 91       	ld	r25, X
 77e:	15 97       	sbiw	r26, 0x05	; 5
 780:	9f 83       	std	Y+7, r25	; 0x07
 782:	8e 83       	std	Y+6, r24	; 0x06
 784:	14 96       	adiw	r26, 0x04	; 4
 786:	cd 91       	ld	r28, X+
 788:	dc 91       	ld	r29, X
 78a:	15 97       	sbiw	r26, 0x05	; 5
 78c:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 790:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 794:	02 96       	adiw	r24, 0x02	; 2
 796:	9b 83       	std	Y+3, r25	; 0x03
 798:	8a 83       	std	Y+2, r24	; 0x02
 79a:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <pxCurrentTCB>
 79e:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 7a2:	02 96       	adiw	r24, 0x02	; 2
 7a4:	15 96       	adiw	r26, 0x05	; 5
 7a6:	9c 93       	st	X, r25
 7a8:	8e 93       	st	-X, r24
 7aa:	14 97       	sbiw	r26, 0x04	; 4
 7ac:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 7b0:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 7b4:	1b 96       	adiw	r26, 0x0b	; 11
 7b6:	fc 93       	st	X, r31
 7b8:	ee 93       	st	-X, r30
 7ba:	1a 97       	sbiw	r26, 0x0a	; 10
 7bc:	80 81       	ld	r24, Z
 7be:	8f 5f       	subi	r24, 0xFF	; 255
 7c0:	80 83       	st	Z, r24
 7c2:	2f c0       	rjmp	.+94     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7c4:	c0 0f       	add	r28, r16
 7c6:	d1 1f       	adc	r29, r17
 7c8:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 7cc:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 7d0:	d3 83       	std	Z+3, r29	; 0x03
 7d2:	c2 83       	std	Z+2, r28	; 0x02
 7d4:	c0 17       	cp	r28, r16
 7d6:	d1 07       	cpc	r29, r17
 7d8:	68 f4       	brcc	.+26     	; 0x7f4 <prvAddCurrentTaskToDelayedList+0xc8>
 7da:	60 91 9f 06 	lds	r22, 0x069F	; 0x80069f <pxCurrentTCB>
 7de:	70 91 a0 06 	lds	r23, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 7e2:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <pxOverflowDelayedTaskList>
 7e6:	90 91 9c 06 	lds	r25, 0x069C	; 0x80069c <pxOverflowDelayedTaskList+0x1>
 7ea:	6e 5f       	subi	r22, 0xFE	; 254
 7ec:	7f 4f       	sbci	r23, 0xFF	; 255
 7ee:	0e 94 01 08 	call	0x1002	; 0x1002 <vListInsert>
 7f2:	17 c0       	rjmp	.+46     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7f4:	60 91 9f 06 	lds	r22, 0x069F	; 0x80069f <pxCurrentTCB>
 7f8:	70 91 a0 06 	lds	r23, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 7fc:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <pxDelayedTaskList>
 800:	90 91 9e 06 	lds	r25, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
 804:	6e 5f       	subi	r22, 0xFE	; 254
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	0e 94 01 08 	call	0x1002	; 0x1002 <vListInsert>
 80c:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <xNextTaskUnblockTime>
 810:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <xNextTaskUnblockTime+0x1>
 814:	c8 17       	cp	r28, r24
 816:	d9 07       	cpc	r29, r25
 818:	20 f4       	brcc	.+8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81a:	d0 93 96 06 	sts	0x0696, r29	; 0x800696 <xNextTaskUnblockTime+0x1>
 81e:	c0 93 95 06 	sts	0x0695, r28	; 0x800695 <xNextTaskUnblockTime>
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	1f 91       	pop	r17
 828:	0f 91       	pop	r16
 82a:	ff 90       	pop	r15
 82c:	08 95       	ret

Disassembly of section .text.xTaskCreate:

00000a12 <xTaskCreate>:
 a12:	4f 92       	push	r4
 a14:	5f 92       	push	r5
 a16:	6f 92       	push	r6
 a18:	7f 92       	push	r7
 a1a:	8f 92       	push	r8
 a1c:	9f 92       	push	r9
 a1e:	af 92       	push	r10
 a20:	bf 92       	push	r11
 a22:	cf 92       	push	r12
 a24:	df 92       	push	r13
 a26:	ef 92       	push	r14
 a28:	ff 92       	push	r15
 a2a:	0f 93       	push	r16
 a2c:	1f 93       	push	r17
 a2e:	cf 93       	push	r28
 a30:	df 93       	push	r29
 a32:	00 d0       	rcall	.+0      	; 0xa34 <xTaskCreate+0x22>
 a34:	00 d0       	rcall	.+0      	; 0xa36 <xTaskCreate+0x24>
 a36:	0f 92       	push	r0
 a38:	cd b7       	in	r28, 0x3d	; 61
 a3a:	de b7       	in	r29, 0x3e	; 62
 a3c:	3c 01       	movw	r6, r24
 a3e:	49 83       	std	Y+1, r20	; 0x01
 a40:	5a 83       	std	Y+2, r21	; 0x02
 a42:	6b 83       	std	Y+3, r22	; 0x03
 a44:	49 01       	movw	r8, r18
 a46:	28 01       	movw	r4, r16
 a48:	c9 01       	movw	r24, r18
 a4a:	0e 94 28 07 	call	0xe50	; 0xe50 <pvPortMalloc>
 a4e:	8c 01       	movw	r16, r24
 a50:	89 2b       	or	r24, r25
 a52:	b9 f0       	breq	.+46     	; 0xa82 <xTaskCreate+0x70>
 a54:	86 e2       	ldi	r24, 0x26	; 38
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 28 07 	call	0xe50	; 0xe50 <pvPortMalloc>
 a5c:	9d 83       	std	Y+5, r25	; 0x05
 a5e:	8c 83       	std	Y+4, r24	; 0x04
 a60:	89 2b       	or	r24, r25
 a62:	59 f0       	breq	.+22     	; 0xa7a <xTaskCreate+0x68>
 a64:	86 e2       	ldi	r24, 0x26	; 38
 a66:	ec 81       	ldd	r30, Y+4	; 0x04
 a68:	fd 81       	ldd	r31, Y+5	; 0x05
 a6a:	11 92       	st	Z+, r1
 a6c:	8a 95       	dec	r24
 a6e:	e9 f7       	brne	.-6      	; 0xa6a <xTaskCreate+0x58>
 a70:	ec 81       	ldd	r30, Y+4	; 0x04
 a72:	fd 81       	ldd	r31, Y+5	; 0x05
 a74:	10 8f       	std	Z+24, r17	; 0x18
 a76:	07 8b       	std	Z+23, r16	; 0x17
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <xTaskCreate+0x74>
 a7a:	c8 01       	movw	r24, r16
 a7c:	0e 94 a9 09 	call	0x1352	; 0x1352 <vPortFree>
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <xTaskCreate+0x74>
 a82:	1d 82       	std	Y+5, r1	; 0x05
 a84:	1c 82       	std	Y+4, r1	; 0x04
 a86:	8c 81       	ldd	r24, Y+4	; 0x04
 a88:	9d 81       	ldd	r25, Y+5	; 0x05
 a8a:	89 2b       	or	r24, r25
 a8c:	d1 f0       	breq	.+52     	; 0xac2 <xTaskCreate+0xb0>
 a8e:	84 01       	movw	r16, r8
 a90:	20 e0       	ldi	r18, 0x00	; 0
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	1f 92       	push	r1
 a96:	1f 92       	push	r1
 a98:	1f 92       	push	r1
 a9a:	8c 80       	ldd	r8, Y+4	; 0x04
 a9c:	9d 80       	ldd	r9, Y+5	; 0x05
 a9e:	56 01       	movw	r10, r12
 aa0:	ce 2c       	mov	r12, r14
 aa2:	72 01       	movw	r14, r4
 aa4:	49 81       	ldd	r20, Y+1	; 0x01
 aa6:	5a 81       	ldd	r21, Y+2	; 0x02
 aa8:	6b 81       	ldd	r22, Y+3	; 0x03
 aaa:	c3 01       	movw	r24, r6
 aac:	0e 94 94 04 	call	0x928	; 0x928 <prvInitialiseNewTask>
 ab0:	8c 81       	ldd	r24, Y+4	; 0x04
 ab2:	9d 81       	ldd	r25, Y+5	; 0x05
 ab4:	0e 94 17 04 	call	0x82e	; 0x82e <prvAddNewTaskToReadyList>
 ab8:	0f 90       	pop	r0
 aba:	0f 90       	pop	r0
 abc:	0f 90       	pop	r0
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	01 c0       	rjmp	.+2      	; 0xac4 <xTaskCreate+0xb2>
 ac2:	8f ef       	ldi	r24, 0xFF	; 255
 ac4:	0f 90       	pop	r0
 ac6:	0f 90       	pop	r0
 ac8:	0f 90       	pop	r0
 aca:	0f 90       	pop	r0
 acc:	0f 90       	pop	r0
 ace:	df 91       	pop	r29
 ad0:	cf 91       	pop	r28
 ad2:	1f 91       	pop	r17
 ad4:	0f 91       	pop	r16
 ad6:	ff 90       	pop	r15
 ad8:	ef 90       	pop	r14
 ada:	df 90       	pop	r13
 adc:	cf 90       	pop	r12
 ade:	bf 90       	pop	r11
 ae0:	af 90       	pop	r10
 ae2:	9f 90       	pop	r9
 ae4:	8f 90       	pop	r8
 ae6:	7f 90       	pop	r7
 ae8:	6f 90       	pop	r6
 aea:	5f 90       	pop	r5
 aec:	4f 90       	pop	r4
 aee:	08 95       	ret

Disassembly of section .text.vTaskStartScheduler:

000010c2 <vTaskStartScheduler>:
    10c2:	cf 92       	push	r12
    10c4:	df 92       	push	r13
    10c6:	ef 92       	push	r14
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	0f 2e       	mov	r0, r31
    10ce:	f3 e9       	ldi	r31, 0x93	; 147
    10d0:	cf 2e       	mov	r12, r31
    10d2:	f6 e0       	ldi	r31, 0x06	; 6
    10d4:	df 2e       	mov	r13, r31
    10d6:	f0 2d       	mov	r31, r0
    10d8:	e1 2c       	mov	r14, r1
    10da:	00 e0       	ldi	r16, 0x00	; 0
    10dc:	10 e0       	ldi	r17, 0x00	; 0
    10de:	25 e5       	ldi	r18, 0x55	; 85
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4e ea       	ldi	r20, 0xAE	; 174
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	82 ea       	ldi	r24, 0xA2	; 162
    10ea:	99 e0       	ldi	r25, 0x09	; 9
    10ec:	0e 94 09 05 	call	0xa12	; 0xa12 <xTaskCreate>
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	81 f4       	brne	.+32     	; 0x1114 <vTaskStartScheduler+0x52>
    10f4:	f8 94       	cli
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	9f ef       	ldi	r25, 0xFF	; 255
    10fa:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <xNextTaskUnblockTime+0x1>
    10fe:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <xNextTaskUnblockTime>
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <xSchedulerRunning>
    1108:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <xTickCount+0x1>
    110c:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <xTickCount>
    1110:	0e 94 32 08 	call	0x1064	; 0x1064 <xPortStartScheduler>
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	ef 90       	pop	r14
    111a:	df 90       	pop	r13
    111c:	cf 90       	pop	r12
    111e:	08 95       	ret

Disassembly of section .text.vTaskSuspendAll:

0000132a <vTaskSuspendAll>:
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
    132a:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
    132e:	8f 5f       	subi	r24, 0xFF	; 255
    1330:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <uxSchedulerSuspended>
    1334:	08 95       	ret

Disassembly of section .text.xTaskIncrementTick:

000000b4 <xTaskIncrementTick>:
    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
  c0:	81 11       	cpse	r24, r1
  c2:	01 c1       	rjmp	.+514    	; 0x2c6 <xTaskIncrementTick+0x212>
  c4:	c0 91 99 06 	lds	r28, 0x0699	; 0x800699 <xTickCount>
  c8:	d0 91 9a 06 	lds	r29, 0x069A	; 0x80069a <xTickCount+0x1>
  cc:	8e 01       	movw	r16, r28
  ce:	0f 5f       	subi	r16, 0xFF	; 255
  d0:	1f 4f       	sbci	r17, 0xFF	; 255
  d2:	10 93 9a 06 	sts	0x069A, r17	; 0x80069a <xTickCount+0x1>
  d6:	00 93 99 06 	sts	0x0699, r16	; 0x800699 <xTickCount>
  da:	01 15       	cp	r16, r1
  dc:	11 05       	cpc	r17, r1
  de:	b9 f4       	brne	.+46     	; 0x10e <xTaskIncrementTick+0x5a>
  e0:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <pxDelayedTaskList>
  e4:	90 91 9e 06 	lds	r25, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
  e8:	20 91 9b 06 	lds	r18, 0x069B	; 0x80069b <pxOverflowDelayedTaskList>
  ec:	30 91 9c 06 	lds	r19, 0x069C	; 0x80069c <pxOverflowDelayedTaskList+0x1>
  f0:	30 93 9e 06 	sts	0x069E, r19	; 0x80069e <pxDelayedTaskList+0x1>
  f4:	20 93 9d 06 	sts	0x069D, r18	; 0x80069d <pxDelayedTaskList>
  f8:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <pxOverflowDelayedTaskList+0x1>
  fc:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <pxOverflowDelayedTaskList>
 100:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <xNumOfOverflows>
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <xNumOfOverflows>
 10a:	0e 94 2f 09 	call	0x125e	; 0x125e <prvResetNextTaskUnblockTime>
 10e:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <xNextTaskUnblockTime>
 112:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <xNextTaskUnblockTime+0x1>
 116:	08 17       	cp	r16, r24
 118:	19 07       	cpc	r17, r25
 11a:	20 f4       	brcc	.+8      	; 0x124 <xTaskIncrementTick+0x70>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	b8 c0       	rjmp	.+368    	; 0x290 <xTaskIncrementTick+0x1dc>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	01 c0       	rjmp	.+2      	; 0x126 <xTaskIncrementTick+0x72>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <pxDelayedTaskList>
 12a:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
 12e:	90 81       	ld	r25, Z
 130:	91 11       	cpse	r25, r1
 132:	07 c0       	rjmp	.+14     	; 0x142 <xTaskIncrementTick+0x8e>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	3f ef       	ldi	r19, 0xFF	; 255
 138:	30 93 96 06 	sts	0x0696, r19	; 0x800696 <xNextTaskUnblockTime+0x1>
 13c:	20 93 95 06 	sts	0x0695, r18	; 0x800695 <xNextTaskUnblockTime>
 140:	a7 c0       	rjmp	.+334    	; 0x290 <xTaskIncrementTick+0x1dc>
 142:	e0 91 9d 06 	lds	r30, 0x069D	; 0x80069d <pxDelayedTaskList>
 146:	f0 91 9e 06 	lds	r31, 0x069E	; 0x80069e <pxDelayedTaskList+0x1>
 14a:	05 80       	ldd	r0, Z+5	; 0x05
 14c:	f6 81       	ldd	r31, Z+6	; 0x06
 14e:	e0 2d       	mov	r30, r0
 150:	06 80       	ldd	r0, Z+6	; 0x06
 152:	f7 81       	ldd	r31, Z+7	; 0x07
 154:	e0 2d       	mov	r30, r0
 156:	22 81       	ldd	r18, Z+2	; 0x02
 158:	33 81       	ldd	r19, Z+3	; 0x03
 15a:	02 17       	cp	r16, r18
 15c:	13 07       	cpc	r17, r19
 15e:	28 f4       	brcc	.+10     	; 0x16a <xTaskIncrementTick+0xb6>
 160:	30 93 96 06 	sts	0x0696, r19	; 0x800696 <xNextTaskUnblockTime+0x1>
 164:	20 93 95 06 	sts	0x0695, r18	; 0x800695 <xNextTaskUnblockTime>
 168:	93 c0       	rjmp	.+294    	; 0x290 <xTaskIncrementTick+0x1dc>
 16a:	a2 85       	ldd	r26, Z+10	; 0x0a
 16c:	b3 85       	ldd	r27, Z+11	; 0x0b
 16e:	24 81       	ldd	r18, Z+4	; 0x04
 170:	35 81       	ldd	r19, Z+5	; 0x05
 172:	46 81       	ldd	r20, Z+6	; 0x06
 174:	57 81       	ldd	r21, Z+7	; 0x07
 176:	e9 01       	movw	r28, r18
 178:	5d 83       	std	Y+5, r21	; 0x05
 17a:	4c 83       	std	Y+4, r20	; 0x04
 17c:	26 81       	ldd	r18, Z+6	; 0x06
 17e:	37 81       	ldd	r19, Z+7	; 0x07
 180:	44 81       	ldd	r20, Z+4	; 0x04
 182:	55 81       	ldd	r21, Z+5	; 0x05
 184:	e9 01       	movw	r28, r18
 186:	5b 83       	std	Y+3, r21	; 0x03
 188:	4a 83       	std	Y+2, r20	; 0x02
 18a:	11 96       	adiw	r26, 0x01	; 1
 18c:	2d 91       	ld	r18, X+
 18e:	3c 91       	ld	r19, X
 190:	12 97       	sbiw	r26, 0x02	; 2
 192:	af 01       	movw	r20, r30
 194:	4e 5f       	subi	r20, 0xFE	; 254
 196:	5f 4f       	sbci	r21, 0xFF	; 255
 198:	24 17       	cp	r18, r20
 19a:	35 07       	cpc	r19, r21
 19c:	31 f4       	brne	.+12     	; 0x1aa <xTaskIncrementTick+0xf6>
 19e:	26 81       	ldd	r18, Z+6	; 0x06
 1a0:	37 81       	ldd	r19, Z+7	; 0x07
 1a2:	12 96       	adiw	r26, 0x02	; 2
 1a4:	3c 93       	st	X, r19
 1a6:	2e 93       	st	-X, r18
 1a8:	11 97       	sbiw	r26, 0x01	; 1
 1aa:	13 86       	std	Z+11, r1	; 0x0b
 1ac:	12 86       	std	Z+10, r1	; 0x0a
 1ae:	9c 91       	ld	r25, X
 1b0:	91 50       	subi	r25, 0x01	; 1
 1b2:	9c 93       	st	X, r25
 1b4:	a4 89       	ldd	r26, Z+20	; 0x14
 1b6:	b5 89       	ldd	r27, Z+21	; 0x15
 1b8:	10 97       	sbiw	r26, 0x00	; 0
 1ba:	19 f1       	breq	.+70     	; 0x202 <xTaskIncrementTick+0x14e>
 1bc:	26 85       	ldd	r18, Z+14	; 0x0e
 1be:	37 85       	ldd	r19, Z+15	; 0x0f
 1c0:	60 89       	ldd	r22, Z+16	; 0x10
 1c2:	71 89       	ldd	r23, Z+17	; 0x11
 1c4:	e9 01       	movw	r28, r18
 1c6:	7d 83       	std	Y+5, r23	; 0x05
 1c8:	6c 83       	std	Y+4, r22	; 0x04
 1ca:	20 89       	ldd	r18, Z+16	; 0x10
 1cc:	31 89       	ldd	r19, Z+17	; 0x11
 1ce:	66 85       	ldd	r22, Z+14	; 0x0e
 1d0:	77 85       	ldd	r23, Z+15	; 0x0f
 1d2:	e9 01       	movw	r28, r18
 1d4:	7b 83       	std	Y+3, r23	; 0x03
 1d6:	6a 83       	std	Y+2, r22	; 0x02
 1d8:	11 96       	adiw	r26, 0x01	; 1
 1da:	6d 91       	ld	r22, X+
 1dc:	7c 91       	ld	r23, X
 1de:	12 97       	sbiw	r26, 0x02	; 2
 1e0:	9f 01       	movw	r18, r30
 1e2:	24 5f       	subi	r18, 0xF4	; 244
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	62 17       	cp	r22, r18
 1e8:	73 07       	cpc	r23, r19
 1ea:	31 f4       	brne	.+12     	; 0x1f8 <xTaskIncrementTick+0x144>
 1ec:	20 89       	ldd	r18, Z+16	; 0x10
 1ee:	31 89       	ldd	r19, Z+17	; 0x11
 1f0:	12 96       	adiw	r26, 0x02	; 2
 1f2:	3c 93       	st	X, r19
 1f4:	2e 93       	st	-X, r18
 1f6:	11 97       	sbiw	r26, 0x01	; 1
 1f8:	15 8a       	std	Z+21, r1	; 0x15
 1fa:	14 8a       	std	Z+20, r1	; 0x14
 1fc:	9c 91       	ld	r25, X
 1fe:	91 50       	subi	r25, 0x01	; 1
 200:	9c 93       	st	X, r25
 202:	26 89       	ldd	r18, Z+22	; 0x16
 204:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 208:	92 17       	cp	r25, r18
 20a:	10 f4       	brcc	.+4      	; 0x210 <xTaskIncrementTick+0x15c>
 20c:	20 93 a6 06 	sts	0x06A6, r18	; 0x8006a6 <uxTopReadyPriority>
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	d9 01       	movw	r26, r18
 214:	aa 0f       	add	r26, r26
 216:	bb 1f       	adc	r27, r27
 218:	aa 0f       	add	r26, r26
 21a:	bb 1f       	adc	r27, r27
 21c:	aa 0f       	add	r26, r26
 21e:	bb 1f       	adc	r27, r27
 220:	2a 0f       	add	r18, r26
 222:	3b 1f       	adc	r19, r27
 224:	d9 01       	movw	r26, r18
 226:	a2 5c       	subi	r26, 0xC2	; 194
 228:	b9 4f       	sbci	r27, 0xF9	; 249
 22a:	11 96       	adiw	r26, 0x01	; 1
 22c:	0d 90       	ld	r0, X+
 22e:	bc 91       	ld	r27, X
 230:	a0 2d       	mov	r26, r0
 232:	b5 83       	std	Z+5, r27	; 0x05
 234:	a4 83       	std	Z+4, r26	; 0x04
 236:	14 96       	adiw	r26, 0x04	; 4
 238:	2d 91       	ld	r18, X+
 23a:	3c 91       	ld	r19, X
 23c:	15 97       	sbiw	r26, 0x05	; 5
 23e:	37 83       	std	Z+7, r19	; 0x07
 240:	26 83       	std	Z+6, r18	; 0x06
 242:	14 96       	adiw	r26, 0x04	; 4
 244:	2d 91       	ld	r18, X+
 246:	3c 91       	ld	r19, X
 248:	15 97       	sbiw	r26, 0x05	; 5
 24a:	e9 01       	movw	r28, r18
 24c:	5b 83       	std	Y+3, r21	; 0x03
 24e:	4a 83       	std	Y+2, r20	; 0x02
 250:	15 96       	adiw	r26, 0x05	; 5
 252:	5c 93       	st	X, r21
 254:	4e 93       	st	-X, r20
 256:	14 97       	sbiw	r26, 0x04	; 4
 258:	a6 89       	ldd	r26, Z+22	; 0x16
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	9d 01       	movw	r18, r26
 25e:	22 0f       	add	r18, r18
 260:	33 1f       	adc	r19, r19
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	a2 0f       	add	r26, r18
 26c:	b3 1f       	adc	r27, r19
 26e:	a2 5c       	subi	r26, 0xC2	; 194
 270:	b9 4f       	sbci	r27, 0xF9	; 249
 272:	b3 87       	std	Z+11, r27	; 0x0b
 274:	a2 87       	std	Z+10, r26	; 0x0a
 276:	9c 91       	ld	r25, X
 278:	9f 5f       	subi	r25, 0xFF	; 255
 27a:	9c 93       	st	X, r25
 27c:	26 89       	ldd	r18, Z+22	; 0x16
 27e:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 282:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 286:	96 89       	ldd	r25, Z+22	; 0x16
 288:	92 17       	cp	r25, r18
 28a:	08 f4       	brcc	.+2      	; 0x28e <xTaskIncrementTick+0x1da>
 28c:	49 cf       	rjmp	.-366    	; 0x120 <xTaskIncrementTick+0x6c>
 28e:	4b cf       	rjmp	.-362    	; 0x126 <xTaskIncrementTick+0x72>
 290:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 294:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 298:	26 89       	ldd	r18, Z+22	; 0x16
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	f9 01       	movw	r30, r18
 29e:	ee 0f       	add	r30, r30
 2a0:	ff 1f       	adc	r31, r31
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	2e 0f       	add	r18, r30
 2ac:	3f 1f       	adc	r19, r31
 2ae:	f9 01       	movw	r30, r18
 2b0:	e2 5c       	subi	r30, 0xC2	; 194
 2b2:	f9 4f       	sbci	r31, 0xF9	; 249
 2b4:	90 81       	ld	r25, Z
 2b6:	92 30       	cpi	r25, 0x02	; 2
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <xTaskIncrementTick+0x208>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <xYieldPending>
 2c0:	91 11       	cpse	r25, r1
 2c2:	0c c0       	rjmp	.+24     	; 0x2dc <xTaskIncrementTick+0x228>
 2c4:	0c c0       	rjmp	.+24     	; 0x2de <xTaskIncrementTick+0x22a>
 2c6:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <xPendedTicks>
 2ca:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <xPendedTicks+0x1>
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	90 93 98 06 	sts	0x0698, r25	; 0x800698 <xPendedTicks+0x1>
 2d4:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <xPendedTicks>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	01 c0       	rjmp	.+2      	; 0x2de <xTaskIncrementTick+0x22a>
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	08 95       	ret

Disassembly of section .text.xTaskResumeAll:

000002e8 <xTaskResumeAll>:
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	0f 92       	push	r0
 2f2:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
 2f6:	81 50       	subi	r24, 0x01	; 1
 2f8:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <uxSchedulerSuspended>
 2fc:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
 300:	81 11       	cpse	r24, r1
 302:	bf c0       	rjmp	.+382    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 304:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
 308:	81 11       	cpse	r24, r1
 30a:	96 c0       	rjmp	.+300    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 30c:	bd c0       	rjmp	.+378    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 30e:	e0 91 79 06 	lds	r30, 0x0679	; 0x800679 <xPendingReadyList+0x5>
 312:	f0 91 7a 06 	lds	r31, 0x067A	; 0x80067a <xPendingReadyList+0x6>
 316:	06 80       	ldd	r0, Z+6	; 0x06
 318:	f7 81       	ldd	r31, Z+7	; 0x07
 31a:	e0 2d       	mov	r30, r0
 31c:	a4 89       	ldd	r26, Z+20	; 0x14
 31e:	b5 89       	ldd	r27, Z+21	; 0x15
 320:	c6 85       	ldd	r28, Z+14	; 0x0e
 322:	d7 85       	ldd	r29, Z+15	; 0x0f
 324:	80 89       	ldd	r24, Z+16	; 0x10
 326:	91 89       	ldd	r25, Z+17	; 0x11
 328:	9d 83       	std	Y+5, r25	; 0x05
 32a:	8c 83       	std	Y+4, r24	; 0x04
 32c:	c0 89       	ldd	r28, Z+16	; 0x10
 32e:	d1 89       	ldd	r29, Z+17	; 0x11
 330:	86 85       	ldd	r24, Z+14	; 0x0e
 332:	97 85       	ldd	r25, Z+15	; 0x0f
 334:	9b 83       	std	Y+3, r25	; 0x03
 336:	8a 83       	std	Y+2, r24	; 0x02
 338:	11 96       	adiw	r26, 0x01	; 1
 33a:	2d 91       	ld	r18, X+
 33c:	3c 91       	ld	r19, X
 33e:	12 97       	sbiw	r26, 0x02	; 2
 340:	cf 01       	movw	r24, r30
 342:	0c 96       	adiw	r24, 0x0c	; 12
 344:	28 17       	cp	r18, r24
 346:	39 07       	cpc	r19, r25
 348:	31 f4       	brne	.+12     	; 0x356 <xTaskResumeAll+0x6e>
 34a:	80 89       	ldd	r24, Z+16	; 0x10
 34c:	91 89       	ldd	r25, Z+17	; 0x11
 34e:	12 96       	adiw	r26, 0x02	; 2
 350:	9c 93       	st	X, r25
 352:	8e 93       	st	-X, r24
 354:	11 97       	sbiw	r26, 0x01	; 1
 356:	15 8a       	std	Z+21, r1	; 0x15
 358:	14 8a       	std	Z+20, r1	; 0x14
 35a:	8c 91       	ld	r24, X
 35c:	81 50       	subi	r24, 0x01	; 1
 35e:	8c 93       	st	X, r24
 360:	a2 85       	ldd	r26, Z+10	; 0x0a
 362:	b3 85       	ldd	r27, Z+11	; 0x0b
 364:	c4 81       	ldd	r28, Z+4	; 0x04
 366:	d5 81       	ldd	r29, Z+5	; 0x05
 368:	86 81       	ldd	r24, Z+6	; 0x06
 36a:	97 81       	ldd	r25, Z+7	; 0x07
 36c:	9d 83       	std	Y+5, r25	; 0x05
 36e:	8c 83       	std	Y+4, r24	; 0x04
 370:	c6 81       	ldd	r28, Z+6	; 0x06
 372:	d7 81       	ldd	r29, Z+7	; 0x07
 374:	84 81       	ldd	r24, Z+4	; 0x04
 376:	95 81       	ldd	r25, Z+5	; 0x05
 378:	9b 83       	std	Y+3, r25	; 0x03
 37a:	8a 83       	std	Y+2, r24	; 0x02
 37c:	11 96       	adiw	r26, 0x01	; 1
 37e:	8d 91       	ld	r24, X+
 380:	9c 91       	ld	r25, X
 382:	12 97       	sbiw	r26, 0x02	; 2
 384:	9f 01       	movw	r18, r30
 386:	2e 5f       	subi	r18, 0xFE	; 254
 388:	3f 4f       	sbci	r19, 0xFF	; 255
 38a:	82 17       	cp	r24, r18
 38c:	93 07       	cpc	r25, r19
 38e:	31 f4       	brne	.+12     	; 0x39c <xTaskResumeAll+0xb4>
 390:	86 81       	ldd	r24, Z+6	; 0x06
 392:	97 81       	ldd	r25, Z+7	; 0x07
 394:	12 96       	adiw	r26, 0x02	; 2
 396:	9c 93       	st	X, r25
 398:	8e 93       	st	-X, r24
 39a:	11 97       	sbiw	r26, 0x01	; 1
 39c:	13 86       	std	Z+11, r1	; 0x0b
 39e:	12 86       	std	Z+10, r1	; 0x0a
 3a0:	8c 91       	ld	r24, X
 3a2:	81 50       	subi	r24, 0x01	; 1
 3a4:	8c 93       	st	X, r24
 3a6:	86 89       	ldd	r24, Z+22	; 0x16
 3a8:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 3ac:	98 17       	cp	r25, r24
 3ae:	10 f4       	brcc	.+4      	; 0x3b4 <xTaskResumeAll+0xcc>
 3b0:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <uxTopReadyPriority>
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	dc 01       	movw	r26, r24
 3b8:	aa 0f       	add	r26, r26
 3ba:	bb 1f       	adc	r27, r27
 3bc:	aa 0f       	add	r26, r26
 3be:	bb 1f       	adc	r27, r27
 3c0:	aa 0f       	add	r26, r26
 3c2:	bb 1f       	adc	r27, r27
 3c4:	8a 0f       	add	r24, r26
 3c6:	9b 1f       	adc	r25, r27
 3c8:	dc 01       	movw	r26, r24
 3ca:	a2 5c       	subi	r26, 0xC2	; 194
 3cc:	b9 4f       	sbci	r27, 0xF9	; 249
 3ce:	11 96       	adiw	r26, 0x01	; 1
 3d0:	0d 90       	ld	r0, X+
 3d2:	bc 91       	ld	r27, X
 3d4:	a0 2d       	mov	r26, r0
 3d6:	b5 83       	std	Z+5, r27	; 0x05
 3d8:	a4 83       	std	Z+4, r26	; 0x04
 3da:	14 96       	adiw	r26, 0x04	; 4
 3dc:	8d 91       	ld	r24, X+
 3de:	9c 91       	ld	r25, X
 3e0:	15 97       	sbiw	r26, 0x05	; 5
 3e2:	97 83       	std	Z+7, r25	; 0x07
 3e4:	86 83       	std	Z+6, r24	; 0x06
 3e6:	14 96       	adiw	r26, 0x04	; 4
 3e8:	cd 91       	ld	r28, X+
 3ea:	dc 91       	ld	r29, X
 3ec:	15 97       	sbiw	r26, 0x05	; 5
 3ee:	3b 83       	std	Y+3, r19	; 0x03
 3f0:	2a 83       	std	Y+2, r18	; 0x02
 3f2:	15 96       	adiw	r26, 0x05	; 5
 3f4:	3c 93       	st	X, r19
 3f6:	2e 93       	st	-X, r18
 3f8:	14 97       	sbiw	r26, 0x04	; 4
 3fa:	a6 89       	ldd	r26, Z+22	; 0x16
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	cd 01       	movw	r24, r26
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	a8 0f       	add	r26, r24
 40e:	b9 1f       	adc	r27, r25
 410:	a2 5c       	subi	r26, 0xC2	; 194
 412:	b9 4f       	sbci	r27, 0xF9	; 249
 414:	b3 87       	std	Z+11, r27	; 0x0b
 416:	a2 87       	std	Z+10, r26	; 0x0a
 418:	8c 91       	ld	r24, X
 41a:	8f 5f       	subi	r24, 0xFF	; 255
 41c:	8c 93       	st	X, r24
 41e:	96 89       	ldd	r25, Z+22	; 0x16
 420:	a0 91 9f 06 	lds	r26, 0x069F	; 0x80069f <pxCurrentTCB>
 424:	b0 91 a0 06 	lds	r27, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 428:	56 96       	adiw	r26, 0x16	; 22
 42a:	8c 91       	ld	r24, X
 42c:	98 17       	cp	r25, r24
 42e:	30 f0       	brcs	.+12     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
 436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 438:	e0 e0       	ldi	r30, 0x00	; 0
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <xPendingReadyList>
 440:	81 11       	cpse	r24, r1
 442:	65 cf       	rjmp	.-310    	; 0x30e <xTaskResumeAll+0x26>
 444:	ef 2b       	or	r30, r31
 446:	11 f0       	breq	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	0e 94 2f 09 	call	0x125e	; 0x125e <prvResetNextTaskUnblockTime>
 44c:	c0 91 97 06 	lds	r28, 0x0697	; 0x800697 <xPendedTicks>
 450:	d0 91 98 06 	lds	r29, 0x0698	; 0x800698 <xPendedTicks+0x1>
 454:	20 97       	sbiw	r28, 0x00	; 0
 456:	69 f0       	breq	.+26     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 458:	0e 94 5a 00 	call	0xb4	; 0xb4 <xTaskIncrementTick>
 45c:	88 23       	and	r24, r24
 45e:	19 f0       	breq	.+6      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
 466:	21 97       	sbiw	r28, 0x01	; 1
 468:	b9 f7       	brne	.-18     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 46a:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <xPendedTicks+0x1>
 46e:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <xPendedTicks>
 472:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <xYieldPending>
 476:	88 23       	and	r24, r24
 478:	31 f0       	breq	.+12     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 47a:	0e 94 40 06 	call	0xc80	; 0xc80 <vPortYield>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	03 c0       	rjmp	.+6      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	01 c0       	rjmp	.+2      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

Disassembly of section .text.vTaskSwitchContext:

00000d32 <vTaskSwitchContext>:
 d32:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
 d36:	88 23       	and	r24, r24
 d38:	21 f0       	breq	.+8      	; 0xd42 <vTaskSwitchContext+0x10>
 d3a:	81 e0       	ldi	r24, 0x01	; 1
 d3c:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
 d40:	08 95       	ret
 d42:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <xYieldPending>
 d46:	20 91 a6 06 	lds	r18, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 d4a:	01 c0       	rjmp	.+2      	; 0xd4e <vTaskSwitchContext+0x1c>
 d4c:	21 50       	subi	r18, 0x01	; 1
 d4e:	82 2f       	mov	r24, r18
 d50:	90 e0       	ldi	r25, 0x00	; 0
 d52:	fc 01       	movw	r30, r24
 d54:	ee 0f       	add	r30, r30
 d56:	ff 1f       	adc	r31, r31
 d58:	ee 0f       	add	r30, r30
 d5a:	ff 1f       	adc	r31, r31
 d5c:	ee 0f       	add	r30, r30
 d5e:	ff 1f       	adc	r31, r31
 d60:	e8 0f       	add	r30, r24
 d62:	f9 1f       	adc	r31, r25
 d64:	e2 5c       	subi	r30, 0xC2	; 194
 d66:	f9 4f       	sbci	r31, 0xF9	; 249
 d68:	30 81       	ld	r19, Z
 d6a:	33 23       	and	r19, r19
 d6c:	79 f3       	breq	.-34     	; 0xd4c <vTaskSwitchContext+0x1a>
 d6e:	ac 01       	movw	r20, r24
 d70:	44 0f       	add	r20, r20
 d72:	55 1f       	adc	r21, r21
 d74:	44 0f       	add	r20, r20
 d76:	55 1f       	adc	r21, r21
 d78:	44 0f       	add	r20, r20
 d7a:	55 1f       	adc	r21, r21
 d7c:	48 0f       	add	r20, r24
 d7e:	59 1f       	adc	r21, r25
 d80:	df 01       	movw	r26, r30
 d82:	01 80       	ldd	r0, Z+1	; 0x01
 d84:	f2 81       	ldd	r31, Z+2	; 0x02
 d86:	e0 2d       	mov	r30, r0
 d88:	02 80       	ldd	r0, Z+2	; 0x02
 d8a:	f3 81       	ldd	r31, Z+3	; 0x03
 d8c:	e0 2d       	mov	r30, r0
 d8e:	12 96       	adiw	r26, 0x02	; 2
 d90:	fc 93       	st	X, r31
 d92:	ee 93       	st	-X, r30
 d94:	11 97       	sbiw	r26, 0x01	; 1
 d96:	4f 5b       	subi	r20, 0xBF	; 191
 d98:	59 4f       	sbci	r21, 0xF9	; 249
 d9a:	e4 17       	cp	r30, r20
 d9c:	f5 07       	cpc	r31, r21
 d9e:	29 f4       	brne	.+10     	; 0xdaa <vTaskSwitchContext+0x78>
 da0:	42 81       	ldd	r20, Z+2	; 0x02
 da2:	53 81       	ldd	r21, Z+3	; 0x03
 da4:	fd 01       	movw	r30, r26
 da6:	52 83       	std	Z+2, r21	; 0x02
 da8:	41 83       	std	Z+1, r20	; 0x01
 daa:	fc 01       	movw	r30, r24
 dac:	ee 0f       	add	r30, r30
 dae:	ff 1f       	adc	r31, r31
 db0:	ee 0f       	add	r30, r30
 db2:	ff 1f       	adc	r31, r31
 db4:	ee 0f       	add	r30, r30
 db6:	ff 1f       	adc	r31, r31
 db8:	8e 0f       	add	r24, r30
 dba:	9f 1f       	adc	r25, r31
 dbc:	fc 01       	movw	r30, r24
 dbe:	e2 5c       	subi	r30, 0xC2	; 194
 dc0:	f9 4f       	sbci	r31, 0xF9	; 249
 dc2:	01 80       	ldd	r0, Z+1	; 0x01
 dc4:	f2 81       	ldd	r31, Z+2	; 0x02
 dc6:	e0 2d       	mov	r30, r0
 dc8:	86 81       	ldd	r24, Z+6	; 0x06
 dca:	97 81       	ldd	r25, Z+7	; 0x07
 dcc:	90 93 a0 06 	sts	0x06A0, r25	; 0x8006a0 <pxCurrentTCB+0x1>
 dd0:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <pxCurrentTCB>
 dd4:	20 93 a6 06 	sts	0x06A6, r18	; 0x8006a6 <uxTopReadyPriority>
 dd8:	08 95       	ret

Disassembly of section .text.ulTaskGenericNotifyTake:

00000626 <ulTaskGenericNotifyTake>:
 626:	cf 92       	push	r12
 628:	df 92       	push	r13
 62a:	ef 92       	push	r14
 62c:	ff 92       	push	r15
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	16 2f       	mov	r17, r22
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	f8 94       	cli
 63a:	0f 92       	push	r0
 63c:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 640:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 644:	c8 2f       	mov	r28, r24
 646:	d0 e0       	ldi	r29, 0x00	; 0
 648:	9e 01       	movw	r18, r28
 64a:	22 0f       	add	r18, r18
 64c:	33 1f       	adc	r19, r19
 64e:	22 0f       	add	r18, r18
 650:	33 1f       	adc	r19, r19
 652:	e2 0f       	add	r30, r18
 654:	f3 1f       	adc	r31, r19
 656:	c1 a0       	ldd	r12, Z+33	; 0x21
 658:	d2 a0       	ldd	r13, Z+34	; 0x22
 65a:	e3 a0       	ldd	r14, Z+35	; 0x23
 65c:	f4 a0       	ldd	r15, Z+36	; 0x24
 65e:	cd 28       	or	r12, r13
 660:	ce 28       	or	r12, r14
 662:	cf 28       	or	r12, r15
 664:	89 f4       	brne	.+34     	; 0x688 <ulTaskGenericNotifyTake+0x62>
 666:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 66a:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 66e:	ec 0f       	add	r30, r28
 670:	fd 1f       	adc	r31, r29
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	85 a3       	std	Z+37, r24	; 0x25
 676:	41 15       	cp	r20, r1
 678:	51 05       	cpc	r21, r1
 67a:	31 f0       	breq	.+12     	; 0x688 <ulTaskGenericNotifyTake+0x62>
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	ca 01       	movw	r24, r20
 680:	0e 94 96 03 	call	0x72c	; 0x72c <prvAddCurrentTaskToDelayedList>
 684:	0e 94 40 06 	call	0xc80	; 0xc80 <vPortYield>
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	f8 94       	cli
 690:	0f 92       	push	r0
 692:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 696:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 69a:	ce 01       	movw	r24, r28
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	e8 0f       	add	r30, r24
 6a6:	f9 1f       	adc	r31, r25
 6a8:	61 a1       	ldd	r22, Z+33	; 0x21
 6aa:	72 a1       	ldd	r23, Z+34	; 0x22
 6ac:	83 a1       	ldd	r24, Z+35	; 0x23
 6ae:	94 a1       	ldd	r25, Z+36	; 0x24
 6b0:	61 15       	cp	r22, r1
 6b2:	71 05       	cpc	r23, r1
 6b4:	81 05       	cpc	r24, r1
 6b6:	91 05       	cpc	r25, r1
 6b8:	41 f1       	breq	.+80     	; 0x70a <ulTaskGenericNotifyTake+0xe4>
 6ba:	11 23       	and	r17, r17
 6bc:	81 f0       	breq	.+32     	; 0x6de <ulTaskGenericNotifyTake+0xb8>
 6be:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 6c2:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 6c6:	9e 01       	movw	r18, r28
 6c8:	22 0f       	add	r18, r18
 6ca:	33 1f       	adc	r19, r19
 6cc:	22 0f       	add	r18, r18
 6ce:	33 1f       	adc	r19, r19
 6d0:	e2 0f       	add	r30, r18
 6d2:	f3 1f       	adc	r31, r19
 6d4:	11 a2       	std	Z+33, r1	; 0x21
 6d6:	12 a2       	std	Z+34, r1	; 0x22
 6d8:	13 a2       	std	Z+35, r1	; 0x23
 6da:	14 a2       	std	Z+36, r1	; 0x24
 6dc:	16 c0       	rjmp	.+44     	; 0x70a <ulTaskGenericNotifyTake+0xe4>
 6de:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 6e2:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 6e6:	9e 01       	movw	r18, r28
 6e8:	22 0f       	add	r18, r18
 6ea:	33 1f       	adc	r19, r19
 6ec:	22 0f       	add	r18, r18
 6ee:	33 1f       	adc	r19, r19
 6f0:	e2 0f       	add	r30, r18
 6f2:	f3 1f       	adc	r31, r19
 6f4:	6b 01       	movw	r12, r22
 6f6:	7c 01       	movw	r14, r24
 6f8:	21 e0       	ldi	r18, 0x01	; 1
 6fa:	c2 1a       	sub	r12, r18
 6fc:	d1 08       	sbc	r13, r1
 6fe:	e1 08       	sbc	r14, r1
 700:	f1 08       	sbc	r15, r1
 702:	c1 a2       	std	Z+33, r12	; 0x21
 704:	d2 a2       	std	Z+34, r13	; 0x22
 706:	e3 a2       	std	Z+35, r14	; 0x23
 708:	f4 a2       	std	Z+36, r15	; 0x24
 70a:	20 91 9f 06 	lds	r18, 0x069F	; 0x80069f <pxCurrentTCB>
 70e:	30 91 a0 06 	lds	r19, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 712:	c2 0f       	add	r28, r18
 714:	d3 1f       	adc	r29, r19
 716:	1d a2       	std	Y+37, r1	; 0x25
 718:	0f 90       	pop	r0
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	1f 91       	pop	r17
 722:	ff 90       	pop	r15
 724:	ef 90       	pop	r14
 726:	df 90       	pop	r13
 728:	cf 90       	pop	r12
 72a:	08 95       	ret

Disassembly of section .text.vTaskGenericNotifyGiveFromISR:

00000492 <vTaskGenericNotifyGiveFromISR>:
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	dc 01       	movw	r26, r24
 49c:	e6 2f       	mov	r30, r22
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	ec 01       	movw	r28, r24
 4a2:	ce 0f       	add	r28, r30
 4a4:	df 1f       	adc	r29, r31
 4a6:	8d a1       	ldd	r24, Y+37	; 0x25
 4a8:	92 e0       	ldi	r25, 0x02	; 2
 4aa:	9d a3       	std	Y+37, r25	; 0x25
 4ac:	ee 0f       	add	r30, r30
 4ae:	ff 1f       	adc	r31, r31
 4b0:	ee 0f       	add	r30, r30
 4b2:	ff 1f       	adc	r31, r31
 4b4:	ea 0f       	add	r30, r26
 4b6:	fb 1f       	adc	r31, r27
 4b8:	01 a1       	ldd	r16, Z+33	; 0x21
 4ba:	12 a1       	ldd	r17, Z+34	; 0x22
 4bc:	23 a1       	ldd	r18, Z+35	; 0x23
 4be:	34 a1       	ldd	r19, Z+36	; 0x24
 4c0:	0f 5f       	subi	r16, 0xFF	; 255
 4c2:	1f 4f       	sbci	r17, 0xFF	; 255
 4c4:	2f 4f       	sbci	r18, 0xFF	; 255
 4c6:	3f 4f       	sbci	r19, 0xFF	; 255
 4c8:	01 a3       	std	Z+33, r16	; 0x21
 4ca:	12 a3       	std	Z+34, r17	; 0x22
 4cc:	23 a3       	std	Z+35, r18	; 0x23
 4ce:	34 a3       	std	Z+36, r19	; 0x24
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <vTaskGenericNotifyGiveFromISR+0x44>
 4d4:	a3 c0       	rjmp	.+326    	; 0x61c <vTaskGenericNotifyGiveFromISR+0x18a>
 4d6:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <uxSchedulerSuspended>
 4da:	81 11       	cpse	r24, r1
 4dc:	6d c0       	rjmp	.+218    	; 0x5b8 <vTaskGenericNotifyGiveFromISR+0x126>
 4de:	1a 96       	adiw	r26, 0x0a	; 10
 4e0:	ed 91       	ld	r30, X+
 4e2:	fc 91       	ld	r31, X
 4e4:	1b 97       	sbiw	r26, 0x0b	; 11
 4e6:	14 96       	adiw	r26, 0x04	; 4
 4e8:	cd 91       	ld	r28, X+
 4ea:	dc 91       	ld	r29, X
 4ec:	15 97       	sbiw	r26, 0x05	; 5
 4ee:	16 96       	adiw	r26, 0x06	; 6
 4f0:	8d 91       	ld	r24, X+
 4f2:	9c 91       	ld	r25, X
 4f4:	17 97       	sbiw	r26, 0x07	; 7
 4f6:	9d 83       	std	Y+5, r25	; 0x05
 4f8:	8c 83       	std	Y+4, r24	; 0x04
 4fa:	16 96       	adiw	r26, 0x06	; 6
 4fc:	cd 91       	ld	r28, X+
 4fe:	dc 91       	ld	r29, X
 500:	17 97       	sbiw	r26, 0x07	; 7
 502:	14 96       	adiw	r26, 0x04	; 4
 504:	8d 91       	ld	r24, X+
 506:	9c 91       	ld	r25, X
 508:	15 97       	sbiw	r26, 0x05	; 5
 50a:	9b 83       	std	Y+3, r25	; 0x03
 50c:	8a 83       	std	Y+2, r24	; 0x02
 50e:	81 81       	ldd	r24, Z+1	; 0x01
 510:	92 81       	ldd	r25, Z+2	; 0x02
 512:	9d 01       	movw	r18, r26
 514:	2e 5f       	subi	r18, 0xFE	; 254
 516:	3f 4f       	sbci	r19, 0xFF	; 255
 518:	82 17       	cp	r24, r18
 51a:	93 07       	cpc	r25, r19
 51c:	31 f4       	brne	.+12     	; 0x52a <vTaskGenericNotifyGiveFromISR+0x98>
 51e:	16 96       	adiw	r26, 0x06	; 6
 520:	8d 91       	ld	r24, X+
 522:	9c 91       	ld	r25, X
 524:	17 97       	sbiw	r26, 0x07	; 7
 526:	92 83       	std	Z+2, r25	; 0x02
 528:	81 83       	std	Z+1, r24	; 0x01
 52a:	1b 96       	adiw	r26, 0x0b	; 11
 52c:	1c 92       	st	X, r1
 52e:	1e 92       	st	-X, r1
 530:	1a 97       	sbiw	r26, 0x0a	; 10
 532:	80 81       	ld	r24, Z
 534:	81 50       	subi	r24, 0x01	; 1
 536:	80 83       	st	Z, r24
 538:	56 96       	adiw	r26, 0x16	; 22
 53a:	8c 91       	ld	r24, X
 53c:	56 97       	sbiw	r26, 0x16	; 22
 53e:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <uxTopReadyPriority>
 542:	98 17       	cp	r25, r24
 544:	10 f4       	brcc	.+4      	; 0x54a <vTaskGenericNotifyGiveFromISR+0xb8>
 546:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <uxTopReadyPriority>
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	fc 01       	movw	r30, r24
 54e:	ee 0f       	add	r30, r30
 550:	ff 1f       	adc	r31, r31
 552:	ee 0f       	add	r30, r30
 554:	ff 1f       	adc	r31, r31
 556:	ee 0f       	add	r30, r30
 558:	ff 1f       	adc	r31, r31
 55a:	8e 0f       	add	r24, r30
 55c:	9f 1f       	adc	r25, r31
 55e:	fc 01       	movw	r30, r24
 560:	e2 5c       	subi	r30, 0xC2	; 194
 562:	f9 4f       	sbci	r31, 0xF9	; 249
 564:	01 80       	ldd	r0, Z+1	; 0x01
 566:	f2 81       	ldd	r31, Z+2	; 0x02
 568:	e0 2d       	mov	r30, r0
 56a:	15 96       	adiw	r26, 0x05	; 5
 56c:	fc 93       	st	X, r31
 56e:	ee 93       	st	-X, r30
 570:	14 97       	sbiw	r26, 0x04	; 4
 572:	84 81       	ldd	r24, Z+4	; 0x04
 574:	95 81       	ldd	r25, Z+5	; 0x05
 576:	17 96       	adiw	r26, 0x07	; 7
 578:	9c 93       	st	X, r25
 57a:	8e 93       	st	-X, r24
 57c:	16 97       	sbiw	r26, 0x06	; 6
 57e:	c4 81       	ldd	r28, Z+4	; 0x04
 580:	d5 81       	ldd	r29, Z+5	; 0x05
 582:	3b 83       	std	Y+3, r19	; 0x03
 584:	2a 83       	std	Y+2, r18	; 0x02
 586:	35 83       	std	Z+5, r19	; 0x05
 588:	24 83       	std	Z+4, r18	; 0x04
 58a:	56 96       	adiw	r26, 0x16	; 22
 58c:	ec 91       	ld	r30, X
 58e:	56 97       	sbiw	r26, 0x16	; 22
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	cf 01       	movw	r24, r30
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	e8 0f       	add	r30, r24
 5a2:	f9 1f       	adc	r31, r25
 5a4:	e2 5c       	subi	r30, 0xC2	; 194
 5a6:	f9 4f       	sbci	r31, 0xF9	; 249
 5a8:	1b 96       	adiw	r26, 0x0b	; 11
 5aa:	fc 93       	st	X, r31
 5ac:	ee 93       	st	-X, r30
 5ae:	1a 97       	sbiw	r26, 0x0a	; 10
 5b0:	80 81       	ld	r24, Z
 5b2:	8f 5f       	subi	r24, 0xFF	; 255
 5b4:	80 83       	st	Z, r24
 5b6:	20 c0       	rjmp	.+64     	; 0x5f8 <vTaskGenericNotifyGiveFromISR+0x166>
 5b8:	64 e7       	ldi	r22, 0x74	; 116
 5ba:	76 e0       	ldi	r23, 0x06	; 6
 5bc:	fb 01       	movw	r30, r22
 5be:	c1 81       	ldd	r28, Z+1	; 0x01
 5c0:	d2 81       	ldd	r29, Z+2	; 0x02
 5c2:	1f 96       	adiw	r26, 0x0f	; 15
 5c4:	dc 93       	st	X, r29
 5c6:	ce 93       	st	-X, r28
 5c8:	1e 97       	sbiw	r26, 0x0e	; 14
 5ca:	8c 81       	ldd	r24, Y+4	; 0x04
 5cc:	9d 81       	ldd	r25, Y+5	; 0x05
 5ce:	51 96       	adiw	r26, 0x11	; 17
 5d0:	9c 93       	st	X, r25
 5d2:	8e 93       	st	-X, r24
 5d4:	50 97       	sbiw	r26, 0x10	; 16
 5d6:	2c 81       	ldd	r18, Y+4	; 0x04
 5d8:	3d 81       	ldd	r19, Y+5	; 0x05
 5da:	cd 01       	movw	r24, r26
 5dc:	0c 96       	adiw	r24, 0x0c	; 12
 5de:	f9 01       	movw	r30, r18
 5e0:	93 83       	std	Z+3, r25	; 0x03
 5e2:	82 83       	std	Z+2, r24	; 0x02
 5e4:	9d 83       	std	Y+5, r25	; 0x05
 5e6:	8c 83       	std	Y+4, r24	; 0x04
 5e8:	55 96       	adiw	r26, 0x15	; 21
 5ea:	7c 93       	st	X, r23
 5ec:	6e 93       	st	-X, r22
 5ee:	54 97       	sbiw	r26, 0x14	; 20
 5f0:	fb 01       	movw	r30, r22
 5f2:	80 81       	ld	r24, Z
 5f4:	8f 5f       	subi	r24, 0xFF	; 255
 5f6:	80 83       	st	Z, r24
 5f8:	56 96       	adiw	r26, 0x16	; 22
 5fa:	9c 91       	ld	r25, X
 5fc:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <pxCurrentTCB>
 600:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <pxCurrentTCB+0x1>
 604:	86 89       	ldd	r24, Z+22	; 0x16
 606:	89 17       	cp	r24, r25
 608:	48 f4       	brcc	.+18     	; 0x61c <vTaskGenericNotifyGiveFromISR+0x18a>
 60a:	41 15       	cp	r20, r1
 60c:	51 05       	cpc	r21, r1
 60e:	19 f0       	breq	.+6      	; 0x616 <vTaskGenericNotifyGiveFromISR+0x184>
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	fa 01       	movw	r30, r20
 614:	80 83       	st	Z, r24
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xYieldPending>
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00001354 <_fini>:
    1354:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00001356 <__funcs_on_exit>:
    1356:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00001358 <__simulator_exit>:
    1358:	08 95       	ret

Disassembly of section .text.exit:

00001302 <exit>:
    1302:	ec 01       	movw	r28, r24
    1304:	0e 94 ab 09 	call	0x1356	; 0x1356 <__funcs_on_exit>
    1308:	0e 94 aa 09 	call	0x1354	; 0x1354 <_fini>
    130c:	ce 01       	movw	r24, r28
    130e:	0e 94 ac 09 	call	0x1358	; 0x1358 <__simulator_exit>
    1312:	ce 01       	movw	r24, r28
    1314:	0e 94 a7 09 	call	0x134e	; 0x134e <_Exit>

Disassembly of section .text._Exit:

0000134e <_Exit>:
    134e:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
